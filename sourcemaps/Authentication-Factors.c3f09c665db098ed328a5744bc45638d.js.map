{"version":3,"file":"js/Authentication-Factors.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/disabledPage/disabled-page.js","webpack:///./src/Components/utils/general-utils.ts","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/Components/twoFactorCheck/two-factor-check.tsx","webpack:///./src/Components/nonAdminUser/non-admin-user.tsx","webpack:///./src/Routes/Authentication-Policy/Authentication-Factors.tsx"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","import {UserChoices} from \"../idpintegrationflows/commonInterfaces/userChoices\";\nimport {\n    OIDCValidation,\n    ValidationDetails,\n    ValidationTemplate\n} from \"../idpintegrationflows/commonInterfaces/OIDCValidation\";\n\nexport function isAdminUser (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload && jsonPayload.is_org_admin;\n}\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult {\n    if (required && !input) {\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified:VerificationResult;\n    let results :boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\ninterface Selections{\n    [key:string]: string;\n}\n\ninterface Validations{\n    [key:string]: {\n        inputType: string;\n    };\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (choices :Selections, validations :ValidationTemplate, setValidations :Function) {\n    let failureTriggered = false;\n    let update:Selections= {};\n    Object.keys(validations).forEach(validationKey => {\n        const submittedValue = choices &&  choices[validationKey];\n        // @ts-ignorer\n        const submittedType = validations[validationKey].inputType\n\n        const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n        if (verificationObject.status === 'error') {\n            failureTriggered = true;\n        }\n\n        // @ts-ignore\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n\n    });\n\n    // @ts-ignore\n    setValidations(update);\n\n    return failureTriggered;\n}\n","import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import './two-factor-check.scss';\nimport React, { useEffect, useState } from 'react';\nimport {\n    Title,\n    Text,\n    Button,\n    FormGroup,\n    Checkbox,\n    ActionGroup,\n    Popover,\n    PageSection,\n    Form\n} from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport QuestionIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon'\nimport { useDispatch } from 'react-redux'\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport PropTypes from \"prop-types\";\n\nlet docLink = \"\";\nlet statusURL = \"http://localhost:8081/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\n\ninterface Props{\n    tokenData: string\n}\n\nconst TwoFactorCheck = ({tokenData}: Props) => {\n\n    const chrome = useChrome();\n    if (chrome.getEnvironment() === 'stage') {\n        statusURL = \"https://sso.stage.redhat.com/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\n        docLink = \"https://access.stage.redhat.com/documentation/en-us/red_hat_customer_portal/1/html/using_two-factor_authentication/con-ciam-2fa-about_two-factor-authentication\";\n    }\n    else if (chrome.getEnvironment() === 'prod') {\n        statusURL = \"https://sso.redhat.com/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\n        docLink = \"https://access.redhat.com/documentation/en-us/red_hat_customer_portal/1/html/using_two-factor_authentication/con-ciam-2fa-about_two-factor-authentication\"\n    }\n    const dispatch = useDispatch();\n\n    // build the state hooks\n    const [checkState, updateCheckState] = useState({\n        checked: false,\n        changed: false,\n    });\n    const [loadingState, updateLoadingState] = useState({loading: true});\n\n\n    const toggleCheckBox = () => {\n        updateCheckState({\n            checked: !checkState.checked,\n            changed: true\n        })\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const successAlert = () => {\n        dispatch(\n            addNotification({\n                variant: 'success',\n                description: 'Authentication policy settings saved',\n                title: \"Success\"\n            })\n        );\n    };\n\n    const failureAlert = (er: string) => {\n        dispatch(\n            addNotification({\n                variant: 'danger',\n                description: er,\n                title: 'Error'\n            })\n        );\n    };\n\n    const pullCurrentState = () => {\n        // Need to establish the existing state by querying the base endpoint.\n\n        fetch(statusURL, {\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + tokenData\n            }\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    console.error(data.error);\n                    failureAlert('Failed to fetch the current status');\n                }\n                else {\n                    updateCheckState({\n                        checked: data.authenticationFactors.otp.required,\n                        changed: false\n                    });\n                    updateLoadingState({\n                        loading: false\n                    })\n                }\n            });\n    }\n\n    // equivalent to componentDidMount when provided an empty array as a second param\n    useEffect(() => {\n        pullCurrentState()\n    }, []);\n\n\n    // following the api: https://docs.google.com/document/d/1kj0ZTwFx2-vmUYogW6Iz7d4DzQ-U1r8DmiQV1qWTPTA/edit\n    const updateStatus = () => {\n        const payload = {\"authenticationFactors\": {\"otp\": {\"required\": false}}};\n        if (checkState.checked) {\n            payload.authenticationFactors.otp.required = true;\n        } else {\n            payload.authenticationFactors.otp.required = false;\n        }\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            fetch(statusURL, {\n                method: 'POST',\n                referrerPolicy: 'no-referrer',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                },\n                body: JSON.stringify(payload)\n            }).then(response => response.json())\n                .then(data => {\n\n                    if (data.error) {\n                        console.error(data.error);\n                        failureAlert(data.error);\n                    }\n\n                    updateCheckState({\n                        checked: data.authenticationFactors.otp.required,\n                        changed: false\n                    });\n\n                    successAlert();\n                });\n        });\n    }\n\n    return <PageSection>\n        <Form>\n            <div>\n                <Title headingLevel=\"h2\" size=\"xl\">Organizational two-factor authentication</Title>\n\n                <Text className=\"primaryTextBox pf-u-mt-md\">\n                    Enable organizational two-factor authentication to require all users to use a password and a\n                    one-time code to log in. When enabled, each user in your organization must install an authenticator application on\n                    a compatible mobile device in order to log in.\n                    <Button variant=\"link\" href={docLink} target=\"_blank\" component=\"a\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs\">\n                        Learn more about two-factor authentication\n                    </Button>\n                </Text>\n\n                <FormGroup className=\"pf-u-mt-md\">\n                    <Checkbox onChange={toggleCheckBox} label=\"Enable two-factor authentication for your organization\" id=\"confirmed\" className=\"twofaCheck\" isChecked={checkState.checked}></Checkbox>\n\n                    <Popover\n                        aria-label=\"Advanced popover usages example\"\n                        position={\"right\"}\n                        hideOnOutsideClick={true}\n                        enableFlip={true}\n                        appendTo={() => document.body}\n                        maxWidth={\"18rem\"}\n                        minWidth={\"2rem\"}\n                        bodyContent={\n                            <div>\n                                Users will be required to set up two-factor authentication the next time they attempt to log in.\n                            </div>\n                        }\n                        children={<Button id=\"infoIcon\" variant=\"link\" component=\"span\" isInline className=\"questionIcon pf-u-ml-xs\" icon={<QuestionIcon/>}></Button>}\n                        className=\"pf-u-text-align-center\"\n                    ></Popover>\n                </FormGroup>\n\n                <ActionGroup className=\"pf-u-mt-3xl\">\n                    <Button onClick={updateStatus} isDisabled={loadingState.loading || !checkState.changed}>Save</Button>\n                    <Button onClick={pullCurrentState} variant=\"link\" isInline className=\"pf-u-ml-lg\">Cancel</Button>\n                </ActionGroup>\n            </div>\n        </Form>\n    </PageSection>\n\n}\n\n\nTwoFactorCheck.propTypes = {\n    tokenData: PropTypes.string\n}\n\n\nexport default TwoFactorCheck;\n","import './non-admin-user.scss'\nimport React from 'react';\nimport {\n  Title,\n  Text,\n  Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminUser = () => {\n\n  const triggerRedirect = () => {\n    window.location.href = \"/iam/my-user-access\";\n  }\n\n  return <div className=\"nonAdminDiv\">\n    <LockIcon className=\"lockIcon\" />\n    <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">You do not have access to Authentication Factors</Title>\n    <Text className=\"pf-u-mt-lg\">Contact your organization administrator(s) for more information, or visit My User Access to learn more about your permissions.</Text>\n    <Button variant=\"link\" onClick={triggerRedirect} className=\"pf-u-mt-lg\">Go to landing page</Button>\n  </div>\n}\n\nexport default NonAdminUser;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Divider\n} from '@patternfly/react-core'\nimport {useFlag} from '@unleash/proxy-client-react';\nimport TwoFactorCheck from '../../Components/twoFactorCheck/two-factor-check';\nimport DisabledPage from \"../../Components/disabledPage/disabled-page\";\nimport NonAdminUser from '../../Components/nonAdminUser/non-admin-user';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\n\n\nimport './Authentication-Factors.scss';\nimport {isAdminUser} from '../../Components/utils/general-utils';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nconst AuthFactors = () => {\n  const chrome = useChrome();\n  let userToken = null;\n  const [currentUser, updateUser] = useState({\n    adminUser: false,\n    twofadisplay: <NonAdminUser/>\n  })\n  const is2FAEnabled = useFlag('iamconsole.authfactors.enabled');\n\n\n  useEffect(() => {\n    // eslint-disable-next-line no-undef\n    chrome?.appAction?.('authentication-factors');\n    // eslint-disable-next-line no-undef\n    chrome.auth.getToken().then(token => {\n      userToken = token;\n      // if the user is in fact and admin user then render TwoFactorCheck\n      if (isAdminUser(userToken!) && is2FAEnabled) {\n        updateUser({\n          adminUser: true,\n          twofadisplay: <TwoFactorCheck tokenData={userToken!}/>\n        })\n      }\n\n      // check to see if 2fa feature flag is set. if not then render the proper error page\n      if (!is2FAEnabled) {\n        updateUser({\n          adminUser: false,\n          twofadisplay: <DisabledPage/>\n        })\n      }\n\n    })\n  }, []);\n\n\n  return (\n      <React.Fragment>\n\n        {currentUser.adminUser === true &&\n            <div>\n              <PageHeader>\n                <PageHeaderTitle title=\"Authentication Factors\" className=\"pf-u-mb-lg\" />\n                <p> Manage authentication factors for your organization. </p>\n              </PageHeader>\n              <Divider/>\n            </div>\n        }\n\n        {currentUser.twofadisplay}\n\n\n      </React.Fragment>\n  );\n};\n\nexport default AuthFactors;\n"],"names":["className","headingLevel","size","isAdminUser","token","base64","split","replace","jsonPayload","JSON","parse","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","is_org_admin","setStateValue","value","key","stateObject","updateFunction","updatedValue","processAllInputs","choices","validations","setValidations","failureTriggered","update","Object","keys","forEach","validationKey","submittedValue","submittedType","inputType","verificationObject","input","type","required","status","message","verified","results","test","verifyInput","name","height","width","svgPath","yOffset","xOffset","docLink","statusURL","TwoFactorCheck","tokenData","chrome","useChrome","getEnvironment","dispatch","checkState","updateCheckState","useState","checked","changed","loadingState","updateLoadingState","loading","failureAlert","er","variant","description","title","pullCurrentState","fetch","method","referrerPolicy","headers","then","response","json","data","error","console","authenticationFactors","otp","useEffect","PageSection","Form","Title","Text","Button","href","target","component","isInline","icon","iconPosition","FormGroup","Checkbox","onChange","label","id","isChecked","Popover","position","hideOnOutsideClick","enableFlip","appendTo","document","body","maxWidth","minWidth","bodyContent","children","ActionGroup","onClick","payload","auth","getToken","stringify","isDisabled","propTypes","location","userToken","currentUser","updateUser","adminUser","twofadisplay","is2FAEnabled","useFlag","appAction","PageHeader","PageHeaderTitle","Divider"],"sourceRoot":""}