{"version":3,"file":"js/Identity-Provider-Integration.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/DisabledPage/disabled-page.js","webpack:///./src/Apps/IdpSelfService/FirstStep/customer-information.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/oidc-configuration.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/saml-configuration.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-url.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-url.tsx","webpack:///./src/Apps/IdpSelfService/FinalStep/urls-for-user.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-oidc-idp.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-saml-idp.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-idp.tsx","webpack:///./src/Apps/IdpSelfService/IdpNotSetup/idp-not-setup.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/generic-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/submit-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/flow-template.tsx","webpack:///./src/Components/NonAdminUser/non-admin-idp.tsx","webpack:///./src/Routes/AuthenticationPolicy/identity-provider-integration.tsx","webpack:///./src/Utils/general-utils.ts"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Title,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport {processAllInputs} from '../../../Utils/general-utils';\nimport PropTypes from 'prop-types';\n\ninterface Props {\n    resetNextClicked: Function;\n    rootUserChoices: any;\n    rootValidation: any;\n    updateStatus: Function;\n}\n\n/**\n * handle input selection needs to update information being used to govern the application flow as well as the final api update object\n * (if needed this method could be shared between components and moved to general-utils.ts)\n */\nexport const handleInputSelection = (value: any, rootUserChoices: any, validations: any, setValidations: any, rootValidation: any, updateStatus: any, resetNextClicked: any) => {\n\n    /*\n     * regardless of current state. if the user alters the input clear existing flags. \\\n     * This should also reset the currently displayed errors\n     */\n    resetNextClicked(false);\n\n    if (!rootUserChoices.current) {\n        rootUserChoices.current = {};\n    }\n\n    if (!rootUserChoices.current.selections) {\n        rootUserChoices.current.selections = {};\n    }\n\n    //  update the main data storage object with the new value\n    rootUserChoices.current.selections[value.target.id] = value.target.value;\n\n    /*\n     * update the validation settings. It is expected that the id's used in the validation object matches\n     * the id's used on the elements.\n     */\n    // @ts-ignore\n    const failureTriggered = processAllInputs(rootUserChoices.current.selections, validations, setValidations);\n    const failureStore = 'CUST_INFO'\n\n    if (!rootValidation.current) {\n        rootValidation.current = {};\n    }\n\n    rootValidation.current[failureStore] = !failureTriggered;\n\n    if (!failureTriggered && rootUserChoices.current.selections.protocol) {\n        updateStatus(rootUserChoices.current.selections.protocol);\n    }\n};\n\nconst CustomerInformation = ({resetNextClicked, rootUserChoices, rootValidation, updateStatus} : Props) => {\n    const [validations, setValidations] = useState({\n        'protocol': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n    const handleChange = (value: any) => {\n        handleInputSelection(value, rootUserChoices, validations, setValidations, rootValidation, updateStatus, resetNextClicked);\n    };\n\n    // pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n\n                {/* TODO had to remove validated prop. PF5 suggests moving that logic to the text input's helperText, FormHelperText, or HelperTextItem */}\n\n                <FormGroup\n                    onChange={(value) => { handleChange(value) } }\n                    role=\"radiogroup\"\n                    fieldId=\"authType\"\n                    label=\"Choose identity provider protocol\"\n                    id=\"protocol\">\n                    <Radio name=\"authType\" id=\"protocol\" label=\"OpenID Connect\" value=\"OIDC_CONFIG\"/>\n                    <Radio name=\"authType\" id=\"protocol\" label=\"Saml 2.0\" value=\"SAML_CONFIG\"/>\n                </FormGroup>\n            </Form>\n}\n\nCustomerInformation.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func,\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport {processAllInputs, setStateValue} from '../../../Utils/general-utils';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {InputValidation} from '../CommonInterfaces/input-validation'\nimport {ValidationTemplate} from \"../CommonInterfaces/oidc-validation\";\n\ninterface Props{\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst OidcConfiguration = ({updateStatus, resetNextClicked, rootValidation, rootUserChoices}: Props) => {\n\n    const [selections, setSelections] = useState<Object>();\n    const [validations, setValidations] = useState<ValidationTemplate>({\n        'clientId': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'clientSecret': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'inputMethod': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: any) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(rootUserChoices.current.selections, validations, setValidations);\n\n        rootValidation.current.OIDC_CONFIG = !failureTriggered;\n\n        if (!failureTriggered && rootUserChoices.current.selections.inputMethod) {\n            updateStatus(rootUserChoices.current.selections.inputMethod);\n        }\n\n    }\n\n    // @ts-ignore\n    return <Form>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n                <FormGroup\n                    label=\"Client ID/SP entity ID\"\n                    onChange={(value) => { handleSelection(value) }}\n                >\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientId\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientId\"\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            The Red Hat client identifier registered within the customer identity provider. Your indentity provider generates this client ID when a Red Hat client is added\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Client Secret\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientSecret\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientSecret\"\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            Enter the client secret associated with your client identifier  by your identity provider\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file or download it from a url\"\n                >\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORT_FROM_URL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_FROM_FILE\"/>\n                </FormGroup>\n\n                \n            </Form>\n\n}\n\nOidcConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default OidcConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Radio,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\n\nimport React, {useState} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport {setStateValue, processAllInputs} from '../../../Utils/general-utils';\nimport PropTypes from \"prop-types\";\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport { ValidationTemplate} from \"../CommonInterfaces/oidc-validation\";\n\ninterface Props{\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst SamlConfiguration = ({updateStatus, resetNextClicked, rootValidation, rootUserChoices}: Props) => {\n\n\n    const [validations, setValidations] = useState<ValidationTemplate>({\n        'inputMethod': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n    const handleSelection = (value: any) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(rootUserChoices.current.selections, validations, setValidations);\n\n        rootValidation.current.SAML_CONFIG = !failureTriggered;\n\n        if (!failureTriggered && rootUserChoices.current.selections.inputMethod) {\n            updateStatus(rootUserChoices.current.selections.inputMethod);\n        }\n    }\n\n    return <Form>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file or download it from a url\"\n                    isRequired\n                >\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORT_SAML_FROM_URL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_SAML_FROM_FILE\"/>\n                </FormGroup>\n            </Form>\n\n}\n\nSamlConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup,\n    Title,\n    Text,\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\nimport PropTypes from \"prop-types\";\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props {\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportFromFile = ({updateStatus, rootValidation, rootUserChoices}: Props) => {\n\n    const [fileData, setFileData] = useState(\"\");\n\n\n    /**\n     *\n     */\n    const handleFileData = (_event: any, data:string) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(err);\n            }\n            else if (result) {\n                updateStatus(\"FINAL_STEP\");\n                rootUserChoices.current.selections.configFileData = result;\n\n                /*\n                 * may need to submit a query at this point to the api to validate that the file chosen is good to go\n                 * alternatively a validation step could be added locally to check for the existence of required fields\n                 */\n                rootValidation.current.IMPORT_FROM_FILE = true;\n            }\n        })\n    }\n\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload\n                        value={fileData.toString()}\n                        id=\"text-file-with-edits-allowed\"\n                        type=\"text\"\n                        onDataChange={handleFileData}\n                        browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">An XML formatted file detailing the configuration of your IDP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n            </Form>\n\n}\n\nImportFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport {processAllInputs} from '../../../Utils/general-utils';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\n\ninterface Props{\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportFromUrl = ({updateStatus, resetNextClicked, rootValidation, rootUserChoices}: Props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(rootUserChoices.current.selections, validations, setValidations);\n\n        rootValidation.current.IMPORT_FROM_URL = !failureTriggered;\n\n        if (!failureTriggered) {\n            updateStatus(\"FINAL_STEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value)=>{handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportFromUrl.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromUrl;\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup, Title, Text\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from \"xml2js\";\nimport PropTypes from 'prop-types';\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props{\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportSamlFromFile = ({updateStatus, rootValidation, rootUserChoices}: Props) => {\n\n\n    const [fileData, setFileData] = useState(\"\");\n\n    /**\n     *\n     */\n    const handleFileData = (_event: any, data:string) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(\"failed to parse xml file: \" + err);\n            }\n            else if (result) {\n                updateStatus(\"FINAL_STEP\");\n                rootUserChoices.current.selections.configFileData = result;\n\n                rootValidation.current.IMPORT_SAML_FROM_FILE = true;\n            }\n        })\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    filenamePlaceholder=\"Drag and drop a file or upload one\"\n                    onDataChange={handleFileData}\n                    browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">A XML formatted file detailing the configuration of your IDP</Text>\n            </Form> \n\n}\n\nImportSamlFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromFile;\n","// step three, choice 6 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport {processAllInputs} from '../../../Utils/general-utils';\nimport PropTypes from \"prop-types\";\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props{\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootValidation: React.MutableRefObject<InputValidation>;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportSamlFromUrl = ({updateStatus, resetNextClicked, rootValidation, rootUserChoices}: Props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage objec(value) => { handleSelection(value) }t with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(rootUserChoices.current.selections, validations, setValidations);\n\n        rootValidation.current.IMPORT_SAML_FROM_URL = !failureTriggered;\n\n        if (!failureTriggered) {\n            updateStatus(\"FINAL_STEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    <TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value) => { handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportSamlFromUrl.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromUrl;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Form,\n    FormGroup,\n    Title,\n    Text,\n    ClipboardCopy\n} from '@patternfly/react-core';\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {getRedirectURL} from \"@utils/general-utils\";\n\n\ninterface Props{\n    redirectDomain: string | undefined;\n}\n\nconst ImportSamlFromURL = ({ redirectDomain } : Props) => {\n\n\n    return <Form>\n                <Title headingLevel=\"h2\">Configure URLs</Title>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">Some Identity Provider Services require additional\n                    configuration when enabling third party single sign on. Please review the following information and\n                    verify that these are filled in where required in your company IDP.</Text>\n                <FormGroup label=\"Identifier (Entity ID)\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Sign on URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external/protocol/saml\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Redirect URL or ACS (Assertion Consumption Service) URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        {redirectDomain}\n                    </ClipboardCopy>\n                </FormGroup>\n\n            </Form>\n\n}\n\nImportSamlFromURL.propTypes = {\n    updateStatus: PropTypes.func,\n    redirectDomain: PropTypes.string\n}\n\nexport default ImportSamlFromURL;\n","import React from 'react';\nimport './configured-oidc-idp.scss'\nimport { oidcResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Popover,\n    Text,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\n\ninterface Props {\n    oidcData: oidcResponseData\n}\n\nconst ConfiguredOidcIdp = ({ oidcData }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    return (\n        <Form>\n            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                <p>Forthcoming enhancements will provide the ability to edit.</p>\n            </Alert>\n\n            <Title headingLevel={\"h1\"}>{oidcData.displayName}</Title>\n\n            <FormGroup\n                label=\"Issuer\"\n                fieldId=\"oidc-issuer\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The issuer is used to validate tokens generated by the identity provider and allows\n                                additional security for your organization. This value is optional but recommended.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-issuer\" name=\"oidc-issuer\" value={oidcData.issuerUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client ID\"\n                fieldId=\"oidc-client-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client ID registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-id\" name=\"oidc-client-id\" value={oidcData.clientId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>Spaces and special characters are allowed here.</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client Secret\"\n                fieldId=\"oidc-client-secret\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client secret registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-secret\" name=\"oidc-client-secret\" value={oidcData.clientSecret} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Authorization URL\"\n                fieldId=\"oidc-authorization-url-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL that performs authentication of the end-user.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-token-url-id\" name=\"oidc-token-url-id\" value={oidcData.authorizationUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Token URL\"\n                fieldId=\"authorization-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL where an authorization code can be exchanged for an access token and ID token.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"authorization-url\" name=\"authorization-url\" value={oidcData.tokenUrl} />\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate sso.redhat.com with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"metadata-url\"\n                    name=\"metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}.well-known/openid-configuration`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${oidcData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <ActionList>\n                <Popover\n                    triggerAction=\"hover\"\n                    aria-label=\"Hoverable popover\"\n                    headerContent={<div>Read-Only</div>}\n                    bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                        enhancements will provide the ability to edit.</div>}\n                    footerContent=\"\">\n                    <ActionListItem>\n                        <Button isDisabled>\n                            Save\n                        </Button>\n                    </ActionListItem>\n                </Popover>\n                <ActionListItem>\n                    <Button isDisabled variant=\"link\">\n                        Cancel\n                    </Button>\n                </ActionListItem>\n            </ActionList>\n        </Form>\n    )\n}\n\nexport default ConfiguredOidcIdp;\n","import React from 'react';\nimport './configured-saml-idp.scss'\nimport { samlResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Popover,\n    Text,\n    TextArea,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\n\ninterface Props {\n    samlData: samlResponseData\n}\n\nconst ConfiguredSamlIdp = ({ samlData }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    return (\n        <Form>\n            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                <p>Forthcoming enhancements will provide the ability to edit.</p>\n            </Alert>\n\n            <Title headingLevel={\"h1\"}>{samlData.displayName}</Title>\n\n            <FormGroup\n                label=\"Identity provider entityID\"\n                fieldId=\"saml-entity-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The entityID used to validate the Issuer for received SAML assertions.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"saml-entity-id\" name=\"saml-entity-id\" value={samlData.identityProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>The entityID attribute is in your SAML metadata configuration</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Single sign-on authentication request URL\"\n                fieldId=\"saml-authn-request-url\">\n                <TextInput isDisabled type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.authenticationRequestsUrl} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>The URL that sends SAML authentication requests</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"x509 certificate\"\n                fieldId=\"saml-x509-certificate\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                A PEM certificate that is used to check for signatures.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextArea resizeOrientation=\"vertical\" isDisabled type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.x509Certificate} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>\n                            A Base64 encoded certificate must not include the certificate preamble/ending:\n                            <code>(-----BEGIN/END CERTIFICATE-----)</code>\n                        </HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"service-provider-metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate sso.redhat.com with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"service-provider-metadata-url\"\n                    name=\"service-provider-metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint/descriptor`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <ActionList>\n                <Popover\n                    triggerAction=\"hover\"\n                    aria-label=\"Hoverable popover\"\n                    headerContent={<div>Read-Only</div>}\n                    bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                        enhancements will provide the ability to edit.</div>}\n                    footerContent=\"\">\n                    <ActionListItem>\n                        <Button isDisabled>\n                            Save\n                        </Button>\n                    </ActionListItem>\n                </Popover>\n                <ActionListItem>\n                    <Button isDisabled variant=\"link\">\n                        Cancel\n                    </Button>\n                </ActionListItem>\n            </ActionList>\n\n        </Form>\n    )\n}\n\nexport default ConfiguredSamlIdp;\n","import './configured-idp.scss';\nimport ConfiguredOidcIdp from './configured-oidc-idp';\nimport ConfiguredSamlIdp from './configured-saml-idp';\nimport React, {useState, useEffect, ReactElement} from 'react';\nimport {\n    Card,\n    CardBody,\n    Spinner\n} from '@patternfly/react-core';\n\nimport {idpResponseData, oidcResponseData, samlResponseData} from \"../CommonInterfaces/idp-response-types\";\n\ninterface Props {responseData: idpResponseData}\n\nconst ConfiguredIdp = ({responseData}: Props) => {\n\n    // flag to control which values get displayed\n\n    const [providerType, setProviderType] = useState<ReactElement>(\n       <Spinner/>\n    )\n\n    useEffect(() => {\n        if (responseData.providerId === 'saml-improved') {\n            setProviderType(<ConfiguredSamlIdp samlData={responseData as samlResponseData}/>);\n        }\n        else if (responseData.providerId === 'oidc-improved') {\n            setProviderType(<ConfiguredOidcIdp oidcData={responseData as oidcResponseData}/>);\n        }\n    }, [responseData]);\n\n    return (\n        <React.Fragment>\n            <Card isCompact={false} isLarge={true}>\n                <CardBody>\n                    {providerType}\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default ConfiguredIdp;\n","import './idp-not-setup.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from \"prop-types\";\n\ninterface Props{\n    setupIDP: any,\n    wizardEnabled: boolean\n}\n\nconst IdpNotSetup = ({setupIDP, wizardEnabled}: Props) => {\n\n    return <div className=\"notSetupDiv\">\n                <CubesIcon className=\"cubesIcon\"/>\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">No Identity Providers are currently configured</Title>\n                <Text className=\"pf-v5-u-mt-md\">Your organization has not integrated an identity provider. More information is available <Button variant=\"link\" target=\"_blank\" href=\"https://access.redhat.com/announcements/7039300\" component=\"a\" isInline>here</Button></Text>\n                <Button className={wizardEnabled ? \"pf-v5-u-mt-lg\" : \"hideFeature\"} variant=\"primary\" onClick={setupIDP}>Set up an identity provider</Button>\n            </div>\n}\n\nIdpNotSetup.propTypes = {\n    setupIDP: PropTypes.func\n}\n\nexport default IdpNotSetup;\n","import React from 'react';\nimport { WizardFooterWrapper, useWizardContext} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\n\ninterface Props {\n    valid: boolean;\n    next: Function;\n    previous: Function;\n}\n\nconst GenericFooter = ({valid, next, previous}: Props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (valid) {\n            goToNextStep();\n        }\n        else {\n            next(true);\n        }\n    }\n\n    /**\n     * on back click we need to be able to trigger the wizard context's default back functionality but we also need to\n     * handle the current state stored in the flowTemplate.\n     */\n    const handleBackClick = () => {\n        // handles wizard default functionality\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        previous();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} disabled={valid}>Next</Button>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default GenericFooter;\n","import React, {MutableRefObject} from 'react';\nimport { WizardFooterWrapper /* data-codemods */, useWizardContext /* data-codemods */\n} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\nimport {getSSOApiUrl} from \"../../../Utils/general-utils\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {SubmittableChoices, UserChoices} from \"@apps/IdpSelfService/CommonInterfaces/user-choices\";\n\nimport PropTypes from \"prop-types\";\n\ninterface Props{\n    userChoiceData: MutableRefObject<UserChoices>;\n    previous: Function;\n    accessToken: string;\n}\n\nconst SubmitFooter = ({userChoiceData, previous, accessToken}: Props) => {\n    const { goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n\n\n    /**\n     * convert the choice data to use the key's required by the api.\n     */\n    const filterChoiceData = (): SubmittableChoices => {\n\n        const provider = userChoiceData.current.selections.protocol === \"OIDC_CONFIG\" ? \"oidc-improved\" : \"saml-improved\"\n        const idpEID = \"https://sso.redhat.com/auth/realms/redhat-external\";\n        const reqURL = \"https://sso.redhat.com/auth/realms/redhat-external/broker/rhtest/endpoint\";\n        const cert = \"dafad\";\n\n        return {\n            providerId: provider,\n            identityProviderEntityId: idpEID,\n            authenticationRequestsUrl: reqURL,\n            x509Certificate: cert\n        }\n    }\n\n\n    const apiUrl = getSSOApiUrl(useChrome(), 'apis/organizations/v1/identity-providers')\n    const createIDPCall = () => {\n        fetch(apiUrl, {\n            method: 'POST',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken\n            },\n            body: JSON.stringify(filterChoiceData())\n        })\n            .then(response => response.json())\n            .then(() => {\n                setIsLoading(false)\n                window.location.reload();\n            })\n            .catch(error => {\n                // this should be exchanged for an error message somewhere.\n                console.error('Error: ', error);\n                setIsLoading(false);\n            })\n    }\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        const stringifySpace = 2;\n        console.log(\"Submitting with this data: \" + JSON.stringify(userChoiceData, null, stringifySpace));\n\n        // trigger the spinner.\n        setIsLoading(true);\n        // fire the call to SSO.\n        createIDPCall();\n    }\n\n    const handleBackClick = () => {\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        previous();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} isLoading={isLoading} >Next</Button>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\n\nSubmitFooter.propTypes = {\n    userChoiceData: PropTypes.object,\n}\n\nexport default SubmitFooter;\n","import './flow-template.scss'\nimport React, {useState, useRef, useEffect} from 'react';\nimport { Wizard, WizardStep } from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { idpResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport { UserChoices } from '../CommonInterfaces/user-choices'\nimport { InputValidation } from '../CommonInterfaces/input-validation'\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport CustomerInformation from '../FirstStep/customer-information';\nimport OIDCConfig from '../SecondStep/oidc-configuration';\nimport SAMLConfig from '../SecondStep/saml-configuration';\nimport ImportFromFile from '../ThirdStep/import-from-file';\nimport ImportFromUrl from '../ThirdStep/import-from-url';\nimport ImportSamlFromFile from '../ThirdStep/import-saml-from-file';\nimport ImportSamlFromUrl from '../ThirdStep/import-saml-from-url';\nimport URLsForUser from '../FinalStep/urls-for-user';\nimport ConfiguredIdp from '../Configured/configured-idp';\nimport IdpNotSetup from \"../IdpNotSetup/idp-not-setup\";\nimport GenericFooter from './generic-footer';\nimport SubmitFooter from './submit-footer';\nimport PropTypes from \"prop-types\";\nimport {getRedirectURL, getSSOApiUrl} from \"../../../Utils/general-utils\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { PageSection, Text, TextContent, TextVariants, Spinner} from \"@patternfly/react-core\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\n\ninterface Props {\n    accessToken: string\n}\n\n// eslint-disable-next-line max-statements\nconst FlowTemplate = ({ accessToken }: Props) => {\n\n    /**\n     * TODO\n     *  1) Update environment URLs so that they are dynamic (mirror what 2fa app is doing? do it different?)\n     *      See useChrome() method (what does this output?) - Zach's pref to look into\n     *  2) Review existing mechanisms (are there vars we can rename / delete? etc)\n     *      Is FlowTemplate.propTypes the only/best way to provide access to component vars?\n     *  3) Unit tests / tsx file testing\n     *  4) Disabled / not setup page/case handling\n     *  5) How will validation rules work? Does the FE mirror the rules on the BE or just show messages if validation errors occur? Maybe FE can create an error page that displays such errors in a nice, non-error seeming way\n     */\n        // intended to serve as the main aggregate of data that gets sent to the server\n    const userChoices = useRef<UserChoices>({selections: {}});\n\n    // Is the admin's account been configured with an idp. If so display the management screen.\n    // eslint-disable-next-line no-unused-vars\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInit, setIsInit] = useState(true);\n    const apiUrl = getSSOApiUrl(useChrome(), 'apis/organizations/v1/identity-providers');\n    const [idpData, setIdpData] = useState({idpAlias: '', providerId: '', displayName: '', enabled: ''});\n    const isWizardFlowEnabled = useFlag('iamconsole.IDPIntegration.wizardFlowEnabled')\n    const chromeAPI = useChrome();\n\n    useEffect(() => {\n\n        fetch(apiUrl, {\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken\n            }\n        })\n            .then(response => response.json())\n            .then((data: idpResponseData) => {\n                if (data.providerId === 'oidc-improved' || data.providerId === 'saml-improved') {\n                    setIdpData(data);\n                    setIsLoading(false);\n                    setIsConfigured(true);\n                }\n                else if (data.error) {\n                    setIsLoading(false);\n                    setIsConfigured(false);\n                }\n                // TODO: Parse the data and cast it to either SAML or OIDC Response Data\n            })\n            .catch(error => {\n                console.error('Error: ', error);\n                setIsLoading(false);\n            })\n    }, [])\n\n    // handle the present validation state of the various steps.\n    const fieldsValidated = useRef<InputValidation>({\n        CUST_INFO: false,\n        OIDC_CONFIG: false,\n        SAML_CONFIG: false,\n        IMPORT_FROM_FILE: false,\n        IMPORT_FROM_URL: false,\n        IMPORT_SAML_FROM_FILE: false,\n        IMPORT_SAML_FROM_URL: false\n    })\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available. \n     */\n    const [flowState, setFlowState] = useState({\n        currentState: \"CUSTOMERINFORMATION\",\n        previousState: \"\"\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n    const closeWizard = () => {\n        console.log(\"close fancy window\");\n    }\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideCustomerInformation: false,\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideFinish: true,\n    })\n\n    /*\n     * used to communicated between the footer and currently displayed window.\n     * this is currently unused, but I suggest leaving this here until we have come up with a fix for displaying the\n     * error state\n     */\n    // eslint-disable-next-line no-unused-vars\n    const [nextTriggered, setNextTriggered] = useState(false);\n\n    const triggerNextStep = (nextStep :string) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch (nextStep) {\n            case \"OIDC_CONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMER_INFORMATION\",\n                });\n                break;\n            case \"SAML_CONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMER_INFORMATION\",\n                });\n                break;\n            case \"IMPORT_FROM_FILE\":\n\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"OIDC_CONFIG\",\n                });\n                break;\n            case \"IMPORT_FROM_URL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"OIDC_CONFIG\",\n                });\n                break;\n            case \"IMPORT_SAML_FROM_FILE\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAML_CONFIG\",\n                });\n                break;\n            case \"IMPORT_SAML_FROM_URL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAML_CONFIG\",\n                });\n                break;\n            case \"FINAL_STEP\":\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                });\n                break;\n            default:\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                });\n\n        }\n\n    }\n\n    /**\n     *\n     * @param validChoices an array of strings representing the values that will remain in the selection list.\n     */\n    const pruneChoices = (validChoices : string[]) => {\n        const choicesKeys = Object.keys(userChoices.current.selections);\n        for (let i = 0; i < choicesKeys.length; i++) {\n            if (!validChoices.includes(choicesKeys[i])) {\n                // @ts-ignore\n                delete userChoices.current.selections[choicesKeys[i]];\n            }\n        }\n    }\n\n    const triggerBackStep = (prevStep :string) => {\n        switch (prevStep) {\n            case \"OIDC_CONFIG\":\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"CUSTOMER_INFORMATION\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                })\n                break;\n            case \"SAML_CONFIG\":\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"CUSTOMER_INFORMATION\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                })\n                break;\n            case \"IMPORT_FROM_FILE\":\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"OIDC_CONFIG\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideFinish: true,\n                })\n                break;\n            case \"IMPORT_FROM_URL\":\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"OIDC_CONFIG\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                })\n                break;\n            case \"IMPORT_SAML_FROM_URL\":\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"SAML_CONFIG\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                })\n                break;\n            case \"IMPORT_SAML_FROM_FILE\":\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: \"SAML_CONFIG\",\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideFinish: true,\n                })\n                break;\n            default:\n                pruneChoices([\"\"]);\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideFinish: true,\n                })\n        }\n    }\n\n    const setBackTriggered = () => {\n        triggerBackStep(flowState.previousState)\n    }\n\n    return (\n\n        <div className=\"flowPage\">\n            <PageHeader className=\"wizardHeader\">\n                <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-v5-u-mb-lg\"/>\n                <TextContent>\n                    Manage identity provider integration for your organization.{' '}\n                    <Text component={TextVariants.a}>\n                        {/* TODO: add the correct URL below\n                         <Button variant=\"link\" href={\"https://www.redhat.com\"} target=\"_blank\" component=\"a\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\"right\" className=\"pf-v5-u-ml-xs\">\n                            Learn more about identity provider integration\n                        </Button>\n                         */}\n                    </Text>\n                </TextContent>\n            </PageHeader>\n            <PageSection>\n                <div className={isLoading ? 'loadingIcon' : 'hiddenPage'}>\n                    <Spinner/>\n                </div>\n                <div className={!isLoading && isConfigured ? '' : 'hiddenPage'}>\n                    <ConfiguredIdp responseData={idpData}/>\n                </div>\n                <div className={(!isLoading && !isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                    <IdpNotSetup setupIDP={() => {\n                        setIsInit(false)\n                    }} wizardEnabled={isWizardFlowEnabled}/>\n                </div>\n                <div className={(!isConfigured && !isInit) ? '' : 'hiddenPage'}>\n                    <Wizard\n                        onClose={closeWizard}\n                        isProgressive\n                    >\n\n\n                        {/* Standard customer config. Every flow requires this */}\n                        <WizardStep\n                            id={'CUSTOMERINFORMATION'}\n                            name={'Customer Information'}\n                            isHidden={displayed.hideCustomerInformation}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.CUST_INFO}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n                                />\n                            }\n                        >\n\n                            <CustomerInformation\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n                        </WizardStep>\n\n\n                        {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                        <WizardStep\n                            id={'OIDCCONFIG'}\n                            name={'OIDC Configuration'}\n                            isHidden={displayed.hideOIDC}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.OIDC_CONFIG}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n                                />\n                            }>\n                            <OIDCConfig\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMFILE'}\n                            name={'Import config from file'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORT_FROM_FILE}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n\n                                />\n                            }>\n                            <ImportFromFile\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMURL'}\n                            name={'Import config from URL'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORT_FROM_URL}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n\n                                />\n                            }>\n                            <ImportFromUrl\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n                        </WizardStep>\n\n                        {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                        <WizardStep\n                            id={'SAMLCONFIG'}\n                            name={'Saml Configuration'}\n                            isHidden={displayed.hideSAML}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.SAML_CONFIG}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n                                />\n                            }>\n\n                            <SAMLConfig\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            name={'Import SAML from file'}\n                            id={'IMPORTSAMLFROMFILE'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORT_FROM_FILE}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n\n                                />\n                            }>\n\n                            <ImportSamlFromFile\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTSAMLFROMURL'}\n                            name={'Import SAML from URL'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORT_SAML_FROM_URL}\n                                    next={setNextTriggered}\n                                    previous={setBackTriggered}\n                                />\n                            }>\n\n                            <ImportSamlFromUrl\n                                updateStatus={triggerNextStep}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation={fieldsValidated}\n                                rootUserChoices={userChoices}\n                            />\n\n                        </WizardStep>\n\n                        {/* Final steps of the process. again any selection will show the following two steps.*/}\n                        <WizardStep\n                            id={'FINALSTEP'}\n                            name={'Final Steps'}\n                            isHidden={displayed.hideFinish}\n                            footer={\n                                <SubmitFooter\n                                    userChoiceData={userChoices}\n                                    previous={setBackTriggered}\n                                    accessToken={accessToken}\n                                />\n                            }>\n                            <URLsForUser redirectDomain={getRedirectURL(chromeAPI, accessToken)}/>\n                        </WizardStep>\n                    </Wizard>\n\n                </div>\n            </PageSection>\n        </div>\n    );\n}\n\n\nFlowTemplate.propTypes = {\n    accessToken: PropTypes.string\n}\n\nexport default FlowTemplate;\n","import './non-admin-user.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminIDP = () => {\n\n    const triggerRedirect = () => {\n        window.location.href = \"/iam/my-user-access\";\n    }\n    const myUserAccessLink= \"/iam/my-user-access\";\n\n    return <div className=\"nonAdminDiv\">\n                <LockIcon className=\"lockIcon\" />\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">Access permissions needed</Title>\n                <Text className=\"pf-v5-u-mt-lg\">\n                    To access Identity Provider Integration, ask your organization administrator(s) to adjust your permissions,\n                    or visit <Button variant=\"link\" href={myUserAccessLink} target={\"_blank\"} component=\"a\" isInline>My User Access</Button> to learn more about your permissions\n                </Text>\n                <Button onClick={triggerRedirect} className=\"pf-v5-u-mt-lg\">Return to home page</Button>\n            </div>\n}\n\nexport default NonAdminIDP;\n","import './identity-provider-integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport FlowTemplate from '../../Apps/IdpSelfService/IdpFlowTemplate/flow-template'\nimport DisabledPage from \"../../Components/DisabledPage/disabled-page\";\nimport {isAdminUser} from '../../Utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\nimport NonAdminIDP from \"../../Components/NonAdminUser/non-admin-idp\";\n\n\nconst IdentityProviderIntegration = () => {\n    const chrome = useChrome();\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: false,\n        selfServiceIDP: <DisabledPage/>\n    })\n    const isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        // eslint-disable-next-line no-undef\n        chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            userToken = token;\n            if (!isAdminUser(userToken!)) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <NonAdminIDP/>\n                })\n                return;\n            }\n            // if the user is in fact and admin user then render TwoFactorCheckOld\n            if (isAdminUser(userToken!) && isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <FlowTemplate accessToken={userToken!} />\n                })\n            }\n        })\n    }, []);\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n\n}\n\nexport default IdentityProviderIntegration\n","import {\n    ValidationTemplate\n} from \"../Apps/IdpSelfService/CommonInterfaces/oidc-validation\";\n\nfunction parseToken (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload;\n}\n\nexport function isAdminUser (token :string) {\n    return parseToken(token).is_org_admin;\n}\n\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult {\n    if (required && !input) {\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified:VerificationResult;\n    let results :boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\ninterface Selections{\n    [key:string]: string;\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (choices :Selections, validations :ValidationTemplate, setValidations :Function) {\n    let failureTriggered = false;\n    const update:Selections = {};\n    Object.keys(validations).forEach(validationKey => {\n        const submittedValue = choices && choices[validationKey];\n        // @ts-ignorer\n        const submittedType = validations[validationKey].inputType\n\n        const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n        if (verificationObject.status === 'error') {\n            failureTriggered = true;\n        }\n\n        // @ts-ignore\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n\n    });\n\n    // @ts-ignore\n    setValidations(update);\n\n    return failureTriggered;\n}\n\nexport const getSSOBaseUrl = (chromeApi: any) => {\n    if (chromeApi.getEnvironment() === 'prod') {\n        return \"https://sso.redhat.com/auth/realms/redhat-external/\";\n    }\n    return \"https://sso.stage.redhat.com/auth/realms/redhat-external/\";\n}\n\nexport const getSSOApiUrl = (chromeApi: any, apiPath: string) => {\n    return getSSOBaseUrl(chromeApi) + apiPath;\n}\n\nexport function getRedirectURL (chromeApi: any, token :string) {\n    const orgId = parseToken(token).org_id;\n    return getSSOBaseUrl(chromeApi) + \"broker/\" + orgId + \"/endpoint\"\n}\n"],"names":["className","headingLevel","size","CustomerInformation","resetNextClicked","rootUserChoices","rootValidation","updateStatus","validations","setValidations","useState","inputType","status","message","Form","Title","Text","FormGroup","onChange","value","current","selections","target","id","failureTriggered","protocol","handleInputSelection","handleChange","role","fieldId","label","Radio","name","propTypes","nextClicked","OidcConfiguration","setSelections","handleSelection","OIDC_CONFIG","inputMethod","TextInput","_event","type","HelperText","HelperTextItem","SamlConfiguration","SAML_CONFIG","isRequired","ImportFromFile","fileData","setFileData","FileUpload","toString","onDataChange","data","err","result","console","error","configFileData","IMPORT_FROM_FILE","browseButtonText","ImportFromUrl","currentTarget","IMPORT_FROM_URL","ImportSamlFromFile","filenamePlaceholder","IMPORT_SAML_FROM_FILE","ImportSamlFromUrl","IMPORT_SAML_FROM_URL","ImportSamlFromURL","redirectDomain","ClipboardCopy","isReadOnly","clickTip","oidcData","chrome","useChrome","ssoBaseUrl","Alert","variant","isInline","title","displayName","labelIcon","Popover","triggerAction","bodyContent","Button","onClick","e","preventDefault","formGroupLabelHelp","isDisabled","issuerUrl","clientId","FormHelperText","clientSecret","authorizationUrl","tokenUrl","TextContent","component","p","idpAlias","ActionList","headerContent","footerContent","ActionListItem","samlData","identityProviderEntityId","authenticationRequestsUrl","TextArea","resizeOrientation","x509Certificate","responseData","providerType","setProviderType","Spinner","useEffect","providerId","Card","isCompact","isLarge","CardBody","IdpNotSetup","setupIDP","wizardEnabled","href","valid","next","previous","goToNextStep","goToPrevStep","WizardFooter","W","disabled","SubmitFooter","userChoiceData","accessToken","isLoading","setIsLoading","apiUrl","log","JSON","stringify","fetch","method","referrerPolicy","headers","body","then","response","json","window","location","reload","catch","FlowTemplate","userChoices","useRef","isConfigured","setIsConfigured","isInit","setIsInit","idpData","setIdpData","enabled","isWizardFlowEnabled","useFlag","chromeAPI","fieldsValidated","CUST_INFO","flowState","setFlowState","currentState","previousState","displayed","setDisplayed","hideCustomerInformation","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideFinish","nextTriggered","setNextTriggered","triggerNextStep","nextStep","newDisplay","pruneChoices","validChoices","choicesKeys","Object","keys","i","length","includes","setBackTriggered","prevStep","triggerBackStep","PageHeader","PageHeaderTitle","a","PageSection","Wizard","onClose","isProgressive","WizardStep","isHidden","footer","userToken","currentUser","updateUser","adminUser","selfServiceIDP","isSelfServiceIDPEnabled","appAction","auth","getToken","token","parseToken","base64","split","replace","parse","decodeURIComponent","atob","map","c","charCodeAt","slice","join","isAdminUser","is_org_admin","setStateValue","key","stateObject","updateFunction","updatedValue","processAllInputs","choices","update","forEach","validationKey","submittedValue","submittedType","verificationObject","input","required","verified","results","test","verifyInput","getSSOBaseUrl","chromeApi","getEnvironment","getSSOApiUrl","apiPath","getRedirectURL","orgId","org_id"],"sourceRoot":""}