{"version":3,"file":"js/14.39cd64454f15ec806109.js","mappings":"uMA2BA,QAlBY,WACR,IAAOA,GAAuBC,EAAAA,EAAAA,KAAvBD,oBASP,OAPAE,EAAAA,EAAAA,YAAU,YACWC,EAAAA,EAAAA,KACRC,SAAS,CAAEC,cAAeC,EAAAA,KAEnCN,EAAoB,cACxB,GAAG,IAGCO,IAAAA,cAACC,EAAAA,SAAQ,KACLD,IAAAA,cAACE,EAAAA,GAAmB,MACpBF,IAAAA,cAACG,EAAAA,EAAM,MAGnB,C,4HCPA,QAZiB,WAAH,OACVH,IAAAA,cAACI,EAAAA,GAAQ,CACLC,MAAOC,EAAAA,EAAIC,WAAC,GAADC,EAAAA,EAAAA,GAEgD,KACzDC,YAEFT,IAAAA,cAACU,EAAAA,EAAG,MAEG,C,iFCVTC,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,8BAAuE,IAEnEC,GAAoBD,EAAAA,EAAAA,OAAK,kBAC7B,6BAEC,IAEGE,GAAcF,EAAAA,EAAAA,OAAK,kBACvB,qDAEC,IAGGG,GAAiBH,EAAAA,EAAAA,OAAK,kBAC1B,8DAEC,IAGGI,GAAiBJ,EAAAA,EAAAA,OAAK,kBACxB,qDAEK,IAWIT,EAAS,WAAH,OACjBH,IAAAA,cAACiB,EAAAA,SAAQ,CACPC,SACElB,IAAAA,cAACmB,EAAAA,SAAQ,KACPnB,IAAAA,cAACoB,EAAAA,QAAO,QAIZpB,IAAAA,cAACqB,EAAAA,OAAY,KACTrB,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,OAAOC,QAASxB,IAAAA,cAACW,EAAQ,QACrCX,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,iBAAiBC,QAASxB,IAAAA,cAACa,EAAiB,QACxDb,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,2BAA2BC,QAASxB,IAAAA,cAACc,EAAW,QAC5Dd,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,kCAAkCC,QAASxB,IAAAA,cAACe,EAAc,QACtEf,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,oBAAoBC,QAASxB,IAAAA,cAACgB,EAAc,QAExDhB,IAAAA,cAACsB,EAAAA,MAAK,CAACC,KAAK,IAAIC,QAASxB,IAAAA,cAACW,EAAQ,SAE7B,C,+EClDN,SAASL,IAAoB,QAAAmB,EAAAC,UAAAC,OAAZC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAMhC,OALWlC,EAAAA,EAAAA,GAAY,CAAC,EAAG,CACzBmC,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAWC,OAClEN,GAGP,C","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n    const {updateDocumentTitle} = useChrome();\n\n    useEffect(() => {\n        const registry = getRegistry();\n        registry.register({ notifications: notificationsReducer });\n\n        updateDocumentTitle(\"IAM Console\");\n    }, []);\n\n    return (\n        <Fragment>\n            <NotificationsPortal />\n            <Routes />\n        </Fragment>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n    <Provider\n        store={init(\n            // eslint-disable-next-line no-undef\n            ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n        ).getStore()}\n    >\n        <App />\n\n    </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Routes as RouterRoutes} from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n  )\n);\nconst AuthFactors = lazy(() => \n  import(\n    /* webpackChunkName: \"Authentication-Factors\"*/ './Routes/Authentication-Policy/Authentication-Factors'\n  )\n);\n\nconst IdpIntegration = lazy(() =>\n  import(\n     /* webpackChunkName: \"Identity-Provider-Integration\"*/ './Routes/Authentication-Policy/Identity-Provider-Integration'\n  )\n)\n\nconst UserManagement = lazy(() =>\n    import(\n        /* webpackChunkName: \"User-Management\"*/ './Routes/Authentication-Policy/User-Management'\n        )\n)\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <RouterRoutes>\n        <Route path=\"oops\" element={<OopsPage/>} />\n        <Route path=\"no-permissions\" element={<NoPermissionsPage/>} />\n        <Route path=\"authentication-factors/*\" element={<AuthFactors/>} />\n        <Route path=\"identity-provider-integration/*\" element={<IdpIntegration/>}/>\n        <Route path=\"user-management/*\" element={<UserManagement/>}/>\n      {/* Finally, catch all unmatched routes */}\n        <Route path=\"*\" element={<OopsPage/>} />\n    </RouterRoutes>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nexport let registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n"],"names":["updateDocumentTitle","useChrome","useEffect","getRegistry","register","notifications","notificationsReducer","React","Fragment","NotificationsPortal","Routes","Provider","store","init","apply","_toConsumableArray","getStore","App","OopsPage","lazy","NoPermissionsPage","AuthFactors","IdpIntegration","UserManagement","Suspense","fallback","Bullseye","Spinner","RouterRoutes","Route","path","element","_len","arguments","length","middleware","Array","_key","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","concat"],"sourceRoot":""}