{"version":3,"file":"js/528.9e9e50fecfea4c287b76.js","mappings":"kNA6BA,QAlBY,WACV,IAAOA,GAAuBC,EAAAA,EAAAA,KAAvBD,oBASP,OAPAE,EAAAA,EAAAA,YAAU,YACSC,EAAAA,EAAAA,MACRC,SAAS,CAAEC,cAAeC,EAAAA,KAEnCN,EAAoB,cACrB,GAAE,IAGC,kBAAC,EAAAO,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC,IAAD,MAGP,C,6HCRD,QAXiB,kBACf,kBAAC,KAAD,CACEC,MAAOC,EAAAA,EAAAA,WAAA,UACkD,KACvDC,YAEI,kBAAC,IAAD,MANO,C,0ECFXC,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,4BADoB,IAGhBC,GAAoBD,EAAAA,EAAAA,OAAK,kBAC7B,6BAD6B,IAKzBE,GAAcF,EAAAA,EAAAA,OAAK,kBACvB,qDADuB,IAMnBG,GAAiBH,EAAAA,EAAAA,OAAM,kBAC3B,sEAD2B,IAMvBI,GAAiBJ,EAAAA,EAAAA,OAAO,kBAC1B,qDAD0B,IAcjBK,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,SAAD,KACI,kBAAC,EAAAC,MAAD,CAAOC,KAAK,OAAOC,QAAS,kBAACb,EAAD,QAC5B,kBAAC,EAAAW,MAAD,CAAOC,KAAK,iBAAiBC,QAAS,kBAACX,EAAD,QACtC,kBAAC,EAAAS,MAAD,CAAOC,KAAK,2BAA2BC,QAAS,kBAACV,EAAD,QAChD,kBAAC,EAAAQ,MAAD,CAAOC,KAAK,kCAAkCC,QAAS,kBAACT,EAAD,QACvD,kBAAC,EAAAO,MAAD,CAAOC,KAAK,oBAAoBC,QAAS,kBAACR,EAAD,QAEzC,kBAAC,EAAAM,MAAD,CAAOC,KAAK,IAAIC,QAAS,kBAACb,EAAD,SAfX,C,2EChCf,SAASF,IAAoB,2BAAZgB,EAAY,yBAAZA,EAAY,gBAMlC,OALWtB,EAAAA,EAAAA,IAAY,CAAC,EAAF,CACpBuB,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAFtC,OAGjBH,GAGN,C","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { Provider } from 'react-redux'\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\nconst App = () => {\n  const {updateDocumentTitle} = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n\n    updateDocumentTitle(\"IAM Console\");\n  }, []);\n\n  return (\n      <Fragment>\n        <NotificationsPortal />\n        <Routes />\n      </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n          <App />\n\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Routes as RouterRoutes} from 'react-router-dom';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n  )\n);\nconst AuthFactors = lazy(() => \n  import(\n    /* webpackChunkName: \"Authentication-Factors\"*/ './Routes/Authentication-Policy/Authentication-Factors'\n  )\n);\n\nconst IdpIntegration = lazy (() =>\n  import(\n     /* webpackChunkName: \"Identity-Provider-Integration\"*/ './Routes/Authentication-Policy/Identity-Provider-Integration'\n  )\n)\n\nconst UserManagement = lazy ( () =>\n    import(\n        /* webpackChunkName: \"User-Management\"*/ './Routes/Authentication-Policy/User-Management'\n        )\n)\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <RouterRoutes>\n        <Route path=\"oops\" element={<OopsPage/>} />\n        <Route path=\"no-permissions\" element={<NoPermissionsPage/>} />\n        <Route path=\"authentication-factors/*\" element={<AuthFactors/>} />\n        <Route path=\"identity-provider-integration/*\" element={<IdpIntegration/>}/>\n        <Route path=\"user-management/*\" element={<UserManagement/>}/>\n      {/* Finally, catch all unmatched routes */}\n        <Route path=\"*\" element={<OopsPage/>} />\n    </RouterRoutes>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\n\n\nexport let registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n"],"names":["updateDocumentTitle","useChrome","useEffect","getRegistry","register","notifications","notificationsReducer","Fragment","store","init","getStore","OopsPage","lazy","NoPermissionsPage","AuthFactors","IdpIntegration","UserManagement","Routes","Suspense","fallback","Bullseye","Spinner","Route","path","element","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}