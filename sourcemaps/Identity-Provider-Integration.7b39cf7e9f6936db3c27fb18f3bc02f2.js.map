{"version":3,"file":"js/Identity-Provider-Integration.dfda046db408acb2020b.js","mappings":"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","sources":["webpack:///./src/Components/disabledPage/disabled-page.js","webpack:///./src/Components/nonAdminUser/non-admin-user.js","webpack:///./src/Components/twoFactorCheck/two-factor-check.js","webpack:///./src/Components/utils/general-utils.js","webpack:///./src/Components/idpintegrationflows/firstStep/customerInformation.js","webpack:///./src/Components/idpintegrationflows/secondStep/oidcConfiguration.js","webpack:///./src/Components/idpintegrationflows/secondStep/samlConfiguration.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importFromFile.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importFromUrl.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importSamlFromFile.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importSamlFromUrl.js","webpack:///./src/Components/idpintegrationflows/finalStep/urlsForUser.js","webpack:///./src/Components/idpintegrationflows/validationStep/testProvider.js","webpack:///./src/Components/idpintegrationflows/configured/idpField.js","webpack:///./src/Components/idpintegrationflows/configured/configuredIDP.js","webpack:///./src/Components/idpintegrationflows/IDPNotSetup/IDPNotSetup.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/genericFooter.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/submitFooter.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/flowTemplate.js","webpack:///./src/Routes/Authentication-Policy/Identity-Provider-Integration.js"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = (props) => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","\nimport './non-admin-user.scss'\nimport React from 'react';\nimport {\n  Title,\n  Text,\n  Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminUser = (props) => {\n\n  const triggerRedirect = () => {\n    window.location.href = \"/iam/my-user-access\";\n  }\n\n  return <div className=\"nonAdminDiv\">\n    <LockIcon className=\"lockIcon\" />\n    <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">You do not have access to Authentication Factors</Title>\n    <Text className=\"pf-u-mt-lg\">Contact your organization administrator(s) for more information, or visit My User Access to learn more about your permissions.</Text>\n    <Button variant=\"link\" onClick={triggerRedirect} className=\"pf-u-mt-lg\">Go to landing page</Button>\n  </div>\n}\n\nexport default NonAdminUser;\n","import './two-factor-check.scss';\nimport {isAdminUser} from '../utils/general-utils';\nimport React, { useEffect, useState } from 'react';\nimport { \n    Title,\n    Text,\n    Button,\n    FormGroup,\n    Checkbox,\n    ActionGroup,\n    Popover,\n    PageSection,\n    Form \n} from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport QuestionIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon'\nimport { useDispatch } from 'react-redux'\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nvar docLink = \"\";\nvar statusURL = \"http://localhost:8081/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\nif(insights.chrome.getEnvironment() === 'stage'){\n    statusURL = \"https://sso.stage.redhat.com/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\n    docLink = \"https://access.stage.redhat.com/documentation/en-us/red_hat_customer_portal/1/html/using_two-factor_authentication/con-ciam-2fa-about_two-factor-authentication\";\n}\nelse if (insights.chrome.getEnvironment() === 'prod'){\n    statusURL = \"https://sso.redhat.com/auth/realms/redhat-external/apis/organizations/v1/my/authentication-policy\";\n    docLink = \"https://access.redhat.com/documentation/en-us/red_hat_customer_portal/1/html/using_two-factor_authentication/con-ciam-2fa-about_two-factor-authentication\"\n}\n\nconst TwoFactorCheck = (props) => {\n    const dispatch = useDispatch();\n\n    // build the state hooks\n    const [checkState,updateCheckState] = useState ({\n        checked: false,\n        changed: false,\n    });\n    const [loadingState, updateLoadingState] = useState ({loading: true});\n\n    const pullCurrentState = () => {\n        // Need to establish the existing state by querying the base endpoint. \n\n        fetch(statusURL,{\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers:{\n              'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.tokenData\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if(data.error){\n                console.error(data.error);\n                FailureAlert('Failed to fetch the current status');\n            }\n            else{\n                /*\n                data expected to resemble\n                {\n                    authenticationFactors: {\n                        otp: {\n                            required: false\n                        }\n                    }\n                }\n                */\n                updateCheckState({\n                    checked: data.authenticationFactors.otp.required,\n                         changed: false\n                });\n                updateLoadingState({\n                    loading: false\n                })\n            }\n        });\n    }\n\n    // equivalent to componentDidMount when provided an empty array as a second param\n    useEffect(() => {pullCurrentState()},[]);\n\n    const toggleCheckBox = () => {\n        updateCheckState({\n            checked: !checkState.checked,\n            changed: true\n        })\n    }\n\n    const SuccessAlert = () => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            description: 'Authentication policy settings saved',\n            title: \"Success\"\n          })\n        );\n      };\n\n    const FailureAlert = (er) => {\n        dispatch(\n            addNotification({\n              variant: 'danger',\n              description: er,\n              title: 'Error'\n            })\n        );\n    };\n      \n\n    // following the api: https://docs.google.com/document/d/1kj0ZTwFx2-vmUYogW6Iz7d4DzQ-U1r8DmiQV1qWTPTA/edit\n    const updateStatus = (event) => {\n        let payload = {\"authenticationFactors\" : {\"otp\": {\"required\": false}}};\n        checkState.checked? payload.authenticationFactors.otp.required=true:payload.authenticationFactors.otp.required=false;\n        insights.chrome.auth.getToken().then(token =>{\n            fetch(statusURL,{\n              method: 'POST',\n              referrerPolicy: 'no-referrer',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n              },\n              body: JSON.stringify(payload)\n          }).then(response => response.json())\n            .then(data =>  {\n\n                if(data.error){\n                    console.error(data.error);\n                    FailureAlert(data.error);\n                }\n\n                updateCheckState({\n                    checked: data.authenticationFactors.otp.required,\n                    changed: false\n                });\n\n                SuccessAlert();\n            });\n          });\n    }\n  \n    return <PageSection>\n                <Form>\n                    <div>\n                        <Title headingLevel=\"h2\" size=\"xl\">Organizational two-factor authentication</Title>\n                            \n                        <Text className=\"primaryTextBox pf-u-mt-md\">\n                            Enable organizational two-factor authentication to require all users to use a password and a \n                            one-time code to log in. When enabled, each user in your organization must install an authenticator application on \n                            a compatible mobile device in order to log in. \n                            <Button variant=\"link\" href={docLink} target=\"_blank\" component=\"a\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs\">\n                                Learn more about two-factor authentication\n                            </Button>\n                        </Text>\n                            \n                        <FormGroup className=\"pf-u-mt-md\">\n                            <Checkbox onChange={toggleCheckBox} label=\"Enable two-factor authentication for your organization\" id=\"confirmed\" className=\"twofaCheck\" isChecked={checkState.checked}></Checkbox>\n                            <Button id=\"infoIcon\" variant=\"link\"  component=\"span\" isInline className=\"questionIcon pf-u-ml-xs\" icon={<QuestionIcon/>}></Button>\n                            <Popover\n                            aria-label=\"Advanced popover usages example\"\n                            position={\"right\"}\n                            hideOnOutsideClick={true}\n                            enableFlip={true}\n                            appendTo={() => document.body}\n                            maxWidth={\"18rem\"}\n                            minWidth={\"2rem\"}\n                            bodyContent={\n                                <div>\n                                    Users will be required to set up two-factor authentication the next time they attempt to log in.\n                                </div>\n                            }\n                            reference={() => document.getElementById(\"infoIcon\")}\n                            className=\"pf-u-text-align-center\"\n                            ></Popover>\n                        </FormGroup>\n                            \n                        <ActionGroup className=\"pf-u-mt-3xl\">\n                            <Button onClick={updateStatus} isDisabled={loadingState.loading || !checkState.changed}>Save</Button>\n                            <Button onClick={pullCurrentState} variant=\"link\" isInline className=\"pf-u-ml-lg\">Cancel</Button>\n                        </ActionGroup>\n                    </div>\n                </Form>\n            </PageSection>\n\n    \n}\n\n\nexport default TwoFactorCheck;\n","\n\n\n\n    \n/**\n * \n * @param {*} token keycloak provided token used to validate the existing logged in user\n * @returns \n */\nexport function isAdminUser (token) {\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join('')));\n    return jsonPayload && jsonPayload.is_org_admin;\n}\n\n/**\n * \n * @param {*} value \n * @param {*} key \n * @param {*} stateObject \n * @param {*} updateFunction \n */\nexport function setStateValue (value, key, stateObject, updateFunction) {\n\n    let updatedValue = {};\n    updatedValue[key] = value;\n    let updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\n/**\n * \n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run \n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input, type, required) {\n    if(required && !input){\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified = {};\n    let results = '';\n\n    switch(type){\n        case 'GENERAL':\n            results = /^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/.test(input);\n\n\n            verified={\n                status: results ? 'default':'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            results = /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g.test(input)\n            verified={\n                status: results ? 'default':'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default :\n            verified={\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n\n\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (selections, validations, setValidations) {\n    let failureTriggered = false;\n    let update = {};\n    Object.keys(validations).forEach(validationKey => {\n        let submittedValue = selections && selections[validationKey]\n        let submittedType = validations[validationKey].inputType\n\n        let verificationObject = verifyInput(submittedValue, submittedType, true);\n\n        if(verificationObject.status === 'error'){\n            failureTriggered = true;\n        }\n\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n       \n    });\n\n    setValidations(update);\n\n    return failureTriggered;\n}\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Title,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\nimport {processAllInputs, setStateValue, verifyInput} from '../../utils/general-utils.js';\n\nconst CustomerInformation = (props) => {\n\n    const [validations, setValidations] = useState({\n        'custName': {\n            inputType: 'GENERAL',\n            status: 'default',   // success, warning, error, or default\n            message: ''\n        },\n        'protocol': {\n            inputType: 'RADIO', // just need to know that it is checked so the value here doesnt matter.\n            status: 'default',\n            message: ''\n        }\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n        // regardless of current state. if the user alters the input clear existing flags. This should also reset\n        // the currently displayed errors\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        // update the validation settings. It is expected that the id's used in the validation object matches\n        // the id's used on the elements.\n        const failureTriggered = processAllInputs( props.rootUserChoices.current ,validations , setValidations );\n\n        props.rootValidation.current['CUSTINFO'] = !failureTriggered;\n\n        if(!failureTriggered && props.rootUserChoices.current.protocol){\n            props.updateStatus(props.rootUserChoices.current.protocol);\n        }\n\n    }\n\n\n// pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">All fields are required</Text>\n                <FormGroup  label=\"Identity provider display name\"\n                            helperText=\"Enter a personalized display name for your Identity Provider (IdP). It is important to use unique names for your IdP display name, since multiple Red Hat accounts can be linked to one IdP.\"\n                            helperTextInvalid={validations.custName.message}\n                            validated={props.nextClicked ? validations.custName.status : 'default'}\n                            onChange={(value) => {handleSelection(value)}}>\n                    <TextInput\n                               type=\"text\" \n                               id=\"custName\"  />\n                </FormGroup>\n\n                <FormGroup  onChange={(value) => {handleSelection(value)} }\n                            role=\"radiogroup\" \n                            fieldid=\"authType\" \n                            label=\"Choose identity provider protocol\"\n                            helperTextInvalid={ \"A protocol must be selected to proceed\"}\n                            validated={ props.nextClicked ? validations.protocol.status : 'default'}\n                            id=\"protocol\">\n                    <Radio name=\"authType\" id=\"protocol\" label=\"OpenID Connect\" value=\"OIDCCONFIG\"/>\n                    <Radio name=\"authType\" id=\"protocol\" label=\"Saml 2.0\" value=\"SAMLCONFIG\"/>\n                </FormGroup>\n\n            </Form>\n\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Button,\n    Form,\n    FormGroup,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport {processAllInputs, setStateValue} from '../../utils/general-utils.js';\n\nconst OIDCConfiguration = (props) => {\n\n    const [selections, setSelections] = useState();\n    const [validations, setValidations] = useState({\n        'clientId': {\n            inputType: 'GENERAL',\n            status: 'default',   // success, warning, error, or default\n            message: ''\n        },\n        'clientSecret': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'inputMethod': {\n            inputType: 'RADIO', // just need to know that it is checked so the value here doesnt matter.\n            status: 'default',\n            message: ''\n        }\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n\n        // regardless of current state. if the user alters the input clear existing flags. This should also reset\n        // the currently displayed errors\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        // update the validation settings. It is expected that the id's used in the validation object matches\n        // the id's used on the elements.\n        const failureTriggered = processAllInputs( props.rootUserChoices.current ,validations , setValidations );\n\n        props.rootValidation.current['OIDCCONFIG'] = !failureTriggered;\n\n        if(!failureTriggered && props.rootUserChoices.current.inputMethod){\n            props.updateStatus(props.rootUserChoices.current.inputMethod);\n        }\n\n    }\n\n    return <Form>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">All fields are required</Text>\n                <FormGroup  label=\"Client ID/SP entity ID\" \n                            helperText=\"The Red Hat client identifier registered within the customer identity provider. Your indentity provider generates this client ID when a Red Hat client is added\"\n                            helperTextInvalid={validations.clientId.message}\n                            validated={props.nextClicked ? validations['clientId'].status : ''}\n                            onChange={(value) => {handleSelection(value)}}>\n                    <TextInput  onChange={(value) => setStateValue(value,\"clientId\",selections,setSelections)} \n                                type=\"text\" \n                                id=\"clientId\"  />\n                </FormGroup>\n\n                <FormGroup  label=\"Client Secret\" \n                            helperText=\"Enter the client secret associated with your client identifier  by your identity provider\"\n                            helperTextInvalid={validations.clientSecret.message}\n                            validated={props.nextClicked ? validations.clientSecret.status : \"\"}\n                            onChange={(value) => {handleSelection(value)}}>\n                    <TextInput  onChange={(value) => setStateValue(value,\"clientSecret\",selections,setSelections)}\n                                type=\"text\"\n                                id=\"clientSecret\"  />\n                </FormGroup>\n\n                <FormGroup  onChange={(value) => {handleSelection(value)}} \n                            label=\"Load external IDP metadata from a config file or download it from a url\"\n                            helperTextInvalid={\"You must choose a method for importing your metadata\"}\n                            validated={props.nextClicked ? validations['inputMethod'].status : \"\"}\n                            >\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORTFROMURL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORTFROMFILE\"/>\n                </FormGroup>\n\n                \n            </Form>\n\n}\n\nexport default OIDCConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport { \n    Flex,\n    FlexItem,\n    Radio,\n    Button,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\n\nimport React, {useState} from 'react';\nimport {setStateValue, processAllInputs} from '../../utils/general-utils.js';\n\nconst SamlConfiguration = (props) => {\n\n    const [selections, setSelections] = useState();\n    const [validations, setValidations] = useState({\n        'inputMethod': {\n            inputType: 'RADIO', // just need to know that it is checked so the value here doesnt matter.\n            status: 'default',\n            message: ''\n        }\n    });\n\n    const handleSelection = (value) => {\n        // regardless of current state. if the user alters the input clear existing flags. This should also reset\n        // the currently displayed errors\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        // update the validation settings. It is expected that the id's used in the validation object matches\n        // the id's used on the elements.\n        const failureTriggered = processAllInputs( props.rootUserChoices.current ,validations , setValidations );\n\n        props.rootValidation.current['SAMLCONFIG'] = !failureTriggered;\n\n        if(!failureTriggered && props.rootUserChoices.current.inputMethod){\n            props.updateStatus(props.rootUserChoices.current.inputMethod);\n        }\n    }\n\n    return <Form>\n\n                <FormGroup  onChange={(value) => {handleSelection(value)}}\n                            label=\"Load external IDP metadata from a config file or download it from a url\" \n                            isRequired\n                            validated={ props.nextClicked ? validations.inputMethod.status : \"\"}\n                            helperTextInvalid=\"An input method must be chosen to proceed\">\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORTSAMLFROMURL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORTSAMLFROMFILE\"/>\n                </FormGroup>\n            </Form>\n\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Button,\n    FileUpload,\n    Form,\n    FormGroup,\n    Flex,\n    FlexItem,\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\n\nconst ImportFromFile = (props) => {\n\n    const [fileData, setFileData] = useState(\"\");\n\n\n    /**\n     *\n     */\n    const handleFileData = (data) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if(err){\n                console.error(err);\n            }\n            else if (result){\n                props.updateStatus(\"FINALSTEP\");\n                props.rootUserChoices.current[\"configFileData\"] = result;\n\n                // may need to submit a query at this point to the api to validate that the file chosen is good to go\n                // alternatively a validation step could be added locally to check for the existence of required fields\n                props.rootValidation.current[\"IMPORTFROMFILE\"] = true;\n            }\n        })\n    }\n\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload\n                        value={fileData.toString()}\n                        id=\"text-file-with-edits-allowed\"\n                        type=\"text\"\n                        onDataChange={(dataChange) => {handleFileData(dataChange)}}\n                        browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">An XML formatted file detailing the configuration of your IDP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n            </Form>\n\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Radio,\n    Button,\n    Form,\n    FormGroup,\n    Flex,\n    FlexItem, Title\n} from '@patternfly/react-core';\nimport React, {useState, useEffect} from 'react';\nimport {processAllInputs, setStateValue} from '../../utils/general-utils.js';\n\nconst ImportFromURL = (props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n        // regardless of current state. if the user alters the input clear existing flags. This should also reset\n        // the currently displayed errors\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        // update the validation settings. It is expected that the id's used in the validation object matches\n        // the id's used on the elements.\n        const failureTriggered = processAllInputs( props.rootUserChoices.current ,validations , setValidations );\n\n        props.rootValidation.current['IMPORTFROMURL'] = !failureTriggered;\n\n        if(!failureTriggered){\n            props.updateStatus(\"FINALSTEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\"\n                    helperText=\"import metadata from a remote identity provider discovery descriptor\"\n                    helperTextInvalid={validations.importURL.message}\n                    validated={props.nextClicked ? validations.importURL.status : 'default'}\n                    onChange={(value) => {handleSelection(value)}}>\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                    />\n                </FormGroup>\n            </Form>\n\n}\n\nexport default ImportFromURL;\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Button,\n    Form,\n    FormGroup, Title, Text\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from \"xml2js\";\n\nconst ImportSamlFromFile = (props) => {\n\n\n    const [fileData, setFileData] = useState(\"\");\n\n    /**\n     *\n     */\n    const handleFileData = (data) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if(err){\n                console.error(\"failed to parse xml file: \" + err);\n            }\n            else if (result){\n                props.updateStatus(\"FINALSTEP\");\n                props.rootUserChoices.current[\"configFileData\"] = result;\n\n                props.rootValidation.current[\"IMPORTSAMLFROMFILE\"] = true;\n            }\n        })\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    filenamePlaceholder=\"Drag and drop a file or upload one\"\n                    onDataChange={(dataChange) => {handleFileData(dataChange)}}\n                    browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">A XML formatted file detailing the configuration of your IDP</Text>\n            </Form> \n\n}\n\nexport default ImportSamlFromFile;\n","// step three, choice 6 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Radio,\n    Button,\n    Form,\n    FormGroup, Title\n} from '@patternfly/react-core';\nimport React, {useState, useEffect} from 'react';\nimport {processAllInputs, setStateValue} from '../../utils/general-utils.js';\n\nconst ImportSamlFromURL = (props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n        // regardless of current state. if the user alters the input clear existing flags. This should also reset\n        // the currently displayed errors\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        // update the validation settings. It is expected that the id's used in the validation object matches\n        // the id's used on the elements.\n        const failureTriggered = processAllInputs( props.rootUserChoices.current ,validations , setValidations );\n\n        props.rootValidation.current['IMPORTSAMLFROMURL'] = !failureTriggered;\n\n        if(!failureTriggered){\n            props.updateStatus(\"FINALSTEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\"\n                    helperText=\"import metadata from a remote identity provider discovery descriptor\"\n                    helperTextInvalid={validations.importURL.message}\n                    validated={props.nextClicked ? validations.importURL.status : 'default'}\n                    onChange={(value) => {handleSelection(value)}}>\n                    <TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                    />\n                </FormGroup>\n            </Form>\n\n}\n\nexport default ImportSamlFromURL;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    Text,\n    ClipboardCopy\n} from '@patternfly/react-core';\nimport React,{useEffect} from 'react';\n\nconst ImportSamlFromURL = (props) => {\n\n    useEffect(() => {\n        props.updateStatus(\"VALIDATESTEP\");\n    },[])\n\n    return <Form>\n                <Title headingLevel=\"h2\">Configure URLs</Title>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">Some Identity Provider Services require additional\n                    configuration when enabling third party single sign on. Please review the following information and\n                    verify that these are filled in where required in your company IDP.</Text>\n                <FormGroup label=\"Identifier (Entity ID)\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Sign on URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external/protocol/saml\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Redirect URL or ACS (Assertion Consumption Service) URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        {\"https://sso.redhat.com/auth/realms/redhat-external/broker/\" + props.redirectDomain + \"/endpoint\"}\n                    </ClipboardCopy>\n                </FormGroup>\n\n            </Form>\n\n}\n\nexport default ImportSamlFromURL;\n","// IDP test instructions\n\nimport {\n    Text,\n    Form,\n    List,\n    ListItem,\n    Button,\n    Title\n} from '@patternfly/react-core';\nimport React,{useEffect} from 'react';\nimport ExternalLinkSquareAltIcon from \"@patternfly/react-icons/dist/esm/icons/external-link-alt-icon\";\n\nconst TestProvider = (props) => {\n\n    useEffect( () => {\n        props.updateStatus(\"VALIDATESTEP\");\n    },[])\n\n    const triggerNext = () => {\n\n    }\n\n    return <Form>\n        <Title headingLevel=\"h2\">Test your identity provider</Title>\n        <Text className=\"pf-u-color-400 pf-u-font-size-sm\">Test your identity provider integration before enabling it for your entire organization</Text>\n        <List>\n            <ListItem>Click the button to initiate login redirect to your identity provider</ListItem>\n            <ListItem>Log in with your identity provider user your company Single Sign-on credentials</ListItem>\n            <ListItem>You will be redirected back to identity provider integration configuration where you can then enable it for your entire organization</ListItem>\n        </List>\n\n        <Text>If you encounter any errors or are having trouble, contact\n            <Button variant=\"link\" href={\"www.google.com\"} target=\"_blank\" component=\"a\" isInline className=\"pf-u-ml-xs\">\n            CustomerService\n            </Button>\n        </Text>\n    </Form>\n\n}\n\nexport default TestProvider;\n","import React, { useState } from 'react';\nimport {Button, Flex, FlexItem, GridItem, Text, TextInput, Title} from \"@patternfly/react-core\";\nimport EditIcon from \"@patternfly/react-icons/dist/esm/icons/edit-icon\";\nimport AcceptIcon from \"@patternfly/react-icons/dist/esm/icons/check-icon\";\nimport CancelIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\n\nconst IDPField = (props) => {\n\n    // handles if the use has chosen to edit this field. toggles between the two GridItem's\n    const [editField, toggleEditField] = useState(false);\n    // handles the text input changes\n    const [textValue, updateTextValue] = useState(\"\");\n\n    /**\n     * called by the check button, it needs to submit the data change and re-trigger the toggle state.\n     */\n    const handleAcceptClick = () => {\n        console.log(\"triggered submit value: \" + textValue);\n        toggleEditField(false)\n    }\n\n    return (<div>\n                <GridItem hidden={editField}>\n                    <Title headingLevel=\"h4\">{props.title}<Button variant=\"link\" onClick={() => {toggleEditField(true)}} isInline icon={<EditIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs  editIcon\"></Button></Title>\n                    <Text id={props.idValue + \"-current\"}>{props.current}</Text>\n                </GridItem>\n                <GridItem hidden={!editField}>\n                    <Title headingLevel=\"h4\">{props.title}</Title>\n                    <Flex>\n                        <FlexItem><TextInput id={props.idValue} value={textValue} onChange={(update)=>{updateTextValue(update)}}></TextInput></FlexItem>\n                        <FlexItem><Button variant=\"link\" onClick={handleAcceptClick} isInline icon={<AcceptIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs  editIcon\"></Button></FlexItem>\n                        <FlexItem><Button variant=\"link\" onClick={() => {toggleEditField(false)}} isInline icon={<CancelIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs  editIcon\"></Button></FlexItem>\n                    </Flex>\n                </GridItem>\n            </div>\n    )\n}\n\nexport default IDPField;\n","import './configuredIDP.scss'\nimport React, { useState } from 'react';\nimport {\n    FormGroup,\n    Button,\n    Title,\n    Card,\n    Grid,\n    Modal,\n    ModalVariant,\n    Icon,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\n\nimport IDPField from \"./idpField\";\n\nimport Exclamation from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\"\n\nconst ConfiguredIDP = (props) => {\n\n    // flag to control which values get displayed\n    const [oidcConfigType, setIsOIDCConfig] = useState(true);\n    const [currentValues, setCurrentValues] = useState({\n        displayName: \"Test Company\",\n        clientID: \"awesomesauce.com\",\n        clientSecret: \"*******\",\n        logoUrl: \"awesomesauce.com/logo\"\n    });\n    const [displayConfirmationModal, setModalDisplay] = useState(false);\n\n    /**\n     * Triggered by the confirm button in the popup modal. This will submit the query to enable the third party idp\n     */\n    const onConfirm = () => {\n        console.log(\"Enable IDP\");\n    }\n    /**\n     * Triggered by the cancel button in the modal, it will simply drop the modal\n     */\n    const onCancel = () => {\n        setModalDisplay(false);\n    }\n    /**\n     * Triggered by the Enable button on the root of this page. it will trigger the confirmation popup.\n     */\n    const onEnable = () => {\n        setModalDisplay(true);\n    }\n    /**\n     * Triggered by the delete button on the root page, this button will fire off the query to the api responsible for\n     * removing the existing configuration.\n     */\n    const onDelete = () => {\n        console.log(\"Delete this IDP config\");\n    }\n\n    let lastAvailDate = \"January 1st, 1979. 1:00 AM\";\n\n    /**\n     * Custom header used for the modal popup to fulfill target design including icon\n     */\n    const customPopupHeader = (\n        <React.Fragment>\n            <Flex>\n                <FlexItem>\n                    <Icon status=\"warning\"><Exclamation/></Icon>\n                </FlexItem>\n                <FlexItem>\n                    <Title id=\"modal-custom-header-label\" headingLevel=\"h1\">\n                        Enable Identity Provider for your entire organization?\n                    </Title>\n                </FlexItem>\n            </Flex>\n\n        </React.Fragment>\n    )\n\n    return (\n                <Card className=\"configuredCard\" isCompact={false}>\n                    <Modal\n                        variant={ModalVariant.small}\n                        isOpen={displayConfirmationModal}\n                        title=\"Enable Identity Provider for your entire organization?\"\n                        header={customPopupHeader}\n                        aria-labelledby=\"modal-custom-header-label\"\n                        aria-describedby=\"modal-custom-header-description\"\n                        actions={[\n                            <Button onClick={onConfirm}>Confirm</Button>,\n                            <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        ]}\n                    >\n                        Are you sure you wish to enable Third Party SSO for your entire organization?\n                    </Modal>\n                    <Grid\n                        hasGutter\n                        span={12}>\n\n                        {/* Display Name */}\n                        <Grid hasGutter span={6}>\n                            <IDPField idValue={\"displayName\"} title={\"Display Name\"} current={currentValues.displayName} />\n                        </Grid>\n\n\n                        <Grid hasGutter span={6}>\n                            {/* Client Id  */}\n                            <IDPField idValue={\"clientID\"} title={\"Client ID\"} current={currentValues.clientID} />\n\n                            {/* Client Secret */}\n                            <IDPField idValue={\"clientSecret\"} title={\"Client Secret\"} current={currentValues.clientSecret} />\n                        </Grid>\n\n                        {/* Logo URL */}\n                        <Grid hasGutter span={6}>\n                            <IDPField idValue={\"logourl\"} title={\"Logo URL\"} current={currentValues.logoUrl}/>\n                        </Grid>\n\n                    </Grid>\n\n                    {/* Action buttons */}\n                    <FormGroup className=\"buttonGroup\">\n                        <Button variant=\"primary\" onClick={onEnable}>Enable</Button>\n                        <Button variant=\"link\" onClick={onDelete}>Delete</Button>\n                    </FormGroup>\n\n                </Card>\n\n    )\n}\n\nexport default ConfiguredIDP;\n","import './IDPNotSetup.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\n\nconst IDPNotSetup = (props) => {\n\n    return <div className=\"notSetupDiv\">\n                <CubesIcon className=\"cubesIcon\"/>\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">Identity provider not setup</Title>\n                <Text className=\"pf-u-mt-md\">You haven't set up an identity provider for your organization</Text>\n                <Button className=\"pf-u-mt-lg\" variant=\"primary\" onClick={props.setupIDP}>Set up an identity provider</Button>\n            </div>\n}\n\nexport default IDPNotSetup;\n","import React from 'react';\nimport {\n    Button\n} from '@patternfly/react-core';\n\nimport {\n    WizardFooterWrapper,\n    useWizardContext,\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\n\n\nconst GenericFooter = (props) =>{\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if(props.valid){\n            goToNextStep();\n        }\n        else{\n            props.next(true);\n        }\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} disabled={props.valid}>Next</Button>\n            <Button variant=\"secondary\" onClick={goToPrevStep}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default GenericFooter;\n","import React from 'react';\nimport {\n    Button\n} from '@patternfly/react-core';\n\nimport {\n    WizardFooterWrapper,\n    useWizardContext,\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\n\n\nconst SubmitFooter = (props) =>{\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = async () => {\n        console.log(\"Submitting with this data: \" + JSON.stringify(props.userChoiceData, null, 2));\n\n        setIsLoading(true);\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        setIsLoading(false);\n        goToNextStep();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} isLoading={isLoading} >Next</Button>\n            <Button variant=\"secondary\" onClick={goToPrevStep}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default SubmitFooter;\n","import './flowTemplate.scss'\nimport React, { useState, useReducer, useRef } from 'react';\nimport {\n    Divider,\n    PageSection,\n    Button,\n} from '@patternfly/react-core';\n\nimport {\n    Wizard,\n    WizardStep,\n\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\n\nimport {\n    PageHeader,\n    PageHeaderTitle,\n  } from '@redhat-cloud-services/frontend-components/PageHeader';\n\n  // root flow\n  import CustomerInformation from '../firstStep/customerInformation.js';\n\n  // second step\n  import OIDCConfig from '../secondStep/oidcConfiguration.js';\n  import SAMLConfig from '../secondStep/samlConfiguration.js';\n  \n  // third step\n  import ImportFromFile from '../thirdStep/importFromFile.js';\n  import ImportFromURL from '../thirdStep/importFromUrl.js';\n  import ImportSamlFromFile from '../thirdStep/importSamlFromFile.js';\n  import ImportSamlFromURL from '../thirdStep/importSamlFromUrl.js';\n\n  // final step\n  import URLsForUser from '../finalStep/urlsForUser.js';\n\n  // test step\n  import TestProvider from '../validationStep/testProvider.js';\n\n  import ConfiguredIDP from '../configured/configuredIDP';\n  import IDPNotSetup from \"../IDPNotSetup/IDPNotSetup\";\n\n  import GenericFooter from './genericFooter';\n  import SubmitFooter from './submitFooter';\n\n// manage a flow state\n\n\nconst FlowTemplate = (props) => {\n\n    // intendedto serve as the main aggregate of data that gets sent to the server\n    var userChoices = useRef({});\n\n    // Is the admin's account been configured with an idp. If so display the management screen.\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isInit, setIsInit] = useState(true);\n\n    // handle the present validation state of the various steps.\n    var fieldsValidated = useRef({\n        \"CUSTINFO\" : false,\n        \"OIDCCONFIG\": false,\n        \"SAMLCONFIG\": false,\n        \"IMPORTFROMFILE\": false,\n        \"IMPORTFROMURL\": false,\n        \"IMPORTSAMLFROMFILE\": false,\n        \"IMPORTSAMLFROMURL\": false\n    })\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available. \n     */\n    const [flowState, setFlowState] = useState({\n        currentState: \"CUSTOMERINFORMATION\",\n        previousState: \"\",\n        nextState: \"\",\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n    const closeWizard = () => {\n        console.log(\"close fancy window\");\n    }\n\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideCustomerInformation: false,\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideFinish: true,\n        hideValidate: true\n    })\n\n    // used to communicated between the footer and currently displayed window.\n    const [nextTriggered, setNextTriggered] = useState(false);\n\n\n\n\n    const triggerNextStep = (nextStep) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch(nextStep) {\n            case \"OIDCCONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMERINFORMATION\",\n                    nextState: \"\",\n                });\n                break;\n            case \"SAMLCONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMERINFORMATION\",\n                    nextState: \"\"\n                });\n                break;\n            case \"IMPORTFROMFILE\":\n\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \" OIDCCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTFROMURL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"OIDCCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTSAMLFROMFILE\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAMLCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTSAMLFROMURL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAMLCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"FINALSTEP\":\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                    nextState: \"VALIDATESTEP\"\n                });\n                break;\n            case \"VALIDATESTEP\":\n                newDisplay = {...displayed};\n                newDisplay.hideValidate = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                    nextState: \"\"\n                })\n                break;\n            default:\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hidefinish: true\n                });\n\n        }\n\n    }\n\n\n    /**\n     * Handle updates when a user directly clicks on a specific step.\n     */\n    const goToStep = () => {\n\n    }\n\n\n    return (\n\n                <div className=\"flowPage\">\n                <PageHeader className=\"wizardHeader\">\n                    <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-u-mb-lg\" />\n                    <p> Manage identity provider integration for your organization </p>\n                </PageHeader>\n                <Divider/>\n\n                    <PageSection className={isConfigured ? '' : 'hiddenPage'}>\n                        <ConfiguredIDP />\n                    </PageSection>\n                    <PageSection className={(!isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                        <IDPNotSetup setupIDP={() => {setIsInit(false)}} />\n                    </PageSection>\n\n                    <PageSection className={(!isConfigured && !isInit) ? '' : 'hiddenPage'}>\n\n                    <Wizard\n                        onClose={closeWizard}\n                        isProgressive\n                    >\n\n\n                        {/* Standard customer config. Every flow requires this */}\n                        <WizardStep\n                            id={'CUSTOMERINFORMATION'}\n                            name={'Customer Information'}\n                            isHidden={displayed.hideCustomerInformation}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.CUSTINFO}\n                                    next={setNextTriggered}\n                                />\n                            }\n                        >\n\n                            <CustomerInformation\n                                updateStatus={triggerNextStep}\n                                nextClicked={nextTriggered}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation = {fieldsValidated}\n                                rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n\n                        {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                        <WizardStep\n                            id={'OIDCCONFIG'}\n                            name={'OIDC Configuration'}\n                            isHidden={displayed.hideOIDC}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.OIDCCONFIG}\n                                    next={setNextTriggered}\n                                />\n                            }>\n                                <OIDCConfig\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMFILE'}\n                            name={'Import config from file'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}>\n                                    <ImportFromFile\n                                        updateStatus={triggerNextStep}\n                                        nextClicked={nextTriggered}\n                                        resetNextClicked={setNextTriggered}\n                                        rootValidation = {fieldsValidated}\n                                        rootUserChoices={userChoices}\n                                    />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMURL'}\n                            name={'Import config from URL'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORTFROMURL}\n                                    next={setNextTriggered}\n                                />\n                            }>\n                                <ImportFromURL\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n\n\n\n\n\n                        {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                        <WizardStep\n                            id={'SAMLCONFIG'}\n                            name={'Saml Configuration'}\n                            isHidden={displayed.hideSAML}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.SAMLCONFIG}\n                                    next={setNextTriggered}\n                                />\n                            }>\n\n                                <SAMLConfig\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            name={'Import SAML from file'}\n                            id={'IMPORTSAMLFROMFILE'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                            >\n\n                                <ImportSamlFromFile\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTSAMLFROMURL'}\n                            name={'Import SAML from URL'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORTSAMLFROMURL}\n                                    next={setNextTriggered}\n                                />\n                            }>\n\n                                <ImportSamlFromURL\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n\n\n                        {/* Final steps of the process. again any selection will show the following two steps.*/}\n                        <WizardStep\n                            id={'FINALSTEP'}\n                            name={'Final Steps'}\n                            isHidden={displayed.hideFinish}\n                            footer={\n                                <SubmitFooter\n                                    userChoiceData={userChoices}\n                                />\n                            }>\n                            <URLsForUser updateStatus={triggerNextStep} redirectDomain={userChoices.current.orgDomain}/>\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'VALIDATESTEP'}\n                            name={'Test your identity provider'}\n                            isHidden={displayed.hideValidate}\n                            footer={{\n                                nextButtonText: 'Test identity provider integration',\n                                onNext: () => {\n\n\n\n                                        const encodedRedirect = encodeURIComponent(\"https://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/auth?response_type=code&client_id=account&redirect_uri=https%3A%2F%2Fsso.stage.redhat.com%2Fauth%2Frealms%2Fredhat-external%2Faccount%2Flogin-redirect&state=fd315d76-0154-4eac-bfff-d23dedf3a9cf&login=true&scope=openid&kc_idp_hint=customer-idp-b\");\n                                        // see if we can build this dynamically off of the ingihts.chrome.auth object to not need hardcoding acrossed environments\n                                        const logoutAndForwardURL = \"http://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/logout?redirect_uri=\" + encodedRedirect\n\n                                        window.open(logoutAndForwardURL /* userChoices.current.orgDomain*/,\n                                            \"IDPTest\", \"height=\"+window.outerHeight+\",width=\"+window.outerWidth)\n\n\n\n                                    //insights.chrome.auth.logout(true);\n                                    //debugger;\n                                },\n                                isNextDisabled: false,\n                                isBackDisabled: false\n                            }}\n                        >\n                            <TestProvider updateStatus={triggerNextStep} />\n                        </WizardStep>\n\n                    </Wizard>\n\n                </PageSection>\n                </div>\n\n    )\n}\n\nexport default FlowTemplate;\n","import './Identity-Provider-Integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport FlowTemplate from '../../Components/idpintegrationflows/idpFlowTemplate/flowTemplate.js'\nimport DisabledPage from \"../../Components/disabledPage/disabled-page\";\nimport NonAdminUser from '../../Components/nonAdminUser/non-admin-user';\nimport {isAdminUser}  from '../../Components/utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport TwoFactorCheck from \"../../Components/twoFactorCheck/two-factor-check\";\n\n\nconst IdentityProviderIntegration = (props) => {\n    var userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: true,\n        selfServiceIDP: <FlowTemplate />\n    })\n    var isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        insights?.chrome?.appAction?.('identity-provider-integration');\n        insights.chrome.auth.getToken().then(token => {\n            userToken = token;\n            // if the user is in fact and admin user then render TwoFactorCheck\n            if(isAdminUser(userToken) && isSelfServiceIDPEnabled){\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <FlowTemplate />\n                })\n            }\n\n            // check to see if 2fa feature flag is set. if not then render the proper error page\n            if (!isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <DisabledPage/>\n                })\n            }\n\n        })\n    }, []);\n\n\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n\n}\n\nexport default IdentityProviderIntegration\n"],"names":["props","className","Title","headingLevel","size","Text","Button","variant","onClick","window","location","href","docLink","statusURL","insights","chrome","getEnvironment","dispatch","useDispatch","useState","checked","changed","checkState","updateCheckState","loading","loadingState","updateLoadingState","pullCurrentState","fetch","method","referrerPolicy","headers","tokenData","then","response","json","data","error","console","FailureAlert","authenticationFactors","otp","required","useEffect","er","addNotification","description","title","PageSection","Form","target","component","isInline","icon","iconPosition","FormGroup","Checkbox","onChange","label","id","isChecked","Popover","position","hideOnOutsideClick","enableFlip","appendTo","document","body","maxWidth","minWidth","bodyContent","reference","getElementById","ActionGroup","event","payload","auth","getToken","token","JSON","stringify","isDisabled","isAdminUser","base64","split","replace","jsonPayload","parse","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","is_org_admin","setStateValue","value","key","stateObject","updateFunction","updatedValue","processAllInputs","selections","validations","setValidations","failureTriggered","update","Object","keys","forEach","validationKey","submittedValue","submittedType","inputType","verificationObject","input","type","status","message","verified","results","test","verifyInput","handleSelection","resetNextClicked","rootUserChoices","current","rootValidation","protocol","updateStatus","helperText","helperTextInvalid","custName","validated","nextClicked","TextInput","role","fieldid","Radio","name","setSelections","inputMethod","clientId","clientSecret","isRequired","fileData","setFileData","FileUpload","onDataChange","dataChange","xml2js","err","result","browseButtonText","importURL","filenamePlaceholder","ClipboardCopy","isReadOnly","clickTip","redirectDomain","List","ListItem","editField","toggleEditField","textValue","updateTextValue","GridItem","hidden","idValue","Flex","FlexItem","log","displayName","clientID","logoUrl","currentValues","displayConfirmationModal","setModalDisplay","customPopupHeader","Icon","Card","isCompact","Modal","ModalVariant","isOpen","header","actions","Grid","hasGutter","span","setupIDP","useWizardContext","goToNextStep","goToPrevStep","WizardFooter","valid","next","disabled","React","isLoading","setIsLoading","handleNextClick","userChoiceData","Promise","resolve","setTimeout","userChoices","useRef","isConfigured","isInit","setIsInit","fieldsValidated","currentState","previousState","nextState","flowState","setFlowState","hideCustomerInformation","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideFinish","hideValidate","displayed","setDisplayed","nextTriggered","setNextTriggered","triggerNextStep","nextStep","newDisplay","hidefinish","PageHeader","PageHeaderTitle","Divider","Wizard","onClose","isProgressive","WizardStep","isHidden","footer","CUSTINFO","OIDCCONFIG","IMPORTFROMURL","SAMLCONFIG","IMPORTSAMLFROMURL","orgDomain","nextButtonText","onNext","logoutAndForwardURL","encodeURIComponent","open","outerHeight","outerWidth","isNextDisabled","isBackDisabled","userToken","adminUser","selfServiceIDP","currentUser","updateUser","isSelfServiceIDPEnabled","useFlag","appAction"],"sourceRoot":""}