{"version":3,"file":"js/Identity-Provider-Integration.1f40c173517f537d8993.js","mappings":"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","sources":["webpack:///./src/Components/disabledPage/disabled-page.js","webpack:///./src/Components/utils/general-utils.js","webpack:///./src/Components/idpintegrationflows/firstStep/customerInformation.js","webpack:///./src/Components/idpintegrationflows/secondStep/oidcConfiguration.js","webpack:///./src/Components/idpintegrationflows/secondStep/samlConfiguration.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importFromFile.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importFromUrl.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importSamlFromFile.js","webpack:///./src/Components/idpintegrationflows/thirdStep/importSamlFromUrl.js","webpack:///./src/Components/idpintegrationflows/finalStep/urlsForUser.js","webpack:///./src/Components/idpintegrationflows/validationStep/testProvider.js","webpack:///./src/Components/idpintegrationflows/configured/idpField.js","webpack:///./src/Components/idpintegrationflows/configured/configuredIDP.js","webpack:///./src/Components/idpintegrationflows/IDPNotSetup/IDPNotSetup.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/genericFooter.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/submitFooter.js","webpack:///./src/Components/idpintegrationflows/idpFlowTemplate/flowTemplate.js","webpack:///./src/Routes/Authentication-Policy/Identity-Provider-Integration.js"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","export function isAdminUser (token) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload && jsonPayload.is_org_admin;\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value, key, stateObject, updateFunction) {\n\n    const updatedValue = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input, type, required) {\n    if (required && !input) {\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified = {};\n    let results = '';\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (selections, validations, setValidations) {\n    let failureTriggered = false;\n    const update = {};\n    Object.keys(validations).forEach(validationKey => {\n        const submittedValue = selections && selections[validationKey]\n        const submittedType = validations[validationKey].inputType\n\n        const verificationObject = verifyInput(submittedValue, submittedType, true);\n\n        if (verificationObject.status === 'error') {\n            failureTriggered = true;\n        }\n\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n\n    });\n\n    setValidations(update);\n\n    return failureTriggered;\n}\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Title,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\nimport {processAllInputs} from '../../utils/general-utils.js';\nimport PropTypes from 'prop-types';\n\nconst CustomerInformation = (props) => {\n\n    const [validations, setValidations] = useState({\n        'custName': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'protocol': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(props.rootUserChoices.current, validations, setValidations);\n\n        const failureStore = 'CUSTINFO'\n        props.rootValidation.current[failureStore] = !failureTriggered;\n\n        if (!failureTriggered && props.rootUserChoices.current.protocol) {\n            props.updateStatus(props.rootUserChoices.current.protocol);\n        }\n\n    }\n\n\n// pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">All fields are required</Text>\n                <FormGroup\n                    label=\"Identity provider display name\"\n                    helperText=\"Enter a personalized display name for your Identity Provider (IdP). It is important to use unique names for your IdP display name, since multiple Red Hat accounts can be linked to one IdP.\"\n                    helperTextInvalid={validations.custName.message}\n                    validated={props.nextClicked ? validations.custName.status : 'default'}\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                               type=\"text\" \n                               id=\"custName\" />\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) } }\n                    role=\"radiogroup\"\n                    fieldid=\"authType\"\n                    label=\"Choose identity provider protocol\"\n                    helperTextInvalid={ \"A protocol must be selected to proceed\"}\n                    validated={ props.nextClicked ? validations.protocol.status : 'default'}\n                    id=\"protocol\">\n                    <Radio name=\"authType\" id=\"protocol\" label=\"OpenID Connect\" value=\"OIDCCONFIG\"/>\n                    <Radio name=\"authType\" id=\"protocol\" label=\"Saml 2.0\" value=\"SAMLCONFIG\"/>\n                </FormGroup>\n\n            </Form>\n\n}\n\nCustomerInformation.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func,\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\nimport {processAllInputs, setStateValue} from '../../utils/general-utils.js';\nimport PropTypes from 'prop-types';\n\nconst OIDCConfiguration = (props) => {\n\n    const [selections, setSelections] = useState();\n    const [validations, setValidations] = useState({\n        'clientId': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'clientSecret': {\n            inputType: 'GENERAL',\n            status: 'default',\n            message: ''\n        },\n        'inputMethod': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(props.rootUserChoices.current, validations, setValidations);\n\n        props.rootValidation.current.OIDCCONFIG = !failureTriggered;\n\n        if (!failureTriggered && props.rootUserChoices.current.inputMethod) {\n            props.updateStatus(props.rootUserChoices.current.inputMethod);\n        }\n\n    }\n\n    return <Form>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">All fields are required</Text>\n                <FormGroup\n                    label=\"Client ID/SP entity ID\"\n                    helperText=\"The Red Hat client identifier registered within the customer identity provider. Your indentity provider generates this client ID when a Red Hat client is added\"\n                    helperTextInvalid={validations.clientId.message}\n                    validated={props.nextClicked ? validations.clientId.status : ''}\n                    onChange={(value) => { handleSelection(value) }}\n                >\n                    <TextInput\n                        onChange={(value) => setStateValue(value, \"clientId\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientId\"\n                    />\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Client Secret\"\n                    helperText=\"Enter the client secret associated with your client identifier  by your identity provider\"\n                    helperTextInvalid={validations.clientSecret.message}\n                    validated={props.nextClicked ? validations.clientSecret.status : \"\"}\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(value) => setStateValue(value, \"clientSecret\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientSecret\"\n                    />\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file or download it from a url\"\n                    helperTextInvalid={\"You must choose a method for importing your metadata\"}\n                    validated={props.nextClicked ? validations.inputMethod.status : \"\"}\n                >\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORTFROMURL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORTFROMFILE\"/>\n                </FormGroup>\n\n                \n            </Form>\n\n}\n\nOIDCConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default OIDCConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Radio,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\n\nimport React, {useState} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport {setStateValue, processAllInputs} from '../../utils/general-utils.js';\nimport PropTypes from \"prop-types\";\n\nconst SamlConfiguration = (props) => {\n\n    const [validations, setValidations] = useState({\n        'inputMethod': {\n            inputType: 'RADIO',\n            status: 'default',\n            message: ''\n        }\n    });\n\n    const handleSelection = (value) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(props.rootUserChoices.current, validations, setValidations);\n\n        props.rootValidation.current.SAMLCONFIG = !failureTriggered;\n\n        if (!failureTriggered && props.rootUserChoices.current.inputMethod) {\n            props.updateStatus(props.rootUserChoices.current.inputMethod);\n        }\n    }\n\n    return <Form>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file or download it from a url\"\n                    isRequired\n                    validated={ props.nextClicked ? validations.inputMethod.status : \"\"}\n                    helperTextInvalid=\"An input method must be chosen to proceed\"\n                >\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORTSAMLFROMURL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORTSAMLFROMFILE\"/>\n                </FormGroup>\n            </Form>\n\n}\n\nSamlConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup,\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\nimport PropTypes from \"prop-types\";\n\nconst ImportFromFile = (props) => {\n\n    const [fileData, setFileData] = useState(\"\");\n\n\n    /**\n     *\n     */\n    const handleFileData = (data) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(err);\n            }\n            else if (result) {\n                props.updateStatus(\"FINALSTEP\");\n                props.rootUserChoices.current.configFileData = result;\n\n                /*\n                 * may need to submit a query at this point to the api to validate that the file chosen is good to go\n                 * alternatively a validation step could be added locally to check for the existence of required fields\n                 */\n                props.rootValidation.current.IMPORTFROMFILE = true;\n            }\n        })\n    }\n\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload\n                        value={fileData.toString()}\n                        id=\"text-file-with-edits-allowed\"\n                        type=\"text\"\n                        onDataChange={(dataChange) => { handleFileData(dataChange) }}\n                        browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">An XML formatted file detailing the configuration of your IDP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n            </Form>\n\n}\n\nImportFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport {processAllInputs} from '../../utils/general-utils.js';\nimport PropTypes from \"prop-types\";\n\nconst ImportFromURL = (props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(props.rootUserChoices.current, validations, setValidations);\n\n        props.rootValidation.current.IMPORTFROMURL = !failureTriggered;\n\n        if (!failureTriggered) {\n            props.updateStatus(\"FINALSTEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\"\n                    helperText=\"import metadata from a remote identity provider discovery descriptor\"\n                    helperTextInvalid={validations.importURL.message}\n                    validated={props.nextClicked ? validations.importURL.status : 'default'}\n                    onChange={(value) => { handleSelection(value) }}>\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                    />\n                </FormGroup>\n            </Form>\n\n}\n\nImportFromURL.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromURL;\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup, Title, Text\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from \"xml2js\";\nimport PropTypes from 'prop-types';\n\nconst ImportSamlFromFile = (props) => {\n\n\n    const [fileData, setFileData] = useState(\"\");\n\n    /**\n     *\n     */\n    const handleFileData = (data) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(\"failed to parse xml file: \" + err);\n            }\n            else if (result) {\n                props.updateStatus(\"FINALSTEP\");\n                props.rootUserChoices.current.configFileData = result;\n\n                props.rootValidation.current.IMPORTSAMLFROMFILE = true;\n            }\n        })\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from file</Title>\n                <FormGroup label=\"File Upload\" isRequired >\n                    <FileUpload value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    filenamePlaceholder=\"Drag and drop a file or upload one\"\n                    onDataChange={(dataChange) => { handleFileData(dataChange) }}\n                    browseButtonText=\"Upload\"\n                    />\n                </FormGroup>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">A XML formatted file detailing the configuration of your IDP</Text>\n            </Form> \n\n}\n\nImportSamlFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromFile;\n","// step three, choice 6 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup, Title\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport {processAllInputs} from '../../utils/general-utils.js';\nimport PropTypes from \"prop-types\";\n\nconst ImportSamlFromURL = (props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        props.resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        props.rootUserChoices.current[value.target.id] = value.target.value;\n\n        /*\n         * update the validation settings. It is expected that the id's used in the validation object matches\n         * the id's used on the elements.\n         */\n        const failureTriggered = processAllInputs(props.rootUserChoices.current, validations, setValidations);\n\n        props.rootValidation.current.IMPORTSAMLFROMURL = !failureTriggered;\n\n        if (!failureTriggered) {\n            props.updateStatus(\"FINALSTEP\");\n        }\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\"\n                    helperText=\"import metadata from a remote identity provider discovery descriptor\"\n                    helperTextInvalid={validations.importURL.message}\n                    validated={props.nextClicked ? validations.importURL.status : 'default'}\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                    />\n                </FormGroup>\n            </Form>\n\n}\n\nImportSamlFromURL.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromURL;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Form,\n    FormGroup,\n    Title,\n    Text,\n    ClipboardCopy\n} from '@patternfly/react-core';\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImportSamlFromURL = (props) => {\n\n    useEffect(() => {\n        props.updateStatus(\"VALIDATESTEP\");\n    }, [])\n\n    return <Form>\n                <Title headingLevel=\"h2\">Configure URLs</Title>\n                <Text className=\"pf-u-color-400 pf-u-font-size-sm\">Some Identity Provider Services require additional\n                    configuration when enabling third party single sign on. Please review the following information and\n                    verify that these are filled in where required in your company IDP.</Text>\n                <FormGroup label=\"Identifier (Entity ID)\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Sign on URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        https://sso.redhat.com/auth/realms/redhat-external/protocol/saml\n                    </ClipboardCopy>\n                </FormGroup>\n\n                <FormGroup label=\"Redirect URL or ACS (Assertion Consumption Service) URL\">\n                    <ClipboardCopy isReadOnly clickTip=\"copied\">\n                        {\"https://sso.redhat.com/auth/realms/redhat-external/broker/\" + props.redirectDomain + \"/endpoint\"}\n                    </ClipboardCopy>\n                </FormGroup>\n\n            </Form>\n\n}\n\nImportSamlFromURL.propTypes = {\n    updateStatus: PropTypes.func,\n    redirectDomain: PropTypes.string\n}\n\nexport default ImportSamlFromURL;\n","// IDP test instructions\n\nimport {\n    Text,\n    Form,\n    List,\n    ListItem,\n    Button,\n    Title\n} from '@patternfly/react-core';\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nconst TestProvider = (props) => {\n\n    useEffect(() => {\n        props.updateStatus(\"VALIDATESTEP\");\n    }, [])\n\n\n    return <Form>\n        <Title headingLevel=\"h2\">Test your identity provider</Title>\n        <Text className=\"pf-u-color-400 pf-u-font-size-sm\">Test your identity provider integration before enabling it for your entire organization</Text>\n        <List>\n            <ListItem>Click the button to initiate login redirect to your identity provider</ListItem>\n            <ListItem>Log in with your identity provider user your company Single Sign-on credentials</ListItem>\n            <ListItem>You will be redirected back to identity provider integration configuration where you can then enable it for your entire organization</ListItem>\n        </List>\n\n        <Text>If you encounter any errors or are having trouble, contact\n            <Button variant=\"link\" href={\"www.google.com\"} target=\"_blank\" component=\"a\" isInline className=\"pf-u-ml-xs\">\n            CustomerService\n            </Button>\n        </Text>\n    </Form>\n\n}\n\nTestProvider.propTypes = {\n    updateStatus: PropTypes.func\n}\n\nexport default TestProvider;\n","import React, { useState } from 'react';\nimport {Button, Flex, FlexItem, GridItem, Text, TextInput, Title} from \"@patternfly/react-core\";\nimport EditIcon from \"@patternfly/react-icons/dist/esm/icons/edit-icon\";\nimport AcceptIcon from \"@patternfly/react-icons/dist/esm/icons/check-icon\";\nimport CancelIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport PropTypes from \"prop-types\";\n\nconst IDPField = (props) => {\n\n    // handles if the use has chosen to edit this field. toggles between the two GridItem's\n    const [editField, toggleEditField] = useState(false);\n    // handles the text input changes\n    const [textValue, updateTextValue] = useState(\"\");\n\n    /**\n     * called by the check button, it needs to submit the data change and re-trigger the toggle state.\n     */\n    const handleAcceptClick = () => {\n        console.log(\"triggered submit value: \" + textValue);\n        toggleEditField(false)\n    }\n\n    return (<div>\n                <GridItem hidden={editField}>\n                    <Title headingLevel=\"h4\">{props.title}\n                        <Button\n                            variant=\"link\"\n                            onClick={() => { toggleEditField(true) } }\n                            isInline\n                            icon={<EditIcon />}\n                            iconPosition=\"right\"\n                            className=\"pf-u-ml-xs  editIcon\">\n\n                        </Button>\n                    </Title>\n                    <Text id={props.idValue + \"-current\"}>{props.current}</Text>\n                </GridItem>\n                <GridItem hidden={!editField}>\n                    <Title headingLevel=\"h4\">{props.title}</Title>\n                    <Flex>\n                        <FlexItem><TextInput id={props.idValue} value={textValue} onChange={(update) => { updateTextValue(update) } }></TextInput></FlexItem>\n                        <FlexItem><Button variant=\"link\" onClick={handleAcceptClick} isInline icon={<AcceptIcon />} iconPosition=\"right\" className=\"pf-u-ml-xs  editIcon\"></Button></FlexItem>\n                        <FlexItem>\n                            <Button\n                                variant=\"link\"\n                                onClick={() => { toggleEditField(false) }}\n                                isInline\n                                icon={<CancelIcon />}\n                                iconPosition=\"right\"\n                                className=\"pf-u-ml-xs  editIcon\">\n\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </GridItem>\n            </div>\n    )\n}\n\nIDPField.propTypes = {\n    title: PropTypes.string,\n    idValue: PropTypes.string,\n    current: PropTypes.string,\n}\n\nexport default IDPField;\n","import './configuredIDP.scss'\nimport React, { useState } from 'react';\nimport {\n    FormGroup,\n    Button,\n    Title,\n    Card,\n    Grid,\n    Modal,\n    ModalVariant,\n    Icon,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\n\nimport IDPField from \"./idpField\";\n\nimport Exclamation from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\"\n\nconst ConfiguredIDP = () => {\n\n    // flag to control which values get displayed\n\n    // will use this in the future. suppress linter for now\n    // eslint-disable-next-line no-unused-vars\n    const [currentValues, setCurrentValues] = useState({\n        displayName: \"Test Company\",\n        clientID: \"awesomesauce.com\",\n        clientSecret: \"*******\",\n        logoUrl: \"awesomesauce.com/logo\"\n    });\n    const [displayConfirmationModal, setModalDisplay] = useState(false);\n\n    /**\n     * Triggered by the confirm button in the popup modal. This will submit the query to enable the third party idp\n     */\n    const onConfirm = () => {\n        console.log(\"Enable IDP\");\n    }\n\n    /**\n     * Triggered by the cancel button in the modal, it will simply drop the modal\n     */\n    const onCancel = () => {\n        setModalDisplay(false);\n    }\n\n    /**\n     * Triggered by the Enable button on the root of this page. it will trigger the confirmation popup.\n     */\n    const onEnable = () => {\n        setModalDisplay(true);\n    }\n\n    /**\n     * Triggered by the delete button on the root page, this button will fire off the query to the api responsible for\n     * removing the existing configuration.\n     */\n    const onDelete = () => {\n        console.log(\"Delete this IDP config\");\n    }\n\n    /**\n     * Custom header used for the modal popup to fulfill target design including icon\n     */\n    const customPopupHeader = (\n        <React.Fragment>\n            <Flex>\n                <FlexItem>\n                    <Icon status=\"warning\"><Exclamation/></Icon>\n                </FlexItem>\n                <FlexItem>\n                    <Title id=\"modal-custom-header-label\" headingLevel=\"h1\">\n                        Enable Identity Provider for your entire organization?\n                    </Title>\n                </FlexItem>\n            </Flex>\n\n        </React.Fragment>\n    )\n\n    return (\n                <Card className=\"configuredCard\" isCompact={false}>\n                    <Modal\n                        variant={ModalVariant.small}\n                        isOpen={displayConfirmationModal}\n                        title=\"Enable Identity Provider for your entire organization?\"\n                        header={customPopupHeader}\n                        aria-labelledby=\"modal-custom-header-label\"\n                        aria-describedby=\"modal-custom-header-description\"\n                        actions={[\n                            <Button key=\"confirm\" onClick={onConfirm}>Confirm</Button>,\n                            <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        ]}\n                    >\n                        Are you sure you wish to enable Third Party SSO for your entire organization?\n                    </Modal>\n                    <Grid\n                        hasGutter\n                        span={12}>\n\n                        {/* Display Name */}\n                        <Grid hasGutter span={6}>\n                            <IDPField idValue={\"displayName\"} title={\"Display Name\"} current={currentValues.displayName} />\n                        </Grid>\n\n\n                        <Grid hasGutter span={6}>\n                            {/* Client Id  */}\n                            <IDPField idValue={\"clientID\"} title={\"Client ID\"} current={currentValues.clientID} />\n\n                            {/* Client Secret */}\n                            <IDPField idValue={\"clientSecret\"} title={\"Client Secret\"} current={currentValues.clientSecret} />\n                        </Grid>\n\n                        {/* Logo URL */}\n                        <Grid hasGutter span={6}>\n                            <IDPField idValue={\"logourl\"} title={\"Logo URL\"} current={currentValues.logoUrl}/>\n                        </Grid>\n\n                    </Grid>\n\n                    {/* Action buttons */}\n                    <FormGroup className=\"buttonGroup\">\n                        <Button variant=\"primary\" onClick={onEnable}>Enable</Button>\n                        <Button variant=\"link\" onClick={onDelete}>Delete</Button>\n                    </FormGroup>\n\n                </Card>\n\n    )\n}\n\nexport default ConfiguredIDP;\n","import './IDPNotSetup.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from \"prop-types\";\n\nconst IDPNotSetup = (props) => {\n\n    return <div className=\"notSetupDiv\">\n                <CubesIcon className=\"cubesIcon\"/>\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">Identity provider not setup</Title>\n                <Text className=\"pf-u-mt-md\">You haven&apos;t set up an identity provider for your organization</Text>\n                <Button className=\"pf-u-mt-lg\" variant=\"primary\" onClick={props.setupIDP}>Set up an identity provider</Button>\n            </div>\n}\n\nIDPNotSetup.propTypes = {\n    setupIDP: PropTypes.func\n}\n\nexport default IDPNotSetup;\n","import React from 'react';\nimport {\n    Button\n} from '@patternfly/react-core';\n\nimport {\n    WizardFooterWrapper,\n    useWizardContext,\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\nimport PropTypes from 'prop-types';\n\nconst GenericFooter = (props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (props.valid) {\n            goToNextStep();\n        }\n        else {\n            props.next(true);\n        }\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} disabled={props.valid}>Next</Button>\n            <Button variant=\"secondary\" onClick={goToPrevStep}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nGenericFooter.propTypes = {\n    valid: PropTypes.bool,\n    next: PropTypes.func\n}\n\nexport default GenericFooter;\n","import React from 'react';\nimport {\n    Button\n} from '@patternfly/react-core';\n\nimport {\n    WizardFooterWrapper,\n    useWizardContext,\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\nimport PropTypes from \"prop-types\";\n\nconst SubmitFooter = (props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = async () => {\n        const stringifySpace = 2;\n        console.log(\"Submitting with this data: \" + JSON.stringify(props.userChoiceData, null, stringifySpace));\n\n        setIsLoading(true);\n        const timeoutTime = 2000\n        // eslint-disable-next-line no-promise-executor-return\n        await new Promise(resolve => setTimeout(resolve, timeoutTime));\n        setIsLoading(false);\n        goToNextStep();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} isLoading={isLoading} >Next</Button>\n            <Button variant=\"secondary\" onClick={goToPrevStep}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\n\nSubmitFooter.propTypes = {\n    userChoiceData: PropTypes.object,\n}\n\nexport default SubmitFooter;\n","import './flowTemplate.scss'\nimport React, { useState, useRef } from 'react';\nimport {\n    Divider,\n    PageSection\n} from '@patternfly/react-core';\n\nimport {\n    Wizard,\n    WizardStep,\n\n} from '@patternfly/react-core/dist/esm/next/components/Wizard';\n\nimport {\n    PageHeader,\n    PageHeaderTitle,\n  } from '@redhat-cloud-services/frontend-components/PageHeader';\n\n  // root flow\n  import CustomerInformation from '../firstStep/customerInformation.js';\n\n  // second step\n  import OIDCConfig from '../secondStep/oidcConfiguration.js';\n  import SAMLConfig from '../secondStep/samlConfiguration.js';\n  \n  // third step\n  import ImportFromFile from '../thirdStep/importFromFile.js';\n  import ImportFromURL from '../thirdStep/importFromUrl.js';\n  import ImportSamlFromFile from '../thirdStep/importSamlFromFile.js';\n  import ImportSamlFromURL from '../thirdStep/importSamlFromUrl.js';\n\n  // final step\n  import URLsForUser from '../finalStep/urlsForUser.js';\n\n  // test step\n  import TestProvider from '../validationStep/testProvider.js';\n\n  import ConfiguredIDP from '../configured/configuredIDP';\n  import IDPNotSetup from \"../IDPNotSetup/IDPNotSetup\";\n\n  import GenericFooter from './genericFooter';\n  import SubmitFooter from './submitFooter';\n\n// manage a flow state\n\n\n// eslint-disable-next-line max-statements\nconst FlowTemplate = () => {\n\n    // intendedto serve as the main aggregate of data that gets sent to the server\n    const userChoices = useRef({});\n\n    // Is the admin's account been configured with an idp. If so display the management screen.\n    // eslint-disable-next-line no-unused-vars\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isInit, setIsInit] = useState(true);\n\n    // handle the present validation state of the various steps.\n    const fieldsValidated = useRef({\n        \"CUSTINFO\": false,\n        \"OIDCCONFIG\": false,\n        \"SAMLCONFIG\": false,\n        \"IMPORTFROMFILE\": false,\n        \"IMPORTFROMURL\": false,\n        \"IMPORTSAMLFROMFILE\": false,\n        \"IMPORTSAMLFROMURL\": false\n    })\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available. \n     */\n    const [flowState, setFlowState] = useState({\n        currentState: \"CUSTOMERINFORMATION\",\n        previousState: \"\",\n        nextState: \"\",\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n    const closeWizard = () => {\n        console.log(\"close fancy window\");\n    }\n\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideCustomerInformation: false,\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideFinish: true,\n        hideValidate: true\n    })\n\n    // used to communicated between the footer and currently displayed window.\n    const [nextTriggered, setNextTriggered] = useState(false);\n\n    const triggerNextStep = (nextStep) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch (nextStep) {\n            case \"OIDCCONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMERINFORMATION\",\n                    nextState: \"\",\n                });\n                break;\n            case \"SAMLCONFIG\":\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"CUSTOMERINFORMATION\",\n                    nextState: \"\"\n                });\n                break;\n            case \"IMPORTFROMFILE\":\n\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \" OIDCCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTFROMURL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"OIDCCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTSAMLFROMFILE\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAMLCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"IMPORTSAMLFROMURL\":\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: \"SAMLCONFIG\",\n                    nextState: \"FINALSTEP\"\n                });\n                break;\n            case \"FINALSTEP\":\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                    nextState: \"VALIDATESTEP\"\n                });\n                break;\n            case \"VALIDATESTEP\":\n                newDisplay = {...displayed};\n                newDisplay.hideValidate = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                    nextState: \"\"\n                })\n                break;\n            default:\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hidefinish: true\n                });\n\n        }\n\n    }\n\n    return (\n\n                <div className=\"flowPage\">\n                <PageHeader className=\"wizardHeader\">\n                    <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-u-mb-lg\" />\n                    <p> Manage identity provider integration for your organization </p>\n                </PageHeader>\n                <Divider/>\n\n                    <PageSection className={isConfigured ? '' : 'hiddenPage'}>\n                        <ConfiguredIDP />\n                    </PageSection>\n                    <PageSection className={(!isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                        <IDPNotSetup setupIDP={() => { setIsInit(false) }} />\n                    </PageSection>\n\n                    <PageSection className={(!isConfigured && !isInit) ? '' : 'hiddenPage'}>\n\n                    <Wizard\n                        onClose={closeWizard}\n                        isProgressive\n                    >\n\n\n                        {/* Standard customer config. Every flow requires this */}\n                        <WizardStep\n                            id={'CUSTOMERINFORMATION'}\n                            name={'Customer Information'}\n                            isHidden={displayed.hideCustomerInformation}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.CUSTINFO}\n                                    next={setNextTriggered}\n                                />\n                            }\n                        >\n\n                            <CustomerInformation\n                                updateStatus={triggerNextStep}\n                                nextClicked={nextTriggered}\n                                resetNextClicked={setNextTriggered}\n                                rootValidation = {fieldsValidated}\n                                rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n\n                        {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                        <WizardStep\n                            id={'OIDCCONFIG'}\n                            name={'OIDC Configuration'}\n                            isHidden={displayed.hideOIDC}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.OIDCCONFIG}\n                                    next={setNextTriggered}\n                                />\n                            }>\n                                <OIDCConfig\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMFILE'}\n                            name={'Import config from file'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}>\n                                    <ImportFromFile\n                                        updateStatus={triggerNextStep}\n                                        nextClicked={nextTriggered}\n                                        resetNextClicked={setNextTriggered}\n                                        rootValidation = {fieldsValidated}\n                                        rootUserChoices={userChoices}\n                                    />\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTFROMURL'}\n                            name={'Import config from URL'}\n                            isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORTFROMURL}\n                                    next={setNextTriggered}\n                                />\n                            }>\n                                <ImportFromURL\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n                        </WizardStep>\n\n                        {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                        <WizardStep\n                            id={'SAMLCONFIG'}\n                            name={'Saml Configuration'}\n                            isHidden={displayed.hideSAML}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.SAMLCONFIG}\n                                    next={setNextTriggered}\n                                />\n                            }>\n\n                                <SAMLConfig\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            name={'Import SAML from file'}\n                            id={'IMPORTSAMLFROMFILE'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                            >\n\n                                <ImportSamlFromFile\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'IMPORTSAMLFROMURL'}\n                            name={'Import SAML from URL'}\n                            isHidden={!(!displayed.hideSAML && !displayed.hideImportFromURL)}\n                            footer={\n                                <GenericFooter\n                                    valid={fieldsValidated.current.IMPORTSAMLFROMURL}\n                                    next={setNextTriggered}\n                                />\n                            }>\n\n                                <ImportSamlFromURL\n                                    updateStatus={triggerNextStep}\n                                    nextClicked={nextTriggered}\n                                    resetNextClicked={setNextTriggered}\n                                    rootValidation = {fieldsValidated}\n                                    rootUserChoices={userChoices}\n                                />\n\n                        </WizardStep>\n\n                        {/* Final steps of the process. again any selection will show the following two steps.*/}\n                        <WizardStep\n                            id={'FINALSTEP'}\n                            name={'Final Steps'}\n                            isHidden={displayed.hideFinish}\n                            footer={\n                                <SubmitFooter\n                                    userChoiceData={userChoices}\n                                />\n                            }>\n                            <URLsForUser updateStatus={triggerNextStep} redirectDomain={userChoices.current.orgDomain}/>\n                        </WizardStep>\n\n                        <WizardStep\n                            id={'VALIDATESTEP'}\n                            name={'Test your identity provider'}\n                            isHidden={displayed.hideValidate}\n                            footer={{\n                                nextButtonText: 'Test identity provider integration',\n                                onNext: () => {\n\n                                        const encodedRedirect = encodeURIComponent(\"https://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/auth?response_type=code&client_id=account&redirect_uri=https%3A%2F%2Fsso.stage.redhat.com%2Fauth%2Frealms%2Fredhat-external%2Faccount%2Flogin-redirect&state=fd315d76-0154-4eac-bfff-d23dedf3a9cf&login=true&scope=openid&kc_idp_hint=customer-idp-b\");\n                                        // see if we can build this dynamically off of the ingihts.chrome.auth object to not need hardcoding acrossed environments\n                                        const logoutAndForwardURL = \"http://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/logout?redirect_uri=\" + encodedRedirect\n\n                                        window.open(logoutAndForwardURL /* userChoices.current.orgDomain*/,\n                                            \"IDPTest\", \"height=\" + window.outerHeight + \",width=\" + window.outerWidth)\n\n                                },\n                                isNextDisabled: false,\n                                isBackDisabled: false\n                            }}\n                        >\n                            <TestProvider updateStatus={triggerNextStep} />\n                        </WizardStep>\n\n                    </Wizard>\n\n                </PageSection>\n                </div>\n\n    )\n}\n\nexport default FlowTemplate;\n","import './Identity-Provider-Integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport FlowTemplate from '../../Components/idpintegrationflows/idpFlowTemplate/flowTemplate.js'\nimport DisabledPage from \"../../Components/disabledPage/disabled-page\";\nimport {isAdminUser} from '../../Components/utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\n\n\nconst IdentityProviderIntegration = () => {\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: true,\n        selfServiceIDP: <FlowTemplate />\n    })\n    const isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        // eslint-disable-next-line no-undef\n        insights?.chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        insights.chrome.auth.getToken().then(token => {\n            userToken = token;\n            // if the user is in fact and admin user then render TwoFactorCheck\n            if (isAdminUser(userToken) && isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <FlowTemplate />\n                })\n            }\n\n            // check to see if 2fa feature flag is set. if not then render the proper error page\n            if (!isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <DisabledPage/>\n                })\n            }\n\n        })\n    }, []);\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n\n}\n\nexport default IdentityProviderIntegration\n"],"names":["className","Title","headingLevel","size","Text","isAdminUser","token","base64","split","replace","jsonPayload","JSON","parse","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","is_org_admin","setStateValue","value","key","stateObject","updateFunction","updatedValue","processAllInputs","selections","validations","setValidations","failureTriggered","update","Object","keys","forEach","validationKey","submittedValue","submittedType","inputType","verificationObject","input","type","required","status","message","verified","results","test","verifyInput","CustomerInformation","props","useState","handleSelection","resetNextClicked","rootUserChoices","current","target","id","rootValidation","protocol","updateStatus","Form","FormGroup","label","helperText","helperTextInvalid","custName","validated","nextClicked","onChange","TextInput","role","fieldid","Radio","name","propTypes","PropTypes","OIDCConfiguration","setSelections","OIDCCONFIG","inputMethod","clientId","clientSecret","SamlConfiguration","SAMLCONFIG","isRequired","ImportFromFile","fileData","setFileData","FileUpload","onDataChange","dataChange","data","xml2js","err","result","console","error","configFileData","IMPORTFROMFILE","browseButtonText","ImportFromURL","importURL","IMPORTFROMURL","ImportSamlFromFile","filenamePlaceholder","IMPORTSAMLFROMFILE","ImportSamlFromURL","IMPORTSAMLFROMURL","useEffect","ClipboardCopy","isReadOnly","clickTip","redirectDomain","TestProvider","List","ListItem","Button","variant","href","component","isInline","IDPField","editField","toggleEditField","textValue","updateTextValue","GridItem","hidden","title","onClick","icon","iconPosition","idValue","Flex","FlexItem","log","displayName","clientID","logoUrl","currentValues","displayConfirmationModal","setModalDisplay","customPopupHeader","Icon","Card","isCompact","Modal","ModalVariant","isOpen","header","actions","Grid","hasGutter","span","IDPNotSetup","setupIDP","GenericFooter","useWizardContext","goToNextStep","goToPrevStep","WizardFooter","valid","next","disabled","SubmitFooter","React","isLoading","setIsLoading","handleNextClick","stringify","userChoiceData","Promise","resolve","setTimeout","userChoices","useRef","isConfigured","isInit","setIsInit","fieldsValidated","currentState","previousState","nextState","flowState","setFlowState","hideCustomerInformation","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideFinish","hideValidate","displayed","setDisplayed","nextTriggered","setNextTriggered","triggerNextStep","nextStep","newDisplay","hidefinish","PageHeader","PageHeaderTitle","Divider","PageSection","Wizard","onClose","isProgressive","WizardStep","isHidden","footer","CUSTINFO","orgDomain","nextButtonText","onNext","logoutAndForwardURL","encodeURIComponent","open","outerHeight","outerWidth","isNextDisabled","isBackDisabled","userToken","adminUser","selfServiceIDP","currentUser","updateUser","isSelfServiceIDPEnabled","useFlag","insights","chrome","appAction","auth","getToken","then"],"sourceRoot":""}