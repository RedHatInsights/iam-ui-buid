{"version":3,"file":"js/Identity-Provider-Integration.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/DisabledPage/disabled-page.js","webpack:///./src/Components/NonAdminUser/non-admin-idp.tsx","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/idp-response-types.ts","webpack:///./src/Apps/IdpSelfService/Constants/flow-step.ts","webpack:///./src/Apps/IdpSelfService/IdpNotSetup/choose-idp-type.tsx","webpack:///./src/Apps/IdpSelfService/IdpNotSetup/idp-not-setup.tsx","webpack:///./src/Apps/IdpSelfService/ApiClient/idp-controller.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/validation-context.tsx","webpack:///./src/Apps/IdpSelfService/FirstStep/customer-information.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/oidc-configuration.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/saml-configuration.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-url.tsx","webpack:///./src/Utils/message-formatter-utils.ts","webpack:///./src/Apps/IdpSelfService/Constants/saml-metadata-constants.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/idp-request-types.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-messages.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-file.tsx","webpack:///./src/Utils/xml-utils.ts","webpack:///./src/Apps/IdpSelfService/Constants/saml-helper-text-messages.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-manual.tsx","webpack:///./src/Apps/IdpSelfService/FinalStep/urls-for-user.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/generic-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/submit-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/finalize-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/flow-template.tsx","webpack:///./src/Apps/IdpSelfService/Constants/oidc-helper-text-messages.tsx","webpack:///./src/Apps/IdpSelfService/ProviderForms/oidc-form.tsx","webpack:///./src/Apps/IdpSelfService/Configured/disable-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/IdpTesting/idp-testing-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/delete-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/Constants/idp-display-names.ts","webpack:///./src/Apps/IdpSelfService/Constants/idp-common-messages.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-oidc-idp.tsx","webpack:///./src/Apps/IdpSelfService/ProviderForms/saml-form.tsx","webpack:///./src/Apps/IdpSelfService/ProviderForms/saml-static-content.tsx","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/messages-context.ts","webpack:///./src/Apps/IdpSelfService/Constants/idpDisplayNames.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/messaging-functions.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-saml-idp.tsx","webpack:///./src/Components/AuditInfo/formatters/simple-text.ts","webpack:///./src/Components/AuditInfo/audit-info.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-idp.tsx","webpack:///./src/Apps/IdpSelfService/ProviderForms/oidc-static-content.tsx","webpack:///./src/Apps/IdpSelfService/Creation/create-oidc-idp.tsx","webpack:///./src/Apps/IdpSelfService/Creation/create-saml-idp.tsx","webpack:///./src/Apps/IdpSelfService/IDPSelector/Idp-Selector.tsx","webpack:///./src/Routes/AuthenticationPolicy/identity-provider-integration.tsx","webpack:///./src/Utils/general-utils.ts"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","import './non-admin-user.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminIDP = () => {\n\n    const triggerRedirect = () => {\n        window.location.href = \"/iam/my-user-access\";\n    }\n    const myUserAccessLink = \"/iam/my-user-access\";\n\n    return <div className=\"nonAdminDiv\">\n                <LockIcon className=\"lockIcon\" />\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">Access permissions needed</Title>\n                <Text className=\"pf-v5-u-mt-lg\">\n                    To access Identity Provider Integration, ask your organization administrator(s) to adjust your permissions,\n                    or visit <Button variant=\"link\" href={myUserAccessLink} target={\"_blank\"} component=\"a\" isInline>My User Access</Button> to learn more about your permissions\n                </Text>\n                <Button onClick={triggerRedirect} className=\"pf-v5-u-mt-lg\">Return to home page</Button>\n            </div>\n}\n\nexport default NonAdminIDP;\n","export interface IdpResponseData {\n    providerId: string;\n    idpAlias: string;\n    displayName: string;\n    enabled: boolean;\n    createdDate: string;\n    lastUpdatedDate: string;\n    lastUpdatedBy: string;\n    error?: string;\n    fields?: string[];\n}\n\nexport const IdpResponseDataInitialState =\n    {idpAlias: '', displayName: '', enabled: false, providerId: '', createdDate: '', lastUpdatedDate: '', lastUpdatedBy: '' }\n\nexport interface SamlResponseData extends IdpResponseData {\n    identityProviderEntityId: string;\n    authenticationRequestsUrl: string;\n    x509Certificate: string;\n    serviceProviderEntityId: string;\n}\n\nexport interface OidcResponseData extends IdpResponseData {\n    issuer: string;\n    clientId: string;\n    clientSecret: string;\n    authorizationUrl: string;\n    tokenUrl: string;\n    publicKey: string;\n    publicKeyId: string;\n}\n\nexport interface errorResponseData {\n    [key: string]: string;\n}\n","export class FlowStep {\n\n    public static readonly OIDC_CONFIG = 'OIDC_CONFIG';\n\n    public static readonly SAML_CONFIG = 'SAML_CONFIG';\n\n    public static readonly IMPORT_FROM_FILE = 'IMPORT_FROM_FILE';\n\n    public static readonly IMPORT_FROM_URL = 'IMPORT_FROM_URL';\n\n    public static readonly IMPORT_SAML_FROM_FILE = 'IMPORT_SAML_FROM_FILE';\n\n    public static readonly IMPORT_SAML_FROM_URL = 'IMPORT_SAML_FROM_URL';\n\n    public static readonly IMPORT_SAML_MANUALLY = 'IMPORT_SAML_MANUALLY';\n\n    public static readonly FINAL_STEP = 'FINAL_STEP';\n\n    public static readonly CUSTOMER_INFORMATION = 'CUSTOMER_INFORMATION';\n\n}\n","import React, {useState, useRef, useEffect} from 'react';\nimport { Card, CardBody, CardFooter, CardHeader, Gallery} from \"@patternfly/react-core\";\nimport {FlowStep} from '../Constants/flow-step';\n\ninterface Props {\n    configTypeChosen: Function\n}\n\nconst ChooseIdpType = ({configTypeChosen}: Props) => {\n\n    return (\n        <div>\n            <Gallery hasGutter>\n\n                <Card isClickable={true} onClick={() => { configTypeChosen(FlowStep.SAML_CONFIG) } }>\n                    <CardHeader>\n                        <h4>SAML</h4>\n                    </CardHeader>\n                    <CardBody>\n                        <p>Awesome description about why SAML is super amazingly cool</p>\n                    </CardBody>\n                    <CardFooter>\n                        <button>\n                            Use SAML\n                        </button>\n                    </CardFooter>\n                </Card>\n\n                <Card onClick={() => { configTypeChosen(FlowStep.OIDC_CONFIG) } }>\n                    <CardHeader>\n                        <h4>OIDC</h4>\n                    </CardHeader>\n                    <CardBody>\n                        <p>Awesome description about why OIDC is significantly easier</p>\n                    </CardBody>\n                    <CardFooter>\n                        <button>\n                            Use OIDC\n                        </button>\n                    </CardFooter>\n                </Card>\n            </Gallery>\n        </div>\n    )\n}\n\nChooseIdpType.propTypes = {\n    configTypeChosen: Function\n}\n\n\nexport default ChooseIdpType;\n","import './idp-not-setup.scss'\nimport React, {useState} from 'react';\nimport {\n    Title,\n    Text,\n    Button, Icon\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport PropTypes from \"prop-types\";\nimport ChooseIdpType from \"./choose-idp-type\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {FlowStep} from \"../Constants/flow-step\";\n\ninterface Props{\n    configChosen: Function,\n}\n\nconst IdpNotSetup = ({configChosen}: Props) => {\n\n    const [showProviderTypeOptions, setShowProviderTypeOptions] = useState(false);\n    const isM3Enabled = useFlag('iamconsole.IDPIntegration.m3');\n\n    const handleM3Enabled = () => {\n        if (isM3Enabled) {\n            setShowProviderTypeOptions(true)\n        } else {\n            configChosen(FlowStep.SAML_CONFIG)\n        }\n    }\n\n    /**\n     * this is just a conditional rendering function that determines if we display the init page or the selection page\n     */\n    const renderStep = () => {\n        if (!showProviderTypeOptions) {\n            return (\n                <div className=\"notSetupDiv\">\n                    <CubesIcon className=\"cubesIcon\"/>\n                    <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">No Identity Providers are currently configured</Title>\n                    <Text className=\"pf-v5-u-mt-md\">Your organization has not integrated an identity provider. More information is available <Button variant=\"link\" target=\"_blank\" href=\"https://access.redhat.com/articles/7093475\" component=\"a\" isInline>here</Button>.</Text>\n                    <Text><Icon status=\"info\" isInline><InfoCircleIcon /></Icon> Configure your identity provider, test and enable immediately, or return and enable when you&apos;re ready.</Text>\n                    <Button variant=\"primary\" onClick={ () => handleM3Enabled()}>Integrate an identity provider</Button>\n                </div>\n            )\n        }\n        return (\n            <ChooseIdpType configTypeChosen={configChosen}/>\n        )\n    }\n\n    return renderStep();\n}\n\nIdpNotSetup.propTypes = {\n    configChosen: PropTypes.func\n}\n\nexport default IdpNotSetup;\n","import { getSSOApiUrl } from \"../../../Utils/general-utils\";\nimport { SubmittableChoices } from \"../CommonInterfaces/user-choices\";\nimport { ChromeAPI } from \"@redhat-cloud-services/types\";\nimport { getOrgId } from '../../../Utils/general-utils';\n\nfunction getSSOIdpApiUrl(chromeApi: ChromeAPI, specifier?: String) {\n    let target;\n    if (specifier) {\n        target = `apis/organizations/v1/identity-providers/${specifier}`;\n    } else {\n        target = `apis/organizations/v1/identity-providers`;\n    }\n\n    return getSSOApiUrl(chromeApi, target);\n}\n\nexport async function apiGetIdp(chromeApi: ChromeAPI): Promise<Response> {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const response = await fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Fetch failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiCreateIdp(chromeApi: ChromeAPI, createIdp: SubmittableChoices, callback: Function) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'POST',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(createIdp)\n        }).then((res) => {\n            res.json().then((body) => {\n                // check for error response\n                if (body.error) {\n                    const errorString = `${body.error_description}`;\n                    callback(body);\n                    throw new Error(errorString);\n                }\n                else {\n                    callback(body);\n                }\n            });\n        });\n    } catch (error) {\n        console.error(\"Create failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiUpdateIdp (chromeApi: ChromeAPI, updateIdp: SubmittableChoices, callback: Function) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        fetch(getSSOIdpApiUrl(chromeApi, getOrgId(<string>token)), {\n            method: 'PATCH',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(updateIdp)\n        }).then((res) => {\n            res.json().then((body) => {\n                // check for error response\n                if (body.error) {\n                    const errorString = `${body.error_description}`;\n                    callback(body);\n                    throw new Error(errorString);\n                }\n                else {\n                    callback(body);\n                }\n            });\n        });\n    } catch (error) {\n        console.error(\"Update failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiToggleIdPStatus(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const apiStatusUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}/status`;\n        const response = await fetch(apiStatusUrl, {\n            method: 'PATCH',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Status update failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiDeleteIdp(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const deleteIdpUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}`;\n        const response = await fetch(deleteIdpUrl, {\n            method: 'DELETE',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n\n    } catch (error) {\n        console.error(\"IdP deletion failed:\", error);\n        throw error;\n    }\n}\n\n","import React, {createContext, useContext} from 'react';\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\n\nexport interface ValidationContextType {\n    validations: InputValidation,\n    setValidations: React.Dispatch<React.SetStateAction<any>>\n}\n\nexport const ValidationContext = createContext<ValidationContextType>({\n    validations: {\n        CUSTOMER_INFORMATION: {},\n        OIDC_CONFIG: {},\n        SAML_CONFIG: {},\n        IMPORT_FROM_FILE: {},\n        IMPORT_FROM_URL: {},\n        IMPORT_SAML_FROM_FILE: {},\n        IMPORT_SAML_FROM_URL: {},\n        IMPORT_SAML_MANUALLY: {}\n    },\n    // eslint-disable-next-line no-empty-function\n    setValidations: () => {}\n});\n\nexport const useValidationContext = () => {\n    const context = useContext(ValidationContext);\n    if (!context) {\n        throw new Error('Validation context not found');\n    }\n    return context;\n}\n\nexport default ValidationContext;\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useEffect} from 'react';\nimport {\n    Text,\n    Radio,\n    Title,\n    Form,\n    FormGroup, Tooltip\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\n/**\n * handle input selection needs to update information being used to govern the application flow as well as the final api update object\n * (if needed this method could be shared between components and moved to general-utils.ts)\n */\n// eslint-disable-next-line max-params\nexport const handleInputSelection = (value: any, rootUserChoices: any, updateStatus: Function) => {\n    if (!rootUserChoices) { rootUserChoices = {}; }\n\n    if (!rootUserChoices.selections) { rootUserChoices.selections = {}; }\n\n    //  update the main data storage object with the new value\n    rootUserChoices.selections[value.target.name] = value.target.value;\n\n    if (rootUserChoices.selections.protocol) { updateStatus(rootUserChoices.selections.protocol); }\n};\n\nconst CustomerInformation = ({rootUserChoices, updateStatus} : Props) => {\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.CUSTOMER_INFORMATION =\n                {\n                    'protocol': {\n                        inputType: 'RADIO',\n                        variant: 'default',\n                        message: ''\n                    }\n                };\n        setValidations(updated);\n    }, []);\n\n    const handleChange = (value: any) => {\n        handleInputSelection(value, rootUserChoices, updateStatus);\n    };\n\n\n    // pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n\n                {/* TODO had to remove validated prop. PF5 suggests moving that logic to the text input's helperText, FormHelperText, or HelperTextItem */}\n\n                <FormGroup\n                    onChange={(value) => { handleChange(value) } }\n                    role=\"radiogroup\"\n                    fieldId=\"authType\"\n                    label=\"Choose identity provider protocol\"\n                    id=\"protocol\"\n                >\n                    <Tooltip content=\"This feature is not yet available\" position=\"left-start\">\n                        <Radio isDisabled={true} name=\"protocol\" id=\"oidc-protocol\" label=\"OpenID Connect\" value=\"OIDC_CONFIG\"/>\n                    </Tooltip>\n                    <Radio name=\"protocol\" id=\"saml-protocol\" label=\"SAML 2.0\" value=\"SAML_CONFIG\"/>\n                </FormGroup>\n            </Form>\n}\n\nCustomerInformation.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useEffect, useState} from 'react';\nimport {\n    TextInput,\n    Radio,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport {setStateValue} from '../../../Utils/general-utils';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {\n    useValidationContext\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\n\ninterface Props{\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst OidcConfiguration = ({ rootUserChoices, updateStatus}: Props) => {\n    const [selections, setSelections] = useState<Object>();\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: any) => {\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) {\n            updateStatus(rootUserChoices.selections.inputMethod);\n        }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') {\n            return value;\n        }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.OIDC_CONFIG =\n            {\n                'clientId': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'The Red Hat client identifier registered within the customer identity provider. Your identity provider generates this client ID when a Red Hat client is added'\n                },\n                'clientSecret': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'Enter the client secret associated with your client identifier  by your identity provider'\n                },\n                'inputMethod': {\n                    inputType: 'RADIO',\n                    variant: 'default',\n                    message: ''\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    // @ts-ignore\n    return <Form>\n                <FormGroup\n                    label=\"Client ID/SP Entity ID\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientId\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientId\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={ parseVariantValue(validations.OIDC_CONFIG?.clientId?.variant) }>\n                            { validations.OIDC_CONFIG?.clientId?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Client Secret\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientSecret\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientSecret\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.clientSecret?.variant)}>\n                            { validations.OIDC_CONFIG?.clientSecret?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IdP metadata from a config file or download it from a url\">\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORT_FROM_URL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_FROM_FILE\"/>\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.inputMethod?.variant)}>\n                            { validations.OIDC_CONFIG?.inputMethod?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n}\n\nOidcConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default OidcConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Radio,\n    Form,\n    FormGroup, Title\n} from '@patternfly/react-core';\n\nimport React, {useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props{\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst SamlConfiguration = ({rootUserChoices, updateStatus}: Props) => {\n\n    const handleSelection = (value: any) => {\n\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.name] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) { updateStatus(rootUserChoices.selections.inputMethod); }\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.SAML_CONFIG =\n            {\n            'inputMethod': {\n                inputType: 'RADIO',\n                variant: 'default',\n                message: ''\n            }\n        };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n                <Title headingLevel=\"h2\">SAML IdP configuration selection</Title>\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external identity provider metadata\">\n                    <Radio name=\"inputMethod\" id=\"inportFromFile\" label=\"Import SAML from file\" value=\"IMPORT_SAML_FROM_FILE\"/>\n                    <Radio name=\"inputMethod\" id=\"inportManually\" label=\"Import SAML manually\" value=\"IMPORT_SAML_MANUALLY\"/>\n                </FormGroup>\n            </Form>\n}\n\nSamlConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup,\n    Title,\n    Text,\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props {\n    updateStatus: Function;\n    rootUserChoices: UserChoices;\n}\n\nconst ImportFromFile = ({updateStatus, rootUserChoices}: Props) => {\n    const [fileData, setFileData] = useState(\"\");\n\n    const { validations, setValidations } = useValidationContext();\n\n\n    const handleFileData = (_event: any, data:string) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(err);\n            }\n            else if (result) {\n                updateStatus(\"FINAL_STEP\");\n                rootUserChoices.selections.configFileData = result;\n\n                /*\n                 * may need to submit a query at this point to the api to validate that the file chosen is good to go\n                 * alternatively a validation step could be added locally to check for the existence of required fields\n                 */\n                const update = {...validations};\n                update.IMPORT_FROM_URL = { };\n                setValidations(update);\n            }\n        })\n    }\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Import from file</Title>\n            <FormGroup label=\"File upload\" isRequired >\n                <FileUpload\n                    value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    onDataChange={handleFileData}\n                    browseButtonText=\"Upload\"\n                />\n            </FormGroup>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">An XML formatted file detailing the configuration of your IdP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n        </Form>\n    )\n}\n\nImportFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props{\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportFromUrl = ({rootUserChoices}: Props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the application flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value) => { handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportFromUrl.propTypes = {\n    rootUserChoices: PropTypes.object,\n}\n\nexport default ImportFromUrl;\n","/**\n * Formats a string message by replacing placeholders with provided arguments.\n * Currently, it supports both {n} style placeholders and %s for strings and %d for numbers.\n *\n * @param message - string message template containing placeholders.\n * @param args - any umber of string or number arguments to replace placeholders.\n * @returns formatted message.\n */\nexport function formatMessage(message: string, ...args: (string | number)[]): string {\n    if (!message) {\n        return '';\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    let formattedMessage = message.replace(/%s|%d/g, (match) => {\n        const arg = args.shift();\n        return String(arg);\n    });\n\n    // eslint-disable-next-line require-unicode-regexp\n    formattedMessage = formattedMessage.replace(/{(?:\\d+)}/g, (match, index) => {\n        const arg = args[parseInt(index, 10)];\n        // eslint-disable-next-line no-undefined\n        return arg !== undefined ? String(arg) : match;\n    });\n\n    return formattedMessage;\n}\n","/*\n * SAML 2.0 specs\n * https://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd\n * https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf\n */\n\nexport class SamlMetadataConstants {\n\n    /*\n     * @_ is a fast-xml-parser prefix convention to differentiate between XML attributes and element content.\n     * The @ symbol signifies that it's an attribute, and the _ is added to the prefix to ensure clarity.\n     */\n\n    public static readonly IDENTITY_PROVIDER_ENTITY_ID = '@_entityID';\n\n    public static readonly BINDING = '@_Binding';\n\n    public static readonly LOCATION = '@_Location';\n\n    public static readonly KEY_INFO = 'KeyInfo';\n\n    public static readonly X509_DATA = 'X509Data';\n\n    public static readonly X509_CERTIFICATE = 'X509Certificate';\n\n    public static readonly DS_KEY_INFO = 'ds:KeyInfo';\n\n    public static readonly DS_X509_DATA = 'ds:X509Data';\n\n    public static readonly DS_X509_CERTIFICATE = 'ds:X509Certificate';\n\n    public static readonly HTTP_POST_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST';\n\n    public static readonly HTTP_REDIRECT_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect';\n}\n","export interface IdpRequestData {\n    providerId: string;\n}\n\nexport const IDENTITY_PROVIDER_ENTITY_ID = \"identityProviderEntityId\";\nexport const AUTH_REQUEST_URL = \"authenticationRequestsUrl\";\nexport const X509_CERTIFICATE = \"x509Certificate\";\nexport const SERVICE_PROVIDER_ISSUER = \"serviceProviderIssuer\";\n\nexport interface SamlRequestData extends IdpRequestData {\n    identityProviderEntityId: string;\n    authenticationRequestsUrl: string;\n    x509Certificate: string;\n    serviceProviderEntityId: string;\n}\n\nexport interface OidcRequestData extends IdpRequestData {\n    clientId: string;\n    clientSecret: string;\n    authorizationUrl: string;\n    tokenUrl: string;\n    issuer: string;\n    publicKey: string;\n    publicKeyId: string;\n}\n","export class SamlMetadataMessages {\n\n    public static readonly INVALID_OR_MISSING_DATA = 'Invalid or missing data';\n\n    public static readonly INVALID_OR_MISSING_IDPENTITYID = \"Invalid or missing IdP Entity ID\"\n\n    public static readonly INVALID_OR_MISSING_AUTH_REQUEST_URL = \"Invalid or missing Authentication Request URL\"\n\n    public static readonly INVALID_OR_MISSING_CERTIFICATE = \"Invalid or missing X509 Certificate\"\n\n    public static readonly CERTIFICATE_EXPIRED = \"Certificate is expired\"\n\n    public static readonly SUCCESS_MSG = 'loaded successfully';\n\n    public static readonly FILE_SUCCESSFULLY_LOADED = '%s ' + SamlMetadataMessages.SUCCESS_MSG + ' (size: %dK)';\n\n    public static readonly FILE_PARSING_ERROR = 'Error parsing XML: %s';\n\n    public static readonly INVALID_FILE_TYPE = 'Invalid file type. Only XML files are allowed.';\n\n    public static readonly MALICIOUS_FILE_DETECTED = 'Error: Invalid XML document.';\n\n    public static readonly FILE_READ_ERROR = 'Error reading file';\n\n    public static readonly SAML_XML_REQUIREMENTS = 'Upload an XML file with your IdP configuration. Max file size allowed is %d K';\n\n    public static readonly FILE_TOO_LARGE = \"Must be an XML file no larger than %d KB\";\n\n}\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport {\n    DropEvent,\n    ExpandableSection,\n    FileUpload,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\n\nimport _ from 'lodash';\nimport './saml-metadata-file.scss'\nimport PropTypes from \"prop-types\";\nimport {XMLParser} from 'fast-xml-parser';\nimport forge from 'node-forge';\n\nimport {formatMessage} from \"../../../Utils/message-formatter-utils\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport {SamlMetadataConstants} from \"../../../Apps/IdpSelfService/Constants/saml-metadata-constants\";\nimport {SamlMetadataSchemaAttributes} from \"../../../Apps/IdpSelfService/CommonInterfaces/saml-metadata-file\";\nimport {UserChoices} from \"../../../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID,\n    X509_CERTIFICATE\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {containsPotentialThreats} from \"../../../Utils/xml-utils\";\nimport {SamlMetadataMessages} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-messages\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    maxKBSize: number;\n    updateStatus: Function;\n}\n\nexport const SamlMetadataFile: React.FunctionComponent<Props> = forwardRef(({ rootUserChoices, maxKBSize, updateStatus}: Props, ref) => {\n    const allowedFileTypes = ['text/xml'];\n\n    const [file, setFile] = useState<File | null>(null);\n    const [value, setValue] = useState('');\n    const [filename, setFilename] = useState('');\n\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n    const [isFileSizeRejected, setIsFileSizeRejected] = useState(false);\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isSafe, setIsSafe] = useState(false);\n\n    /*\n     * Add the following code to the import-saml-from-file.tsx (or the parent component)\n     * if you need to do extra handling of the file object or any attribute used in this component:\n     *const samlMetadataFileRef = useRef<any>(null);\n     *if (samlMetadataFileRef.current) {\n     *  const file = samlMetadataFileRef.current.getFile();\n     *}\n     */\n    useImperativeHandle(ref, () => ({\n        getFile: () => file\n    }));\n\n    function clear() {\n        setFile(null);\n        setValue('');\n        setFilename('');\n        setSuccessMessage('');\n        setErrorMessage('');\n        setIsFileSizeRejected(false);\n    }\n\n    // eslint-disable-next-line no-shadow\n    const onToggle = (_event: React.MouseEvent, isExpanded: boolean) => {\n        setIsExpanded(isExpanded);\n    };\n\n    function isValid(idpEntityID: string | null, location: string | null, certificates: Set<string>) {\n\n        if (!_.isString(idpEntityID) || idpEntityID.length === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_IDPENTITYID;\n        }\n        else if (!_.isString(location) || location.length === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_AUTH_REQUEST_URL;\n        }\n        else if (certificates.size === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_CERTIFICATE;\n        }\n\n        // check cert expiration\n        try {\n            const now = new Date();\n            // check only the first cert in the chain\n            const certWithHeaders = `-----BEGIN CERTIFICATE-----\\n${certificates.values().next().value.match(/.{1,64}/gu)?.join('\\n')}\\n-----END CERTIFICATE-----`\n            const cert = forge.pki.certificateFromPem(certWithHeaders);\n\n            if (now < cert.validity.notBefore || now > cert.validity.notAfter) {\n                return SamlMetadataMessages.CERTIFICATE_EXPIRED;\n            }\n        } catch (e) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_CERTIFICATE;\n        }\n\n        return SamlMetadataMessages.SUCCESS_MSG;\n    }\n\n    /**\n     * XMLParser docs:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/tree/master/docs/v5\n     * Config options:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v5/3.Options.md\n     */\n    // eslint-disable-next-line no-shadow\n    function parse(xml: string, file: File) {\n\n        function extractIdpEntityID(parsedXml: SamlMetadataSchemaAttributes) {\n            const entityDescriptor = parsedXml.EntityDescriptor || parsedXml['md:EntityDescriptor'];\n\n            if (entityDescriptor?.[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID]) {\n                return entityDescriptor[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID];\n            }\n            return null;\n        }\n\n        function extractLocation(services: any) {\n            if (services || Array.isArray(services)) {\n                const httpPostService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_POST_BINDING);\n                const httpRedirectService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_REDIRECT_BINDING);\n\n                // see: org.keycloak.broker.saml.SAMLIdentityProviderFactory#parseConfig\n                if (httpPostService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpPostService[SamlMetadataConstants.LOCATION];\n                } else if (httpRedirectService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpRedirectService[SamlMetadataConstants.LOCATION];\n                }\n            }\n            return null;\n        }\n\n        function extractX509Certificate(keyDescriptors: any) {\n            const certificates: Set<string> = new Set<string>();\n            if (keyDescriptors) {\n                // ensure we handle both single and multiple KeyDescriptor entries\n                for (const keyDescriptor of Array.isArray(keyDescriptors) ? keyDescriptors : [keyDescriptors]) {\n                    const x509Data = keyDescriptor?.[SamlMetadataConstants.KEY_INFO]?.[SamlMetadataConstants.X509_DATA];\n                    const dsX509Data = keyDescriptor?.[SamlMetadataConstants.DS_KEY_INFO]?.[SamlMetadataConstants.DS_X509_DATA];\n\n                    let certificatesArray = []\n\n                    // we need to handle both single and multiple <X509Certificate> entries\n                    if (x509Data) {\n                        certificatesArray = Array.isArray(x509Data?.[SamlMetadataConstants.X509_CERTIFICATE])\n                            ? x509Data[SamlMetadataConstants.X509_CERTIFICATE]\n                            : [x509Data?.[SamlMetadataConstants.X509_CERTIFICATE]];\n                    } else if (dsX509Data) {\n                        // maybe the metadata file uses <ds:XXX> as a prefix, so let's try handling w/ DS entries instead\n                        certificatesArray = Array.isArray(dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE])\n                            ? dsX509Data[SamlMetadataConstants.DS_X509_CERTIFICATE]\n                            : [dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE]];\n                    }\n\n                    // add the certificates found (ignores null/undefined entries)\n                    for (const certificate of certificatesArray) {\n                        if (certificate) {\n                            certificates.add(certificate);\n                        }\n                    }\n                }\n            }\n            return certificates;\n        }\n\n        try {\n            const parser = new XMLParser({\n                // ensure that attributes like SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID are captured and not ignored\n                ignoreAttributes: false,\n                // allows the parser to handle boolean attributes in the XML\n                allowBooleanAttributes: true,\n                attributeNamePrefix: '@_',\n                parseAttributeValue: true,\n                // ignores processing instructions <? .. ?> in the XML file as they are irrelevant.\n                ignorePiTags: true\n            });\n\n            const parsedXml: SamlMetadataSchemaAttributes = parser.parse(xml);\n            const keyDescriptors =\n                parsedXml?.EntityDescriptor?.IDPSSODescriptor?.KeyDescriptor ||\n                parsedXml['md:EntityDescriptor']?.['md:IDPSSODescriptor']?.['md:KeyDescriptor'] ||\n                [];\n            const services =\n                parsedXml.EntityDescriptor?.IDPSSODescriptor?.SingleSignOnService ||\n                parsedXml['md:EntityDescriptor']?.['md:IDPSSODescriptor']?.['md:SingleSignOnService'] ||\n                null;\n\n            const idpEntityID = extractIdpEntityID(parsedXml);\n            const location = extractLocation(services);\n            const certificates: Set<string> = extractX509Certificate(keyDescriptors);\n\n            const validationMessaging = isValid(idpEntityID, location, certificates);\n            if (!(validationMessaging === SamlMetadataMessages.SUCCESS_MSG)) {\n                throw new Error(validationMessaging);\n            }\n\n            //  update the main data storage object with the parsed values\n            rootUserChoices.selections[IDENTITY_PROVIDER_ENTITY_ID] = idpEntityID as string;\n            rootUserChoices.selections[AUTH_REQUEST_URL] = location as string;\n\n            const cert = Array.from(certificates).join(',');\n            rootUserChoices.selections[X509_CERTIFICATE] = cert;\n\n            /*\n             * TODO this is bad. Make better. Esseintially we are forcing the root user choices to have something present.\n             * this prevents the validator from failing and allows the interface to move forward when a file is uploaded\n             */\n            rootUserChoices.selections.xmlFileWithRestrictions = \"selected\";\n\n            updateStatus(FlowStep.FINAL_STEP);\n\n            setIsFileSizeRejected(false);\n            setFile(file);\n            setErrorMessage(null);\n            setSuccessMessage(formatMessage(SamlMetadataMessages.FILE_SUCCESSFULLY_LOADED, file.name, (file.size / 1024).toFixed(2)));\n            setIsSafe(true);\n        } catch (parseError) {\n            setIsSafe(false);\n            setErrorMessage(formatMessage(SamlMetadataMessages.FILE_PARSING_ERROR, (parseError as Error).message));\n        }\n    }\n\n    // eslint-disable-next-line no-shadow\n    function isFileSizeInvalid(file: File) {\n        if (!allowedFileTypes.includes(file.type)) {\n            setErrorMessage(SamlMetadataMessages.INVALID_FILE_TYPE);\n            setSuccessMessage(null);\n            return true;\n        }\n        if (file.size > (maxKBSize * 1024)) {\n            setIsFileSizeRejected(true);\n            return true;\n        }\n        return false;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const handleFileInputChange = (_: any, file: File) => {\n        clear();\n        setFilename(file.name);\n\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                setIsSafe(false);\n                setErrorMessage(SamlMetadataMessages.FILE_READ_ERROR);\n            }\n\n            reader.onload = (event: ProgressEvent<FileReader>) => {\n                const xmlString = event.target?.result as string;\n                if (containsPotentialThreats(xmlString)) {\n                    setIsSafe(false);\n                    setErrorMessage(SamlMetadataMessages.MALICIOUS_FILE_DETECTED);\n                } else if (!isFileSizeInvalid(file)) {\n                    parse(xmlString, file);\n                }\n            };\n\n            reader.readAsText(file);\n        }\n    };\n\n    // eslint-disable-next-line no-shadow\n    const handleDataChange = (_event: DropEvent, value: string) => {\n        setValue(value);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleClear = (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        clear();\n        setIsExpanded(false);\n    };\n\n    const handleFileRejected = () => {\n        setIsFileSizeRejected(true);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadStarted = (_event: DropEvent, _fileHandle: File) => {\n        setErrorMessage('');\n        setSuccessMessage('');\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadFinished = (_event: DropEvent, _fileHandle: File) => {\n        setIsExpanded(true);\n    };\n\n    return (\n        <FormGroup fieldId=\"xml-file-with-restrictions\">\n            <FileUpload\n                id=\"xml-file-with-restrictions\"\n                type=\"text\"\n                value={value}\n                filename={filename}\n                filenamePlaceholder=\"Drag and drop the SAML metadata file or upload one\"\n                onFileInputChange={handleFileInputChange}\n                onDataChange={handleDataChange}\n                onReadStarted={handleFileReadStarted}\n                onReadFinished={handleFileReadFinished}\n                onClearClick={handleClear}\n                dropzoneProps={{\n                    accept: {'text/xml': ['.xml']},\n                    maxSize: (maxKBSize * 1024),\n                    onDropRejected: handleFileRejected\n                }}\n                validated={isFileSizeRejected ? 'error' : 'default'}\n                browseButtonText=\"Upload\"\n                // this will hide the core component code preview block (which doesn't support syntax highlighting)\n                hideDefaultPreview/>\n            <FormHelperText>\n                <HelperText>\n                    <HelperTextItem variant={isFileSizeRejected ? 'error' : 'default'}>\n                        {isFileSizeRejected ? formatMessage(SamlMetadataMessages.FILE_TOO_LARGE, maxKBSize) : formatMessage(SamlMetadataMessages.SAML_XML_REQUIREMENTS, maxKBSize)}\n                    </HelperTextItem>\n                    {(successMessage || errorMessage) && (\n                        <HelperTextItem variant={errorMessage ? 'error' : 'success'}>\n                            {errorMessage ?? successMessage}\n                        </HelperTextItem>\n                    )}\n                </HelperText>\n            </FormHelperText>\n            <div className=\"xml-highlighter\">\n                {isSafe && value && (\n                    <ExpandableSection toggleText={isExpanded ? 'Show less' : 'Show more'} onToggle={onToggle} isExpanded={isExpanded}>\n                        <div className=\"highlighter-panel\">\n                            {value}\n                        </div>\n                    </ExpandableSection>\n                )}\n            </div>\n        </FormGroup>\n    );\n});\n\nSamlMetadataFile.displayName = \"SamlMetadataFile\";\n\nSamlMetadataFile.propTypes = {\n    maxKBSize: PropTypes.number.isRequired\n}\n\nexport default SamlMetadataFile;\n","/**\n * check for potentially dangerous XML elements:\n * - XXE (XML External Entity)\n * - XML Bomb (Billion Laughs Attack)\n * - Recursive Entity defs\n */\nexport function containsPotentialThreats(xmlString: string) {\n    return xmlString.includes('<!DOCTYPE') ||\n        xmlString.includes('<!ENTITY') ||\n        xmlString.includes('SYSTEM') ||\n        ((xmlString.match(/<!ENTITY/gu) || []).length > 5) ||\n        (xmlString.includes('&') && !(/&[a-zA-Z0-9]+;/u).test(xmlString));\n}\n","export class SamlHelperTextMessages {\n\n    public static readonly NO_SPECIAL_CHARS = 'This field is expected to consist only of alphanumeric characters. Spaces, dashes, and special characters will not be accepted.';\n\n    public static readonly ENTITY_ID = 'The Entity ID attribute is in your SAML metadata configuration.';\n\n    public static readonly IDENTITY_PROVIDER_ENTITY_ID = 'The Entity ID used to validate the issuer for received SAML assertions.';\n\n    public static readonly SERVICE_PROVIDER_ISSUER = 'The issuer that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\" or a \"Service Provider Entity ID\".';\n\n    public static readonly AUTHENTICATION_REQUEST_URL = 'The URL that receives SAML authentication requests; i.e. the URL of your internal log in page.';\n\n    public static readonly X509_CERTIFICATE = [\n        'A Base64 encoded certificate. This must not include the certificate preamble/ending: <code>(-----BEGIN/END CERTIFICATE-----).</code>',\n        'Multiple certificates may be included. Separate multiple certificates with a comma if you need to attach more than one.',\n        'An x509 certificate must be provided, as it is essential for signing assertions from the Service Provider to secure SAML communication.'\n    ];\n\n}\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Button,\n    Form,\n    FormGroup, HelperText, HelperTextItem, Popover, TextInput, Title\n} from '@patternfly/react-core';\nimport React, {ReactElement, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {SamlMetadataFile} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-file\";\nimport {SERVICE_PROVIDER_ISSUER} from \"../CommonInterfaces/idp-request-types\";\nimport {FlowStep} from \"../Constants/flow-step\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/dynamic/icons/help-icon\";\nimport {SamlHelperTextMessages} from \"../../../Apps/IdpSelfService/Constants/saml-helper-text-messages\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst ImportSamlFromFile = ({ rootUserChoices, updateStatus}: Props) => {\n    const [samlMetadataFile, setSamlMetadataFile] = useState<ReactElement>()\n    const { validations, setValidations } = useValidationContext();\n    useEffect(() => {\n        setSamlMetadataFile(<SamlMetadataFile rootUserChoices={rootUserChoices}\n                                              updateStatus={updateStatus}\n                                              maxKBSize={ 100 }></SamlMetadataFile>);\n\n        const updateValidations = {...validations}\n\n        updateValidations.IMPORT_SAML_FROM_FILE = {\n            \"serviceProviderIssuer\": {\n                inputType: 'ENTITYID',\n                variant: 'default',\n                message: SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER\n            },\n            'xmlFileWithRestrictions': {\n                inputType: 'GLOBAL',\n                variant: 'default',\n                message: ''\n            }\n        }\n\n        setValidations(updateValidations);\n    }, []);\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const handleSelection = (value: any) => {\n        rootUserChoices.selections[value.target.id] = value.target.value;\n        if (rootUserChoices.selections) { updateStatus(FlowStep.FINAL_STEP); }\n    }\n\n    return <Form>\n        <Title headingLevel=\"h2\">Import SAML from file</Title>\n        <FormGroup\n            label=\"Service provider issuer\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}\n            labelIcon={\n                <Popover\n                    triggerAction=\"hover\"\n                    bodyContent={\n                        <div>\n                            This field is expected to consist only of alphanumeric characters. Spaces, dashes, and special characters will not be accepted.\n                        </div>\n                    }>\n                    <Button\n                        variant=\"plain\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                        className={`customPopover ${styles.formGroupLabelHelp}`}>\n                        <HelpIcon />\n                    </Button>\n                </Popover>\n            }>\n            <TextInput\n                type=\"text\"\n                id={SERVICE_PROVIDER_ISSUER} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_FROM_FILE?.serviceProviderIssuer?.variant) }>\n                    { validations.IMPORT_SAML_FROM_FILE?.serviceProviderIssuer?.message || SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n        <FormGroup label=\"File upload\" isRequired>\n            {samlMetadataFile}\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_FROM_FILE?.xmlFileWithRestrictions?.variant) }>\n                    { validations.IMPORT_SAML_FROM_FILE?.xmlFileWithRestrictions?.message }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n    </Form>\n}\n\nImportSamlFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromFile;\n","import React, {useEffect} from 'react';\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem, TextArea, Title, Popover, Button\n} from '@patternfly/react-core';\nimport {UserChoices} from \"../../IdpSelfService/CommonInterfaces/user-choices\";\nimport {AUTH_REQUEST_URL, IDENTITY_PROVIDER_ENTITY_ID, X509_CERTIFICATE, SERVICE_PROVIDER_ISSUER} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {useValidationContext} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/dynamic/icons/help-icon\";\nimport {SamlHelperTextMessages} from \"../../../Apps/IdpSelfService/Constants/saml-helper-text-messages\";\n\ninterface Props {\n    primeNextStep: Function;\n    rootUserChoices: UserChoices;\n}\nconst ImportSamlManual = ({primeNextStep, rootUserChoices}: Props) => {\n\n    /**\n     * updates the information being used to govern the application flow as well as the final api update object.\n     * @param value\n     */\n    const handleSelection = (value: any) => {\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections) { primeNextStep(FlowStep.FINAL_STEP); }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.IMPORT_SAML_MANUALLY =\n            {\n                'identityProviderEntityId': {\n                    inputType: 'ENTITYID',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.IDENTITY_PROVIDER_ENTITY_ID\n                },\n                'serviceProviderIssuer': {\n                    inputType: 'ENTITYID',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER\n                },\n                'authenticationRequestsUrl': {\n                    inputType: 'DOMAIN',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL\n                },\n                'x509Certificate': {\n                    inputType: 'x509',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.X509_CERTIFICATE.join('@')\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n        <Title headingLevel=\"h2\">Configure SAML manually</Title>\n        <FormGroup\n            label=\"Identity provider Entity ID\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextInput\n                type=\"text\"\n                id={IDENTITY_PROVIDER_ENTITY_ID} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.message || SamlHelperTextMessages.IDENTITY_PROVIDER_ENTITY_ID }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"Authentication request url\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextInput\n                       type=\"text\"\n                       id={AUTH_REQUEST_URL} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.message || SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"Service provider issuer\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}\n            labelIcon={\n                <Popover\n                    triggerAction=\"hover\"\n                    bodyContent={\n                        <div>{SamlHelperTextMessages.NO_SPECIAL_CHARS}</div>\n                    }>\n                    <Button\n                        variant=\"plain\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                        className={`customPopover ${styles.formGroupLabelHelp}`}>\n                        <HelpIcon />\n                    </Button>\n                </Popover>\n            }>\n            <TextInput\n                       type=\"text\"\n                       id={SERVICE_PROVIDER_ISSUER} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.serviceProviderIssuer?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.serviceProviderIssuer?.message || SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"x509 certificate\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextArea resizeOrientation=\"vertical\"\n                      type=\"text\"\n                      id={X509_CERTIFICATE}/>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.x509Certificate?.variant) }>\n                    {\n                        (() => {\n                            const message = validations.IMPORT_SAML_MANUALLY?.x509Certificate?.message?.trim();\n                            if (message) {\n                                // we need to treat the x509 message as an array because it has multiple messages\n                                return message.split('@')\n                                    .map((msg, index) => (\n                                        <p key={index} dangerouslySetInnerHTML={{__html: msg}}/>\n                                    ));\n                            }\n                            // if there is no validation message to throw, show the default helper text message defined in the constant\n                            return SamlHelperTextMessages.X509_CERTIFICATE.map((msg, index) => (\n                                <p key={index} dangerouslySetInnerHTML={{__html: msg}}/>\n                            ));\n                        })()\n                    }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n    </Form>\n\n}\n\nexport default ImportSamlManual;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {Button, ClipboardCopy, Form, FormGroup, Popover, Text, Title} from '@patternfly/react-core';\nimport React, {useEffect, useState} from 'react';\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {getOrgId, getSSOBaseUrl} from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\ninterface Props{\n    accessToken: string | null;\n}\nconst ImportSamlFromURL = ({accessToken} : Props) => {\n    const [orgId, setOrgId] = useState('');\n    const chrome = useChrome();\n\n    const getConfigURL = (path: string) => {\n        return getSSOBaseUrl(chrome) + path;\n    };\n\n    useEffect(() => {\n        setOrgId(getOrgId(accessToken!));\n    }, [])\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Configure these URLs in your Identity Provider</Title>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">Please review the following information and verify that these are entered where required in your organization’s identity provider.</Text>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint/descriptor`)}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This is where your identity provider will redirect users to authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint`)}\n                </ClipboardCopy>\n            </FormGroup>\n        </Form>\n    )\n}\n\nexport default ImportSamlFromURL;\n","import React from 'react';\nimport { WizardFooterWrapper, useWizardContext} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\n\ninterface Props {\n    userChoices: UserChoices;\n    setPreviousTriggered: Function;\n    currentState: string;\n}\n\nconst GenericFooter = ({userChoices, setPreviousTriggered, currentState}: Props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (!isFailureTriggered(userChoices, currentState, validations, setValidations)) {\n            goToNextStep();\n        }\n    }\n\n    /**\n     * on back click we need to be able to trigger the wizard context's default back functionality but we also need to\n     * handle the current state stored in the flowTemplate.\n     */\n    const handleBackClick = () => {\n        // handles wizard default functionality\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        setPreviousTriggered();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n            <Button onClick={handleNextClick}>\n                Next\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default GenericFooter;\n","import React, { MutableRefObject } from 'react';\nimport {\n    WizardFooterWrapper /* data-codemods */, useWizardContext /* data-codemods */\n} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button, Alert, AlertGroup } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport {SubmittableSAMLChoices, UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID,\n    X509_CERTIFICATE,\n    SERVICE_PROVIDER_ISSUER\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\n\nimport PropTypes from \"prop-types\";\nimport { useValidationContext } from \"../CommonInterfaces/validation-context\";\nimport { apiCreateIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {IdpResponseData} from \"@apps/IdpSelfService/CommonInterfaces/idp-response-types\";\n\ninterface Props {\n    userChoiceData: MutableRefObject<UserChoices>;\n    previous: Function;\n    currentState: string;\n}\n\nconst SubmitFooter = ({ userChoiceData, previous, currentState }: Props) => {\n    const chrome = useChrome();\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [alerts, setAlerts] = React.useState<React.ReactNode>();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * convert the choice data to use the key's required by the api.\n     */\n    const filterChoiceData = (): SubmittableSAMLChoices => {\n        const provider = userChoiceData.current.selections.protocol === \"OIDC_CONFIG\" ? \"oidc-improved\" : \"saml-improved\"\n        const idpEID = userChoiceData.current.selections[IDENTITY_PROVIDER_ENTITY_ID];\n        const reqURL = userChoiceData.current.selections[AUTH_REQUEST_URL];\n        const serviceEID = userChoiceData.current.selections[SERVICE_PROVIDER_ISSUER];\n        const sanitizedCertChain = userChoiceData.current.selections[X509_CERTIFICATE].replace(/[\\s\\n\\r]/gu, '');\n\n        return {\n            providerId: provider,\n            identityProviderEntityId: idpEID,\n            authenticationRequestsUrl: reqURL,\n            serviceProviderEntityId: serviceEID,\n            x509Certificate: sanitizedCertChain,\n        }\n    }\n\n    /**\n     * function that allows us to trigger the error alert on unsuccessful api call.\n     */\n    const throwError = (message: string) => {\n        const timeout = 8000;\n        // eslint-disable-next-line react/jsx-key\n        setAlerts(<Alert variant=\"danger\" isInline isPlain title={message} timeout={timeout} onTimeout={() => { setAlerts([]) }} />)\n    }\n\n    const createIDPCall = () => {\n        apiCreateIdp(chrome, filterChoiceData(), (responseBody: IdpResponseData) => {\n            if (responseBody.error) {\n                console.error(\"Error Type: \" + responseBody.error);\n                console.error(\"Error Message: \" + responseBody.fields);\n                throwError(\"Failed to upload config: \" + responseBody.fields);\n\n                setIsLoading(false);\n            }\n            else {\n                setIsLoading(false)\n                goToNextStep();\n            }\n        })\n    }\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (!isFailureTriggered(userChoiceData.current, currentState, validations, setValidations)) {\n            // trigger the spinner.\n            setIsLoading(true);\n            // fire the call to SSO.\n            createIDPCall();\n        } else {\n            setIsLoading(false);\n        }\n    }\n\n    const handleBackClick = () => {\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        previous();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n            <Button onClick={handleNextClick} isLoading={isLoading}>Next</Button>\n            <AlertGroup isLiveRegion className=\"pf-v5-u-mt-sm\">\n                {alerts}\n            </AlertGroup>\n        </WizardFooterWrapper>\n    );\n}\n\nSubmitFooter.propTypes = {\n    userChoiceData: PropTypes.object,\n}\n\nexport default SubmitFooter;\n","import React from 'react';\nimport { WizardFooterWrapper} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button, Checkbox, Stack, StackItem } from '@patternfly/react-core';\n\nconst FinalizeFooter = () => {\n\n    const [checkState, setCheckState] = React.useState(false);\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        window.location.reload();\n    }\n\n    /**\n     * handled\n     */\n    const handleCheckClick = () => {\n        setCheckState(!checkState);\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Stack hasGutter>\n                <StackItem>\n                    <Checkbox onChange={handleCheckClick} label=\"I have verified that this information is properly set in my identity provider.\" id=\"confirmation\" isChecked={checkState} isRequired></Checkbox>\n                </StackItem>\n                <StackItem>\n                    <Button onClick={handleNextClick} isDisabled={!checkState}>Submit</Button>\n                </StackItem>\n            </Stack>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default FinalizeFooter;\n","import './flow-template.scss'\nimport React, {useState, useRef, useEffect} from 'react';\nimport {Wizard, WizardStep} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport {IdpResponseData, IdpResponseDataInitialState} from \"../CommonInterfaces/idp-response-types\";\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {InputValidation} from '../CommonInterfaces/input-validation'\nimport CustomerInformation from '../FirstStep/customer-information';\nimport OIDCConfig from '../SecondStep/oidc-configuration';\nimport SAMLConfig from '../SecondStep/saml-configuration';\nimport ImportFromFile from '../ThirdStep/import-from-file';\nimport ImportFromUrl from '../ThirdStep/import-from-url';\nimport ImportSamlFromFile from '../ThirdStep/import-saml-from-file';\nimport ImportSamlManual from '../ThirdStep/import-saml-manual';\nimport URLsForUser from '../FinalStep/urls-for-user';\nimport GenericFooter from './generic-footer';\nimport SubmitFooter from './submit-footer';\nimport FinalizeFooter from './finalize-footer';\nimport PropTypes from \"prop-types\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {PageSection} from \"@patternfly/react-core\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport ValidationContext, {\n    ValidationContextType\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {apiGetIdp} from \"../ApiClient/idp-controller\";\n\ninterface Props {\n    accessToken: string\n}\n\nconst FlowTemplate = ({accessToken}: Props) => {\n    const chrome = useChrome();\n    // intended to serve as the main aggregate of data that gets sent to the server\n    const userChoices = useRef<UserChoices>({selections: {}});\n\n    // has the admin's account been configured with an idp. If so display the management screen.\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isAllowedToConfigure, setIsAllowedToConfigure] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInit, setIsInit] = useState(true);\n    const [idpData, setIdpData] = useState(IdpResponseDataInitialState);\n\n\n    const recomputeAppState = () => {\n        apiGetIdp(chrome)\n        .then(response => {\n            if (response.status === 204) {\n                return {status: ''};\n            }\n            return response.json()\n        })\n        .then((data: IdpResponseData) => {\n            if (data.providerId === 'oidc-improved' || data.providerId === 'saml-improved') {\n                setIdpData(data);\n                setIsLoading(false);\n                setIsConfigured(true);\n            } else if (data.error) {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(false);\n            } else {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(true);\n            }\n        })\n        .catch(error => {\n            console.error('Error: ', error);\n            setIsLoading(false);\n        })\n    }\n\n    useEffect(() => {\n        recomputeAppState();\n    }, [])\n\n    const defaultValue: ValidationContextType = {\n        validations: {\n            CUSTOMER_INFORMATION: {},\n            OIDC_CONFIG: {},\n            SAML_CONFIG: {},\n            IMPORT_FROM_FILE: {},\n            IMPORT_FROM_URL: {},\n            IMPORT_SAML_FROM_FILE: {},\n            IMPORT_SAML_FROM_URL: {},\n            IMPORT_SAML_MANUALLY: {}\n        },\n        // eslint-disable-next-line no-empty-function\n        setValidations: () => {\n        }\n    };\n\n    // handle the present validation state of the various steps.\n    const [validations, setValidations] = useState<InputValidation>(defaultValue.validations)\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available.\n     */\n    const [flowState, setFlowState] = useState({\n        currentState: FlowStep.CUSTOMER_INFORMATION,\n        previousState: \"\"\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n        // eslint-disable-next-line no-empty-function\n    const closeWizard = () => {\n        }\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideImportManually: true,\n        hideFinish: true,\n    })\n\n    const triggerNextStep = (nextStep: string) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch (nextStep) {\n            case FlowStep.OIDC_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                newDisplay.hideSAML = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.SAML_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                newDisplay.hideOIDC = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                newDisplay.hideImportFromURL = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = true;\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportManually = true;\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                newDisplay = {...displayed};\n                newDisplay.hideImportManually = false;\n                newDisplay.hideImportFromFile = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.FINAL_STEP:\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.previousState,\n                });\n                break;\n            default:\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                });\n\n        }\n\n    }\n\n    /**\n     *\n     * @param validChoices an array of strings representing the values that will remain in the selection list.\n     */\n    const pruneChoices = (validChoices: string[]) => {\n        const choicesKeys = Object.keys(userChoices.current.selections);\n        for (let i = 0; i < choicesKeys.length; i++) {\n            if (!validChoices.includes(choicesKeys[i])) {\n                // @ts-ignore\n                delete userChoices.current.selections[choicesKeys[i]];\n            }\n        }\n    }\n\n    const triggerBackStep = (prevStep: string) => {\n        switch (prevStep) {\n            case FlowStep.OIDC_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.SAML_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            default:\n                pruneChoices([\"\"]);\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n        }\n    }\n\n    const setBackTriggered = () => {\n        triggerBackStep(flowState.previousState)\n    }\n\n    return (\n        <div className=\"flowPage\">\n            <PageSection>\n                <div>\n                    <ValidationContext.Provider value={{validations, setValidations}}>\n                        <Wizard\n                            onClose={closeWizard}\n                            isProgressive>\n\n                            {/* Standard customer config. Every flow requires this */}\n                            <WizardStep\n                                id={'CUSTOMERINFORMATION'}\n                                name={'Customer information'}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={FlowStep.CUSTOMER_INFORMATION}\n                                    />\n                                }>\n                                <CustomerInformation\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                            <WizardStep\n                                id={'OIDCCONFIG'}\n                                name={'OIDC Configuration'}\n                                isHidden={displayed.hideOIDC}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'OIDC_CONFIG'}\n                                    />\n                                }>\n                                <OIDCConfig\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMFILE'}\n                                name={'Import config from file'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_FILE}\n                                    />\n                                }>\n                                <ImportFromFile\n                                    updateStatus={triggerNextStep}\n                                    rootUserChoices={userChoices.current}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMURL'}\n                                name={'Import config from URL'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_URL}\n                                    />\n                                }>\n                                <ImportFromUrl\n                                    rootUserChoices={userChoices}\n                                />\n                            </WizardStep>\n\n                            {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                            <WizardStep\n                                id={'SAMLCONFIG'}\n                                name={'SAML configuration'}\n                                isHidden={displayed.hideSAML}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'SAML_CONFIG'}\n                                    />\n                                }>\n                                <SAMLConfig\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                name={'Import SAML from file'}\n                                id={'IMPORTSAMLFROMFILE'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_FROM_FILE}\n                                    />\n                                }>\n                                <ImportSamlFromFile\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n\n                            </WizardStep>\n                            <WizardStep\n                                name={'Configure SAML manually'}\n                                id={'IMPORTSAMLMANUALLY'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportManually)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_MANUALLY}\n                                    />\n                                }>\n\n                                <ImportSamlManual\n                                    primeNextStep={triggerNextStep}\n                                    rootUserChoices={userChoices.current}\n                                />\n\n                            </WizardStep>\n\n                            {/* Final steps of the process. again any selection will show the following two steps.*/}\n                            <WizardStep\n                                id={'FINALSTEP'}\n                                name={'Configure URLs in your IDP'}\n                                isHidden={displayed.hideFinish}\n                                footer={\n                                    <FinalizeFooter/>\n                                }>\n                                {/* should support both SAML and OIDC params */}\n                                <URLsForUser accessToken={accessToken}/>\n                            </WizardStep>\n                        </Wizard>\n                    </ValidationContext.Provider>\n                </div>\n            </PageSection>\n        </div>\n    );\n}\n\n\nFlowTemplate.propTypes = {\n    accessToken: PropTypes.string\n}\n\nexport default FlowTemplate;\n","export class OidcHelperTextMessages {\n    public static readonly ISSUER = 'The issuer is how your identity provider identifies itself, which we verify on all identity-provider-issued tokens for added security.';\n\n    public static readonly CLIENT_ID = 'The client identifier used to register the third party service. Some identity providers may refer to this as an Application';\n\n    public static readonly CLIENT_SECRET = 'The secret value registered with this client.';\n\n    public static readonly AUTHORIZATION_URL = 'The URL that performs authentication of the end-user.';\n\n    public static readonly TOKEN_URL = 'The URL where an authorization code can be exchanged for an access token and ID token.';\n\n    public static readonly PUBLIC_KEY = 'This public key will be used to verify the signature of the JWTs created by the identity provider.';\n\n    public static readonly PUBLIC_KEY_ID = 'The key identifier (KID) for the provided Public Key field below.';\n\n}\n","import {OidcResponseData} from \"@apps/IdpSelfService/CommonInterfaces/idp-response-types\";\nimport {\n    Button,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Popover,\n    TextInput\n} from \"@patternfly/react-core\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport React from \"react\";\nimport {OidcHelperTextMessages} from \"../Constants/oidc-helper-text-messages\";\n\ninterface Props {\n    baseData?: OidcResponseData,\n    editableData: any,\n    editFunction: any,\n    isCreation: boolean\n}\n\nconst OIDCForm = ({baseData, editFunction, editableData, isCreation}: Props) => {\n\n    const isDisabled = () => {\n        if (isCreation) {\n            return false;\n        } else if (baseData && baseData.enabled) {\n            return true;\n        }\n        return false;\n    }\n\n    return (\n        <div>\n            <FormGroup\n                label=\"Issuer\"\n                fieldId=\"oidc-issuer\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"oidc-issuer\" name=\"issuer\" value={editableData.issuer} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.ISSUER}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client ID\"\n                fieldId=\"oidc-client-id\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"oidc-client-id\" name=\"clientId\" value={editableData.clientId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.CLIENT_ID}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client Secret\"\n                fieldId=\"oidc-client-secret\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"oidc-client-secret\" name=\"clientSecret\" value={editableData.clientSecret} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.CLIENT_SECRET}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Authorization URL\"\n                fieldId=\"oidc-authorization-url-id\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"oidc-token-url-id\" name=\"authorizationUrl\" value={editableData.authorizationUrl} />\n\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.AUTHORIZATION_URL}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Token URL\"\n                fieldId=\"authorization-url\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"authorization-url\" name=\"tokenUrl\" value={editableData.tokenUrl}/>\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.TOKEN_URL}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Public Key ID\"\n                fieldId=\"publicKeyId\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"public-key-id\" name=\"publicKeyId\" value={editableData.publicKeyId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.PUBLIC_KEY_ID}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Public Key\"\n                fieldId=\"publicKey\">\n                <TextInput isDisabled={isDisabled()} onChange={editFunction} type=\"text\" id=\"public-key\" name=\"publicKey\" value={editableData.publicKey} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{OidcHelperTextMessages.PUBLIC_KEY}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default OIDCForm;\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiToggleIdPStatus } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nexport const DisableIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n\n    const disableIdp = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        onClose();\n    }\n\n    return (\n        <Modal\n            titleIconVariant={'warning'}\n            title=\"Disable identity provider?\"\n            isOpen={isOpen}\n            variant={ModalVariant.small}\n            onClose={onClose}\n        >\n            <ModalBody>\n                Disabling your identity provider will allow users on your organization to sign-in using their Red Hat credentials.\n            </ModalBody>\n            <ModalFooter>\n                <Button variant=\"danger\" onClick={() => disableIdp()}>\n                    Disable\n                </Button>\n                <Button variant=\"link\" onClick={onClose}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n","import {Button, Modal, ModalVariant, Text, TextContent, Title} from \"@patternfly/react-core\";\nimport React, {useEffect, useState} from \"react\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {Link} from \"react-router-dom\";\nimport {apiToggleIdPStatus} from \"../ApiClient/idp-controller\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nconst IdpTestingModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    const [primaryModalAction, setPrimaryModalAction] = useState(<Button />);\n    const [testBtnEnabled, setTestBtnEnabled] = useState(false);\n    const [idpTestingModalIcon, setIdpTestingModalIcon] = useState<\"info\"|\"danger\"|\"success\">(\"info\");\n    const [idpTestingModalTitle, setIdpTestingModalTitle] = useState(\"\");\n    const [idpTestingModalBody, setIdpTestingModalBody] = useState(<Text></Text>);\n    const [idpTestingModalErrorBody, setIdpTestingModalErrorBody] = useState(\"\");\n\n    const resetTestingModal = () => {\n        setPrimaryModalAction(<Button />);\n        setTestBtnEnabled(true);\n        setIdpTestingModalIcon(\"info\");\n        setIdpTestingModalTitle(\"Identity provider testing\");\n        setIdpTestingModalBody(<Text>Testing will open a pop-up window that will authenticate with your configured identity provider. If you are not currently signed into this identity provider, please do so in the pop-up window. Please be sure that pop-ups are allowed in your browser.</Text>);\n        setIdpTestingModalErrorBody(\"\");\n    }\n\n    useEffect(() => {\n        resetTestingModal();\n    }, []);\n\n    const dismissTestingModal = () => {\n        onClose();\n        resetTestingModal();\n    }\n\n    const getTestUrl = () => {\n        const idpAliasJson = { 'idp_alias': idpAlias }\n        const idpAliasJsonString = encodeURIComponent(JSON.stringify(idpAliasJson));\n        return `${ssoBaseUrl}protocol/openid-connect/auth?client_id=idp-connectivity-testing-login-client&redirect_uri=${ssoBaseUrl}&response_mode=query&response_type=code&scope=openid&state=${idpAliasJsonString}`;\n    }\n\n    const enableIdP = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        dismissTestingModal();\n    }\n\n    function processEventData(event: MessageEvent<any>) {\n        if (event.data.success === true) {\n            setPrimaryModalAction(<Button key=\"Enable\" variant=\"primary\" onClick={enableIdP}>Enable</Button>)\n            setIdpTestingModalIcon(\"success\")\n            setIdpTestingModalTitle(\"Test successful. Enable for your organization?\")\n            setIdpTestingModalBody(<Text>Enabling will require users on your organization to authenticate through\n                your newly-configured identity provider on their next authentication. If you do not enable this now,\n                you will have to re-test again before being allowed to enable this identity provider.</Text>)\n        } else {\n            setPrimaryModalAction(<Button key=\"Dismiss\" variant=\"primary\"\n                                          onClick={dismissTestingModal}>Dismiss</Button>)\n            setIdpTestingModalIcon(\"danger\")\n            setIdpTestingModalTitle(\"Test failed\")\n            setIdpTestingModalBody(<Text>Try looking over some <Link\n                to=\"https://access.redhat.com/articles/7092870\">common mistakes</Link> and then re-testing. If that\n                doesn’t help, <Link to={\"https://access.redhat.com/support/\"}>contact support</Link>.</Text>)\n            setIdpTestingModalErrorBody(event.data.errorMsg);\n        }\n    }\n\n    const handleTestBtn = () => {\n        // this must be executed before the popup is triggered\n        window.addEventListener(\"message\", (event) => {\n            if (ssoBaseUrl.includes(event.origin)) {\n                processEventData(event);\n            }\n        });\n\n        setTestBtnEnabled(false);\n        setIdpTestingModalBody(<Text>Please complete identity provider testing in pop-up window</Text>);\n\n        window.open(getTestUrl(), \"RH IdP Integration Testing\", 'width=600,height=600,resizable,scrollbars');\n    }\n\n    return (\n        <Modal\n            titleIconVariant={idpTestingModalIcon}\n            title={idpTestingModalTitle}\n            isOpen={isOpen}\n            variant={ModalVariant.medium}\n            onClose={dismissTestingModal}\n            actions={[\n                primaryModalAction.key !== null ? primaryModalAction\n                : [\n                    <Button isDisabled={!testBtnEnabled} key=\"Test\" variant=\"primary\" onClick={handleTestBtn}>\n                        Test\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"link\" onClick={dismissTestingModal}>\n                        Cancel\n                    </Button>\n                ]\n            ]}\n        >\n            <TextContent>\n                <Text>{idpTestingModalBody}</Text>\n                <Title headingLevel={\"h3\"} hidden={!idpTestingModalErrorBody}>Error:</Title>\n                <Text hidden={!idpTestingModalErrorBody}>{idpTestingModalErrorBody}</Text>\n            </TextContent>\n        </Modal>\n    )\n}\n\nexport { IdpTestingModal };\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiDeleteIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n  idpAlias: string,\n  isOpen: boolean,\n  onClose: () => void,\n  recomputeAppState: () => void\n}\n\nexport const DeleteIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n  const chrome = useChrome();\n\n  const deleteIdp = async () => {\n    await apiDeleteIdp(chrome, idpAlias);\n    recomputeAppState();\n    onClose();\n  }\n\n  return (\n    <Modal\n      titleIconVariant={'warning'}\n      title=\"Delete identity provider?\"\n      isOpen={isOpen}\n      variant={ModalVariant.medium}\n      onClose={onClose}\n    >\n      <ModalBody>\n        Until a new integration is configured, users will log in with their Red Hat account credentials.\n        <br/><br/>\n        When a new integration is configured, users who previously linked their IdP user and Red Hat user will need to\n        repeat this step once on their next log in.\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"danger\" onClick={() => deleteIdp()}>\n          Delete\n        </Button>\n        <Button variant=\"link\" onClick={onClose}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\n","export abstract class IdpDisplayNames {\n\n    private static variableConversion: Record<string, string> = {\n        \"identityProviderEntityId\": \"Identity provider Entity ID\",\n        \"authenticationRequestsUrl\": \"Single sign-on authentication request URL\",\n        \"serviceProviderEntityId\": \"Service provider issuer\",\n        \"x509Certificate\": \"x509 certificate\",\n        \"issuer\": \"Issuer\",\n        \"clientId\": \"client ID\",\n        \"clientSecret\": \"Client Secret\",\n        \"authorizationUrl\": \"Authorization URL\",\n        \"tokenUrl\": \"Token URL\",\n        \"publicKeyId\": \"Public Key ID\",\n        \"publicKey\": \"Public Key\"\n    }\n\n    public static getPrintableString(varName :string): string {\n        return this.variableConversion[varName] ?? varName;\n    }\n}\n","export class IdpCommonMessages {\n    public static readonly UPDATE_SUCCESS_MESSAGE = 'The IDP configuration was updated successfully.';\n\n    public static readonly UPDATE_ERROR_TITLE = 'Error updating IDP configuration.';\n}\n","import React, {ReactElement, useState} from 'react';\nimport './configured-oidc-idp.scss'\nimport {IdpResponseData, OidcResponseData} from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem,\n    Alert,\n    AlertGroup,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    Popover,\n    Text,\n    TextContent,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport OIDCForm from \"../ProviderForms/oidc-form\";\nimport {DisableIdpModal} from \"../Configured/disable-idp-modal\";\nimport {IdpTestingModal} from \"../IdpTesting/idp-testing-modal\";\nimport {DeleteIdpModal} from \"../Configured/delete-idp-modal\";\nimport {IdpDisplayNames} from \"../../IdpSelfService/Constants/idp-display-names\";\nimport {IdpCommonMessages} from \"../../IdpSelfService/Constants/idp-common-messages\";\nimport {apiUpdateIdp} from \"../../IdpSelfService/ApiClient/idp-controller\";\n\ninterface Props {\n    oidcData: OidcResponseData,\n    recomputeAppState: () => void,\n    milestoneThreeEnabled: boolean\n}\n\nconst ConfiguredOidcIdp = ({ oidcData, milestoneThreeEnabled, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n    const [isTestingModalVisible, toggleTestingModalVisibility] = useState(false);\n    const [isDisabledModalVisible, toggleIsDisabledModalVisible] = useState(false);\n    const [isDeleteModalVisible, toggleIsDeleteModalVisible] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [inputData, setInputData] = useState<OidcResponseData>(oidcData);\n    const [alerts, setAlerts] = React.useState<React.ReactNode>();\n\n    // the time in milliseconds that messages will be displayed on the page\n    const messageTimeout = 12000;\n\n    /**\n     * triggered by onChange of each of the inputs, this simply updates the current state for the inputData.\n     * @param editEvent the event value provided by the event.\n     */\n    const onEdit = (editEvent:any) => {\n        if (!isEditing) {\n            setIsEditing(true);\n        }\n        const existingInput = {...inputData};\n        // @ts-ignore\n        existingInput[editEvent.currentTarget.name] = editEvent.currentTarget.value;\n        setInputData(existingInput)\n    }\n\n    const scrollToTop = () => {\n        document.getElementById('headerAnchor')!.scrollIntoView({behavior: 'smooth'});\n    }\n\n    /**\n     * throws a fresh alert component into the alert block with green background to indicate success\n     * @param message the text displayed in the alert\n     */\n    const showSuccessMessage = (message: string) => {\n        setAlerts(<Alert variant=\"success\" title={message} timeout={messageTimeout} onTimeout={() => { setAlerts([]) }}/>);\n        scrollToTop();\n    }\n\n    /**\n     * throws a fresh alert component into the alert block with red background to indicate an error.\n     * @param messages the text displayed in the error.\n     */\n    const setErrorMessage = (messages: Record<string, string>) => {\n        const errorList: ReactElement[] = [];\n        const keysList = Object.keys(messages);\n        keysList.forEach(key => {\n            errorList.push(<div key={key}><span className=\"bolderKey\">{IdpDisplayNames.getPrintableString(key)}:</span> {messages[key]}</div>)\n        })\n        if (keysList.length > 0) {\n            setAlerts(<Alert variant=\"danger\" title={IdpCommonMessages.UPDATE_ERROR_TITLE}>{errorList}</Alert>);\n            scrollToTop();\n        }\n        else {\n            setAlerts([]);\n        }\n    }\n\n    /**\n     * submit api request to update the existing idp configuration settings.\n     */\n    const updateIdpSettings = () => {\n        setErrorMessage({});\n\n        // need to destructure the existing inputData\n        const {\n            providerId,\n            issuer,\n            clientId,\n            clientSecret,\n            authorizationUrl,\n            tokenUrl,\n            publicKey,\n            publicKeyId\n        } = inputData;\n\n        const updateData = {\n            providerId,\n            issuer,\n            clientId,\n            clientSecret,\n            authorizationUrl,\n            tokenUrl,\n            publicKey,\n            publicKeyId\n        }\n\n        apiUpdateIdp(chrome, updateData, (responseBody: IdpResponseData) => {\n            if (responseBody.error && responseBody.fields) {\n                const errorFields = Array.isArray(responseBody.fields)\n                    ? Object.fromEntries(responseBody.fields.map((msg, index) => [`${index}`, msg]))\n                    : responseBody.fields;\n\n                setErrorMessage(errorFields);\n            } else {\n                showSuccessMessage(IdpCommonMessages.UPDATE_SUCCESS_MESSAGE);\n                setIsEditing(false);\n                setInputData(prevData => ({\n                    ...prevData,\n                    lastUpdatedDate: responseBody.lastUpdatedDate,\n                    lastUpdatedBy: responseBody.lastUpdatedBy\n                }));\n            }\n        }).catch((error) => {\n            console.error(\"Failed to update IdP:\", error);\n        });\n    }\n\n    /**\n     *  determines the action button that should be displayed.\n     */\n    const actionButton = () => {\n        if (milestoneThreeEnabled) {\n            if (oidcData.enabled) {\n                return (\n                    <ActionListItem>\n                    <Button variant={\"danger\"} onClick={() => toggleIsDisabledModalVisible(true)}>\n                        Disable\n                    </Button>\n                    </ActionListItem>\n                )\n            }\n            if (isEditing) {\n                return (\n                    <Button onClick={() => updateIdpSettings()}>\n                        Update\n                    </Button>\n                )\n            }\n            return (\n                <Button onClick={() => toggleTestingModalVisibility(true)}>\n                    Test and enable\n                </Button>\n            );\n        }\n        return (\n            <>\n                <Popover\n                    triggerAction=\"hover\"\n                    aria-label=\"Hoverable popover\"\n                    headerContent={<div>Read-Only</div>}\n                    bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                        enhancements will provide the ability to edit.</div>}\n                    footerContent=\"\">\n                    <ActionListItem>\n                        {oidcData.enabled\n                            ? <Button variant=\"danger\" isDisabled>\n                                Disable\n                            </Button>\n                            : <>\n                                <Button variant=\"primary\" isDisabled>\n                                    Test and enable\n                                </Button>\n                                <Button variant=\"link\" isDanger isDisabled>\n                                    Delete identity provider\n                                </Button>\n                            </>\n                        }\n                    </ActionListItem>\n                </Popover>\n            </>\n        )\n    }\n\n    return (\n        <Form>\n            <AlertGroup id=\"userNotification\" isLiveRegion className=\"alertList\">\n                {alerts}\n            </AlertGroup>\n\n            <OIDCForm baseData={oidcData} editableData={inputData} editFunction={onEdit} isCreation={false}/>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon/>\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"metadata-url\"\n                    name=\"metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}.well-known/openid-configuration`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon/>\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${oidcData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <ActionList>\n                <ActionListItem>\n                    {actionButton()}\n                </ActionListItem>\n                <ActionListItem>\n                    <Button variant=\"link\" onClick={() => toggleIsDeleteModalVisible(true)} isDanger>\n                        Delete identity provider\n                    </Button>\n                </ActionListItem>\n                {isDisabledModalVisible && <DisableIdpModal idpAlias={oidcData.idpAlias} isOpen={isDisabledModalVisible}\n                                                            onClose={() => toggleIsDisabledModalVisible(false)}\n                                                            recomputeAppState={recomputeAppState}/>}\n                {isTestingModalVisible && <IdpTestingModal idpAlias={oidcData.idpAlias} isOpen={isTestingModalVisible}\n                                                           onClose={() => toggleTestingModalVisibility(false)}\n                                                           recomputeAppState={recomputeAppState}/>}\n                {isDeleteModalVisible && <DeleteIdpModal idpAlias={oidcData.idpAlias} isOpen={isDeleteModalVisible}\n                                                         onClose={() => toggleIsDeleteModalVisible(false)}\n                                                         recomputeAppState={recomputeAppState}/>}\n            </ActionList>\n        </Form>\n    )\n}\n\nexport default ConfiguredOidcIdp;\n","import {\n    Button,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Popover, TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {SamlHelperTextMessages} from \"../Constants/saml-helper-text-messages\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport React from \"react\";\nimport {SamlResponseData} from \"../CommonInterfaces/idp-response-types\";\n\ninterface Props {\n    baseData?: SamlResponseData,\n    editableData: any,\n    editFunction: any,\n}\n\nconst SAMLForm = ({baseData, editFunction, editableData}: Props) => {\n    return (\n        <div>\n            <FormGroup\n                label=\"Identity provider Entity ID\"\n                fieldId=\"saml-entity-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>{SamlHelperTextMessages.ENTITY_ID}</div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled={baseData && baseData.enabled} onChange={editFunction} type=\"text\" id=\"saml-entity-id\" name=\"identityProviderEntityId\" value={editableData.identityProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.ENTITY_ID}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Single sign-on authentication request URL\"\n                fieldId=\"saml-authn-request-url\">\n                <TextInput isDisabled={ baseData && baseData.enabled} onChange={editFunction} type=\"text\" id=\"saml-authn-request-url\" name=\"authenticationRequestsUrl\" value={editableData.authenticationRequestsUrl} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Service provider issuer\"\n                fieldId=\"saml-provider-issuer\">\n                <TextInput isDisabled={ baseData && baseData.enabled} onChange={editFunction} type=\"text\" id=\"saml-provider-issuer\" name=\"serviceProviderEntityId\" value={editableData.serviceProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"x509 certificate\"\n                fieldId=\"saml-x509-certificate\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>A PEM certificate that is used to check for signatures.</div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextArea resizeOrientation=\"vertical\" isDisabled={baseData && baseData.enabled} type=\"text\" onChange={editFunction} id=\"saml-authn-request-url\" name=\"x509Certificate\" value={editableData.x509Certificate} />\n                <FormHelperText>\n                    <HelperText>\n                        {SamlHelperTextMessages.X509_CERTIFICATE.map((message, index) => (\n                            <HelperTextItem key={index}>\n                                <p dangerouslySetInnerHTML={{__html: message}}/>\n                            </HelperTextItem>\n                        ))}\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default SAMLForm;\n","import {Button, ClipboardCopy, FormGroup, Popover} from \"@patternfly/react-core\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport React from \"react\";\n\ninterface Props {\n    baseUrl: string;\n    idpAlias: string;\n}\n\nconst SamlStaticContent = ({baseUrl, idpAlias}: Props) => {\n\n    return (\n        <div>\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"service-provider-metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"service-provider-metadata-url\"\n                    name=\"service-provider-metadata-url\"\n                    isReadOnly>\n                    {`${baseUrl}broker/${idpAlias}/endpoint/descriptor`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This is where your identity provider will redirect users to authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${baseUrl}broker/${idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default SamlStaticContent;\n","import { createContext } from \"react\";\n\n// @ts-ignore\nconst messagesContext = createContext({\n    messages: [],\n    setMessages: (message:any) => {}\n});\n\nexport default messagesContext;\n","export abstract class IdpDisplayNames {\n\n    private static variableConversion = {\n        \"identityProviderEntityId\": \"Identity provider Entity ID\",\n        \"authenticationRequestsUrl\": \"Single sign-on authentication request URL\",\n        \"serviceProviderEntityId\": \"Service provider issuer\",\n        \"x509Certificate\": \"x509 certificate\",\n        \"authorizationUrl\": \"Authorization URL\",\n        \"clientId\": \"Client ID\",\n        \"clientSecret\": \"Client Secret\",\n        \"issuer\": \"Issuer\",\n        \"tokenUrl\": \"Token URL\",\n        \"publicKey\": \"Public Key\",\n        \"publicKeyId\": \"Public Key Id\",\n    }\n\n    public static getPrintableString(varName :string): string {\n        // @ts-ignore\n        return this.variableConversion[varName];\n    }\n}\n","import React, {ReactElement} from 'react';\nimport {Alert} from \"@patternfly/react-core\";\nimport {IdpDisplayNames} from \"../Constants/idpDisplayNames\";\nimport {IdpCommonMessages} from \"../Constants/idp-common-messages\";\nimport {errorResponseData} from \"../CommonInterfaces/idp-response-types\";\n\nconst scrollToTop = () => {\n    document.getElementById('headerAnchor')!.scrollIntoView({behavior: 'smooth'});\n}\n\nexport const showErrorMessage = (messages: errorResponseData | undefined, setMessages: Function): void => {\n    if (messages === undefined) {\n        return;\n    }\n    const errorList: ReactElement[] = [];\n    const keysList = Object.keys(messages!);\n    keysList.forEach(key => {\n        errorList.push(<div key={key}><span className=\"bolderKey\">{IdpDisplayNames.getPrintableString(key)}:</span> {messages[key]}</div>)\n    })\n    if (keysList.length > 0) {\n        setMessages(<Alert variant=\"danger\" title={IdpCommonMessages.UPDATE_ERROR_TITLE}>{errorList}</Alert>);\n        scrollToTop();\n    }\n    else {\n        setMessages([]);\n    }\n}\n\n// the time in milliseconds that messages will be displayed on the page\nconst messageTimeout = 12000;\n\n/**\n * throws a fresh alert component into the alert block with green background to indicate success\n * @param message the text displayed in the alert\n * @param setMessages the setter function that needs to be passed from the provided context\n */\nexport const showSuccessMessage = (message: string, setMessages: Function) => {\n    setMessages(<Alert variant=\"success\" title={message} timeout={messageTimeout} onTimeout={() => { setMessages([]) }}/>);\n    scrollToTop();\n}\n","import React, {useState, useContext} from 'react';\nimport './configured-saml-idp.scss'\nimport {errorResponseData, IdpResponseData, SamlResponseData} from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem,\n    Button,\n    Form,\n    Text,\n    TextContent,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport { IdpTestingModal } from \"../IdpTesting/idp-testing-modal\";\nimport { DisableIdpModal } from \"../Configured/disable-idp-modal\";\nimport { DeleteIdpModal } from './delete-idp-modal';\nimport {apiUpdateIdp} from \"../ApiClient/idp-controller\";\nimport SAMLForm from '../ProviderForms/saml-form';\nimport SamlStaticContent from \"../ProviderForms/saml-static-content\";\nimport messagesContext from \"../CommonInterfaces/messages-context\";\nimport {showSuccessMessage, showErrorMessage} from '../CommonInterfaces/messaging-functions';\nimport {IdpCommonMessages} from \"../Constants/idp-common-messages\";\n\ninterface Props {\n    samlData: SamlResponseData,\n    recomputeAppState: () => void\n}\n\nconst ConfiguredSamlIdp = ({ samlData, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n    const [isTestingModalVisible, toggleTestingModalVisibility] = useState(false);\n    const [isDisabledModalVisible, toggleIsDisabledModalVisible] = useState(false);\n    const [isDeleteModalVisible, toggleIsDeleteModalVisible] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [inputData, setInputData] = useState<SamlResponseData>(samlData);\n\n    const {setMessages} = useContext(messagesContext);\n\n    /**\n     * triggered by onChange of each of the inputs, this simply updates the current state for the inputData.\n     * @param editEvent the event value provided by the event.\n     */\n    const onEdit = (editEvent:any) => {\n        if (!isEditing) {\n            setIsEditing(true);\n        }\n        const existingInput = {...inputData};\n        // @ts-ignore\n        existingInput[editEvent.currentTarget.name] = editEvent.currentTarget.value;\n        setInputData(existingInput)\n    }\n\n\n    /**\n     * submit api request to update the existing idp configuration settings.\n     */\n    const updateIdpSettings = () => {\n        showErrorMessage([] as unknown as errorResponseData, setMessages);\n\n        // need to destructure the existing inputData\n        const {\n            providerId,\n            identityProviderEntityId,\n            authenticationRequestsUrl,\n            serviceProviderEntityId,\n            x509Certificate\n        } = inputData;\n\n        const updateData = {\n            providerId,\n            identityProviderEntityId,\n            authenticationRequestsUrl,\n            serviceProviderEntityId,\n            x509Certificate\n        }\n\n        apiUpdateIdp(chrome, updateData, (responseBody: IdpResponseData) => {\n            // show some form of toast indicating that the update was successful.\n            if (responseBody.error) {\n                showErrorMessage(responseBody.fields as unknown as errorResponseData, setMessages);\n            }\n            else {\n                showSuccessMessage(IdpCommonMessages.UPDATE_SUCCESS_MESSAGE, setMessages);\n                // after a successful update be sure to reset the editing state\n                setIsEditing(false);\n                // update the last updated messages\n                const existingInput = {...inputData};\n                existingInput.lastUpdatedDate = responseBody.lastUpdatedDate\n                existingInput.lastUpdatedBy = responseBody.lastUpdatedBy;\n                setInputData(existingInput)\n            }\n        });\n    }\n\n    /**\n     *  determines the action button that should be displayed.\n     */\n    const actionButton = () => {\n        if (samlData.enabled) {\n            return (\n                <Button variant={\"danger\"} onClick={() => toggleIsDisabledModalVisible(true)}>\n                    Disable\n                </Button>\n            )\n        }\n        if (isEditing) {\n            return (\n                <Button onClick={() => updateIdpSettings()}>\n                    Update\n                </Button>\n            )\n        }\n        return (\n            <Button onClick={() => toggleTestingModalVisibility(true)}>\n                Test and enable\n            </Button>\n        )\n    }\n\n    return (\n        <Form>\n\n            {/* Render default SAML form components */}\n            <SAMLForm baseData={samlData} editableData={inputData} editFunction={onEdit} />\n\n            {/* Statically generated content specific for configured SAML */}\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <SamlStaticContent baseUrl={ssoBaseUrl} idpAlias={samlData.idpAlias} />\n\n            <ActionList>\n                <ActionListItem>\n                    {actionButton()}\n                </ActionListItem>\n                <ActionListItem>\n                    <Button variant=\"link\" onClick={() => toggleIsDeleteModalVisible(true)} isDanger>\n                        Delete identity provider\n                    </Button>\n                </ActionListItem>\n                {isDisabledModalVisible && <DisableIdpModal idpAlias={samlData.idpAlias} isOpen={isDisabledModalVisible}\n                                                            onClose={() => toggleIsDisabledModalVisible(false)}\n                                                            recomputeAppState={recomputeAppState}/>}\n                {isTestingModalVisible && <IdpTestingModal idpAlias={samlData.idpAlias} isOpen={isTestingModalVisible}\n                                                           onClose={() => toggleTestingModalVisibility(false)}\n                                                           recomputeAppState={recomputeAppState}/>}\n                {isDeleteModalVisible && <DeleteIdpModal idpAlias={samlData.idpAlias} isOpen={isDeleteModalVisible}\n                                                         onClose={() => toggleIsDeleteModalVisible(false)}\n                                                         recomputeAppState={recomputeAppState}/>}\n            </ActionList>\n        </Form>\n    )\n}\n\nexport default ConfiguredSamlIdp;\n","import {AuditTypeFormatter} from '../../../Components/AuditInfo/audit-info';\n\nexport class SimpleText implements AuditTypeFormatter {\n    readonly BLANK_VALUE = '';\n\n    // eslint-disable-next-line class-methods-use-this\n    format(value: string): string {\n        if (value.trim().length > 0) {\n            return value;\n        }\n        return this.BLANK_VALUE;\n    }\n}\n","import React from 'react';\nimport {SimpleText} from \"../../Components/AuditInfo/formatters/simple-text\";\nimport './audit-info.scss'\n\nexport interface AuditTypeFormatter {\n    // eslint-disable-next-line no-unused-vars\n    format(value: string): string;\n}\n\ntype AuditInfoProps = {\n    preValue?: string;\n    value: string;\n    postValue?: string;\n    formatter?: AuditTypeFormatter;\n};\n\nconst AuditInfo: React.FC<AuditInfoProps> = ({ preValue, value, postValue, formatter = new SimpleText() }) => {\n    return <div className={'audit-info'}>{preValue} {formatter.format(value)} {postValue} </div>;\n};\n\nexport default AuditInfo;\n","import './configured-idp.scss';\nimport ConfiguredOidcIdp from './configured-oidc-idp';\nimport ConfiguredSamlIdp from './configured-saml-idp';\nimport React, {useState, useEffect, ReactElement} from 'react';\nimport {\n    Alert,\n    Card,\n    CardBody, Form, FormGroup, Label,\n    Spinner, Title\n} from '@patternfly/react-core';\n\nimport {IdpResponseData, OidcResponseData, SamlResponseData} from \"../CommonInterfaces/idp-response-types\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport WrenchIcon from \"@patternfly/react-icons/dist/esm/icons/wrench-icon\";\nimport AuditInfo from \"../../../Components/AuditInfo/audit-info\";\n\ninterface Props {\n    responseData: IdpResponseData,\n    recomputeAppState: () => void\n}\n\nconst ConfiguredIdp = ({responseData, recomputeAppState}: Props) => {\n\n    // flag to control which values get displayed\n    const isM3Enabled = useFlag('iamconsole.IDPIntegration.m3');\n\n    const [providerType, setProviderType] = useState<ReactElement>(\n       <Spinner/>\n    )\n\n    useEffect(() => {\n        if (responseData.providerId === 'saml-improved') {\n            setProviderType(<ConfiguredSamlIdp samlData={responseData as SamlResponseData} recomputeAppState={recomputeAppState}/>);\n        }\n        else if (responseData.providerId === 'oidc-improved') {\n            setProviderType(<ConfiguredOidcIdp oidcData={responseData as OidcResponseData} milestoneThreeEnabled={isM3Enabled} recomputeAppState={recomputeAppState}/>);\n        }\n    }, [responseData]);\n\n    return (\n        <React.Fragment>\n            <Card isCompact={false} isLarge={true}>\n                <CardBody>\n                    <Form>\n                        { !isM3Enabled && responseData.providerId === 'oidc-improved' &&\n                            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                                <p>Forthcoming enhancements will provide the ability to edit.</p>\n                            </Alert>\n                        }\n\n                        <Title headingLevel={\"h1\"} className=\"pf-v5-u-display-flex\">\n                            {responseData.displayName}\n                            {responseData.enabled\n                                ? <Label color=\"green\" icon={<CheckCircleIcon />} className=\"pf-v5-u-ml-md\">\n                                    Enabled\n                                </Label>\n                                : <Label color=\"grey\" icon={<WrenchIcon />} className=\"pf-v5-u-ml-md\">\n                                    Disabled\n                                </Label>\n                            }\n                        </Title>\n\n                        { (responseData.createdDate || responseData.lastUpdatedDate) && (\n                            <FormGroup fieldId=\"audit-data\">\n                                { responseData.createdDate && (\n                                    <AuditInfo preValue={'Created on'} value={new Date(responseData.createdDate).toLocaleDateString()}/>\n                                )}\n                                { responseData.lastUpdatedDate && (\n                                    <AuditInfo preValue={'Last updated on'} value={new Date(responseData.lastUpdatedDate).toLocaleTimeString()} postValue={'by ' + responseData.lastUpdatedBy}/>\n                                )}\n                            </FormGroup>\n                        )}\n\n                        { responseData.enabled && responseData.providerId === \"saml-improved\" &&\n                            <Alert variant=\"info\" isInline title=\"Disable your configuration to edit fields.\" />\n                        }\n                        {providerType}\n                    </Form>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default ConfiguredIdp;\n","import {Button, ClipboardCopy, FormGroup, Popover} from \"@patternfly/react-core\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport React from \"react\";\n\ninterface Props {\n    baseUrl: string;\n    idpAlias: string;\n}\n\nconst OidcStaticContent = ({baseUrl, idpAlias}: Props) => {\n\n    return (\n        <div>\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"service-provider-metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"service-provider-metadata-url\"\n                    name=\"service-provider-metadata-url\"\n                    isReadOnly>\n                    {`${baseUrl}broker/${idpAlias}/endpoint/descriptor`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This is where your identity provider will redirect users to authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${baseUrl}broker/${idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default OidcStaticContent;\n","\nimport React, {useState, useContext} from 'react';\nimport OIDCForm from '../ProviderForms/oidc-form';\nimport {\n    ActionList,\n    ActionListItem,\n    Button,\n    Card,\n    CardBody,\n    Form,\n    Text,\n    TextContent,\n    TextVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport {OidcRequestData} from \"../CommonInterfaces/idp-request-types\";\nimport OidcStaticContent from \"../ProviderForms/oidc-static-content\";\nimport {apiCreateIdp} from \"../ApiClient/idp-controller\";\nimport {showErrorMessage} from \"../CommonInterfaces/messaging-functions\";\nimport messagesContext from \"../CommonInterfaces/messages-context\";\nimport {errorResponseData, IdpResponseData} from \"../CommonInterfaces/idp-response-types\";\n\ninterface Props {\n    chromeRef: any\n}\n\nconst CreateOidcIdp = ({chromeRef}: Props) => {\n\n    const [inputData, setInputData] = useState<OidcRequestData>(\n        {\n            providerId: \"\",\n            clientId: \"\",\n            clientSecret: \"\",\n            authorizationUrl: \"\",\n            tokenUrl: \"\",\n            issuer: \"\",\n            publicKey: \"\",\n            publicKeyId: \"\"\n        }\n    );\n    const {setMessages} = useContext(messagesContext);\n\n    const createIDPCall = () => {\n        const cleanRequest = {...inputData};\n        cleanRequest.providerId = \"oidc-improved\";\n        apiCreateIdp(chromeRef, cleanRequest, (responseBody: IdpResponseData) => {\n            if (responseBody.error) {\n                showErrorMessage(responseBody.fields as unknown as errorResponseData, setMessages);\n            }\n            else {\n                location.reload();\n            }\n        })\n    }\n\n    /**\n     * Called when a field gets edited. We needed a function that cloned the existing inputData, made the changes,\n     * and then applied them\n     * @param editEvent The event triggered when updating text within the form\n     */\n    const editInputFields = (editEvent: any) => {\n        const existingInput = {...inputData};\n        // @ts-ignore\n        existingInput[editEvent.currentTarget.name] = editEvent.currentTarget.value;\n        setInputData(existingInput);\n    }\n\n    return (\n        <Card>\n            <CardBody>\n                <Form>\n                    <Title headingLevel={\"h1\"}>OIDC Creation Form</Title>\n                    <OIDCForm editableData={inputData} editFunction={editInputFields} isCreation={true} />\n\n                    {/* Statically generated content specific for configured SAML */}\n                    <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n                    <TextContent>\n                        <Text component={TextVariants.p}>\n                            Use these URLs to assist in completing setup within your identity provider.\n                        </Text>\n                    </TextContent>\n\n                    <OidcStaticContent baseUrl={\"something\"} idpAlias={\"somethingElse\"}/>\n\n                    <ActionList>\n                        <ActionListItem>\n                            <Button variant=\"primary\" onClick={createIDPCall}>\n                                Create OIDC IDP\n                            </Button>\n                        </ActionListItem>\n                    </ActionList>\n                </Form>\n            </CardBody>\n        </Card>\n    )\n}\nexport default CreateOidcIdp;\n","\nimport React, {useState, useContext} from 'react';\nimport SAMLForm from '../ProviderForms/saml-form';\nimport {\n    ActionList,\n    ActionListItem,\n    Button,\n    Card,\n    CardBody,\n    Form,\n    Text,\n    TextContent, TextVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport {SamlRequestData} from \"../CommonInterfaces/idp-request-types\";\nimport OidcStaticContent from \"../ProviderForms/oidc-static-content\";\nimport {apiCreateIdp} from \"../ApiClient/idp-controller\";\nimport { showErrorMessage } from '../CommonInterfaces/messaging-functions';\nimport messagesContext from \"../CommonInterfaces/messages-context\";\nimport {errorResponseData, IdpResponseData} from \"../CommonInterfaces/idp-response-types\";\n\ninterface Props {\n    chromeRef: any\n}\n\nconst CreateOidcIdp = ({chromeRef}: Props) => {\n    const [inputData, setInputData] = useState<SamlRequestData>(\n        {\n            identityProviderEntityId: \"\",\n            authenticationRequestsUrl: \"\",\n            serviceProviderEntityId: \"\",\n            x509Certificate: \"\",\n            providerId: \"\"\n        }\n    );\n    const {setMessages} = useContext(messagesContext);\n\n    /**\n     * Triggered by the create button at the bottom of the screen, this function makes the call to the Create api\n     * endpoint.\n     */\n    const createIDPCall = () => {\n        const cleanRequest = {...inputData};\n        cleanRequest.providerId = \"saml-improved\";\n        cleanRequest.x509Certificate = inputData.x509Certificate.replace(/[\\s\\n\\r]/gu, '');\n        apiCreateIdp(chromeRef, cleanRequest, (responseBody: IdpResponseData) => {\n            if (responseBody.error) {\n                showErrorMessage(responseBody.fields as unknown as errorResponseData, setMessages);\n            }\n            else {\n                location.reload();\n            }\n        })\n    }\n\n    /**\n     * Called when a field gets edited. We needed a function that cloned the existing inputData, made the changes,\n     * and then applied them\n     * @param editEvent The event triggered when updating text within the form\n     */\n    const editInputFields = (editEvent:any) => {\n        const existingInput = {...inputData}\n        // @ts-ignore\n        existingInput[editEvent.currentTarget.name] = editEvent.currentTarget.value;\n        setInputData(existingInput);\n    }\n\n    return (\n        <Card>\n            <CardBody>\n                <Form>\n                    <Title headingLevel={\"h1\"}>SAML Creation form</Title>\n                    <SAMLForm editableData={inputData} editFunction={editInputFields} />\n\n                    {/* Statically generated content specific for configured SAML */}\n                    <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n                    <TextContent>\n                        <Text component={TextVariants.p}>\n                            Use these URLs to assist in completing setup within your identity provider.\n                        </Text>\n                    </TextContent>\n\n                    <OidcStaticContent baseUrl={\"Something\"} idpAlias={\"somethingElse\"} />\n\n                    <ActionList>\n                        <ActionListItem>\n                            <Button variant=\"primary\" onClick={createIDPCall}>\n                                Create SAML IDP\n                            </Button>\n                        </ActionListItem>\n                    </ActionList>\n                </Form>\n            </CardBody>\n        </Card>\n    )\n}\nexport default CreateOidcIdp;\n","import './idp-selector.scss'\nimport React, {useState, useEffect} from 'react';\nimport {IdpResponseData, IdpResponseDataInitialState} from \"../CommonInterfaces/idp-response-types\";\nimport { useFlag } from '@unleash/proxy-client-react';\nimport IdpNotSetup from \"../IdpNotSetup/idp-not-setup\";\nimport PropTypes from \"prop-types\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {apiGetIdp} from '../ApiClient/idp-controller';\nimport {FlowStep} from '../Constants/flow-step';\nimport FlowTemplate from '../IdpFlowTemplate/flow-template';\nimport ConfiguredIdp from '../Configured/configured-idp';\nimport CreateOidcIdp from \"../Creation/create-oidc-idp\";\nimport CreateSamlIdp from \"../Creation/create-saml-idp\";\nimport {PageHeader, PageHeaderTitle} from \"@redhat-cloud-services/frontend-components/PageHeader\";\nimport {AlertGroup, Button, Text, TextContent, TextVariants} from \"@patternfly/react-core\";\nimport ExternalLinkSquareAltIcon from \"@patternfly/react-icons/dist/esm/icons/external-link-alt-icon\";\nimport messagesContext from \"../CommonInterfaces/messages-context\";\nimport DisabledPage from \"../../../Components/DisabledPage/disabled-page\";\n\ninterface Props {\n    accessToken: string\n}\n\nconst IdpSelector = ({accessToken}: Props) => {\n    const chrome = useChrome();\n\n    // has the admin's account been configured with an idp. If so display the management screen.\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isAllowedToConfigure, setIsAllowedToConfigure] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInit, setIsInit] = useState(true);\n    const [idpData, setIdpData] = useState(IdpResponseDataInitialState);\n    const [configFlow, setConfigFlow] = useState(FlowStep.SAML_CONFIG);\n    const [messages, setMessages] = useState([]);\n\n    const isM3Enabled = useFlag('iamconsole.IDPIntegration.m3');\n    const docsLink = \"https://docs.redhat.com/en/documentation/red_hat_customer_portal/1/html/configuring_identity_provider_integration/index\";\n\n    const recomputeAppState = () => {\n        apiGetIdp(chrome)\n        .then(response => {\n            if (response.status === 204) {\n                return {status: ''};\n            }\n            return response.json()\n        })\n        .then((data: IdpResponseData) => {\n            if (data.providerId === 'oidc-improved' || data.providerId === 'saml-improved') {\n                setIdpData(data);\n                setIsLoading(false);\n                setIsConfigured(true);\n            } else if (data.error) {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(false);\n            } else {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(true);\n            }\n        })\n        .catch(error => {\n            console.error('Error: ', error);\n            setIsLoading(false);\n        })\n    }\n\n    useEffect(() => {\n        recomputeAppState();\n    }, [])\n\n    /**\n     * handles the correct configuration path to display. called directly in the jsx\n     * and relies on the configFlow state\n     */\n    const configPathChosen = () => {\n        // handle if the user selecting SAML\n        if (configFlow === FlowStep.SAML_CONFIG) {\n            // otherwise return SAML mutability page\n            return <CreateSamlIdp chromeRef={chrome}/>\n        }\n        // return OIDC page\n        return <CreateOidcIdp chromeRef={chrome} />\n    }\n\n    return (\n        <React.Fragment>\n            <span id=\"headerAnchor\"></span>\n            <PageHeader className=\"wizardHeader\">\n                <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-v5-u-mb-lg\"/>\n                <TextContent>\n                    Manage identity provider integration for your organization.{' '}\n                    <Text component={TextVariants.a}\n                          className={(isAllowedToConfigure || isConfigured) ? '' : \"hiddenPage\"}>\n                        <Button variant=\"link\" href={docsLink} target=\"_blank\" component=\"a\" isInline\n                                icon={<ExternalLinkSquareAltIcon/>} iconPosition=\"right\" className=\"pf-v5-u-ml-xs\">\n                            Learn more about identity provider integration\n                        </Button>\n                    </Text>\n                </TextContent>\n            </PageHeader>\n            <messagesContext.Provider value={{messages, setMessages}}>\n                <AlertGroup id=\"userNotification\" isLiveRegion className=\"alertList\">\n                    {messages}\n                </AlertGroup>\n                <div className={!isLoading && isConfigured ? '' : 'hiddenPage'}>\n                    <ConfiguredIdp responseData={idpData} recomputeAppState={recomputeAppState}/>\n                </div>\n                <div>\n                    <div className={(!isLoading && !isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                        <IdpNotSetup configChosen={(chosen: any) => {\n                            setIsInit(false)\n                            setConfigFlow(chosen);\n                        }}/>\n                    </div>\n                    <div className={(!isLoading && !isConfigured && !isInit) ? 'Page' : 'hiddenPage'}>\n                        {isM3Enabled ? configPathChosen() : <FlowTemplate accessToken={accessToken}/>}\n                    </div>\n                    <div className={(!isLoading && !isConfigured && isInit && !isAllowedToConfigure) ? 'Page' : 'hiddenPage'}>\n                        <DisabledPage></DisabledPage>\n                    </div>\n                </div>\n            </messagesContext.Provider>\n\n        </React.Fragment>\n    );\n}\n\n\nIdpSelector.propTypes = {\n    accessToken: PropTypes.string\n}\n\nexport default IdpSelector;\n","import './identity-provider-integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport DisabledPage from \"../../Components/DisabledPage/disabled-page\";\nimport {isAdminUser} from '../../Utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\nimport NonAdminIDP from \"../../Components/NonAdminUser/non-admin-idp\";\nimport IdpSelector from \"../../Apps/IdpSelfService/IDPSelector/Idp-Selector\";\n\n\nconst IdentityProviderIntegration = () => {\n    const chrome = useChrome();\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: false,\n        selfServiceIDP: <DisabledPage/>\n    })\n    const isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        // eslint-disable-next-line no-undef\n        chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            userToken = token;\n            if (!isAdminUser(userToken!)) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <NonAdminIDP/>\n                })\n                return;\n            }\n            // if the user is in fact and admin user then render TwoFactorCheckOld\n            if (isAdminUser(userToken!) && isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <IdpSelector accessToken={userToken!} />\n                })\n            }\n        })\n    }, []);\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n}\n\nexport default IdentityProviderIntegration\n","import {ValidationTemplate} from \"../Apps/IdpSelfService/CommonInterfaces/oidc-validation\";\nimport {UserChoices} from \"../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport forge from 'node-forge';\n\nfunction parseToken (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload;\n}\n\nexport function isAdminUser (token :string) {\n    return parseToken(token).is_org_admin;\n}\n\n\nexport function getOrgId (token :string) {\n    return parseToken(token).org_id;\n}\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\nconst isBase64 = (str: string): boolean => {\n    if (!(/^[A-Za-z0-9+/]*={0,2}$/u).test(str) || str.length % 4 !== 0) {\n        return false;\n    }\n\n    try {\n        const decoded = forge.util.decode64(str);\n        const reEncoded = forge.util.encode64(decoded);\n        return reEncoded === str;\n    } catch {\n        return false;\n    }\n};\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult {\n    const INVALID_CERT_MESSAGE = 'This is invalid, please check for uncommonly used characters. Be sure to exclude the start and end block';\n    const INVALID_ENTITYID_MESSAGE = 'This is invalid. This field is intended to consist of only alphanumeric characters and valid URL\\'s'\n    const EXPIRED_CERT_MESSAGE = 'Certificate is expired';\n    const INVALID_TEXT_MESSAGE = 'This text is invalid please check for uncommonly used characters or spaces';\n    const INVALID_URL_MESSAGE = 'This field needs to be a valid URL';\n\n    if (required && !input) {\n        return {\n            status: 'error',\n            message: type === 'RADIO' ? 'A selection must be made' : 'This field can not be left empty'\n        }\n    }\n\n    let verified: VerificationResult;\n    let results: boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            results = !(/[^A-Za-z0-9]/u).test(input);\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_TEXT_MESSAGE\n            }\n            break;\n        case 'ENTITYID':\n            results = (/^[a-z0-9._:/?#@!&()*+,;=-]+$/iu).test(input);\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_ENTITYID_MESSAGE\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line\n            results = (/^https:\\/\\/([a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+)(:\\d{1,5})?(\\/\\S*)?$|^http:\\/\\/localhost(:\\d{1,5})?(\\/\\S*)?$/gu).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_URL_MESSAGE\n            }\n            break;\n        case 'x509':\n            try {\n                // strip out white spaces and line breaks\n                const sanitizedCertChainArray = input.replace(/[\\s\\n\\r]/gu, '').split(',');\n\n                // check if all cert chain is properly encoded in base64\n                for (const cert of sanitizedCertChainArray) {\n                    if (!isBase64(cert.trim())) {\n                        return {\n                            status: 'error',\n                            message: INVALID_CERT_MESSAGE\n                        };\n                    }\n                }\n\n                // check cert expiration (verify only the first cert in the chain)\n                const now = new Date();\n                const firstCertInTheChain = sanitizedCertChainArray[0].trim();\n                const certWithHeaders = `-----BEGIN CERTIFICATE-----\\n${firstCertInTheChain.match(/.{1,64}/gu)?.join('\\n')}\\n-----END CERTIFICATE-----`\n                const cert = forge.pki.certificateFromPem(certWithHeaders);\n\n                if (now < cert.validity.notBefore || now > cert.validity.notAfter) {\n                    return {\n                        status: 'error',\n                        message: EXPIRED_CERT_MESSAGE\n                    }\n                }\n\n                verified = {\n                    status: 'default',\n                    message: '',\n                }\n            } catch (e) {\n                return {\n                    status: 'error',\n                    message: INVALID_CERT_MESSAGE\n                }\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n\n    return verified;\n}\n\n/**\n * \n * @param {Object} choices state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @param {String} currentState variable being changed\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\n// eslint-disable-next-line\nexport function isFailureTriggered (choices :UserChoices, currentState :string, validations: ValidationTemplate, setValidations: Function) {\n    let failureTriggered = false;\n    const update: ValidationTemplate = {};\n    Object.keys(validations).forEach(validationKey => {\n        update[validationKey] = {};\n        if (validationKey === currentState) {\n            Object.keys(validations[currentState]).forEach(field => {\n\n                const submittedValue = choices && choices.selections[field];\n                // @ts-ignorer\n                const submittedType = validations[validationKey][field].inputType;\n\n                // @ts-ignore\n                const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n                if (verificationObject.status !== 'default') {\n                    failureTriggered = true;\n                }\n\n                // @ts-ignore\n                update[validationKey][field] = {\n                    inputType: submittedType,\n                    variant: verificationObject.status,\n                    message: verificationObject.message\n                }\n            });\n        }\n    });\n\n    setValidations(update);\n    return failureTriggered;\n}\n\nexport const getSSOBaseUrl = (chromeApi: any) => {\n    if (chromeApi.getEnvironment() === 'prod') {\n        return \"https://sso.redhat.com/auth/realms/redhat-external/\";\n    }\n    return \"https://sso.stage.redhat.com/auth/realms/redhat-external/\";\n}\n\nexport const getSSOApiUrl = (chromeApi: any, apiPath: string) => {\n    return getSSOBaseUrl(chromeApi) + apiPath;\n}\n\nexport const setupBackTriggerNotification = () => {\n    window.addEventListener(\"popstate\", () => {\n        // eslint-disable-next-line no-alert\n        alert(\"Please note that use of the back arrow on this page will cause you to lose your currently configured data\");\n    })\n}\n"],"names":["className","headingLevel","size","Title","Text","Button","variant","href","target","component","isInline","onClick","window","location","IdpResponseDataInitialState","idpAlias","displayName","enabled","providerId","createdDate","lastUpdatedDate","lastUpdatedBy","FlowStep","static","ChooseIdpType","configTypeChosen","Gallery","hasGutter","Card","isClickable","SAML_CONFIG","CardHeader","CardBody","CardFooter","OIDC_CONFIG","propTypes","Function","IdpNotSetup","configChosen","showProviderTypeOptions","setShowProviderTypeOptions","useState","isM3Enabled","useFlag","Icon","I","status","getSSOIdpApiUrl","chromeApi","specifier","async","apiGetIdp","token","auth","getToken","response","fetch","method","referrerPolicy","headers","ok","Error","statusText","error","console","apiCreateIdp","createIdp","callback","body","JSON","stringify","then","res","json","errorString","error_description","apiUpdateIdp","updateIdp","apiToggleIdPStatus","apiStatusUrl","ValidationContext","createContext","validations","CUSTOMER_INFORMATION","IMPORT_FROM_FILE","IMPORT_FROM_URL","IMPORT_SAML_FROM_FILE","IMPORT_SAML_FROM_URL","IMPORT_SAML_MANUALLY","setValidations","useValidationContext","context","useContext","CustomerInformation","rootUserChoices","updateStatus","useEffect","updated","inputType","message","Form","FormGroup","onChange","value","selections","name","protocol","handleInputSelection","handleChange","role","fieldId","label","id","Tooltip","content","position","Radio","isDisabled","resetNextClicked","OidcConfiguration","setSelections","handleSelection","inputMethod","parseVariantValue","TextInput","_event","type","HelperText","HelperTextItem","clientId","clientSecret","SamlConfiguration","ImportFromFile","fileData","setFileData","isRequired","FileUpload","toString","onDataChange","data","err","result","configFileData","update","browseButtonText","rootValidation","ImportFromUrl","current","currentTarget","formatMessage","args","formattedMessage","replace","match","arg","shift","String","index","parseInt","undefined","SamlMetadataConstants","IDENTITY_PROVIDER_ENTITY_ID","AUTH_REQUEST_URL","X509_CERTIFICATE","SERVICE_PROVIDER_ISSUER","SamlMetadataMessages","SUCCESS_MSG","SamlMetadataFile","forwardRef","maxKBSize","ref","allowedFileTypes","file","setFile","setValue","filename","setFilename","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isFileSizeRejected","setIsFileSizeRejected","isExpanded","setIsExpanded","isSafe","setIsSafe","clear","useImperativeHandle","getFile","filenamePlaceholder","onFileInputChange","_","reader","FileReader","onerror","FILE_READ_ERROR","onload","event","xmlString","includes","length","test","containsPotentialThreats","INVALID_FILE_TYPE","isFileSizeInvalid","xml","parsedXml","XMLParser","ignoreAttributes","allowBooleanAttributes","attributeNamePrefix","parseAttributeValue","ignorePiTags","parse","keyDescriptors","EntityDescriptor","IDPSSODescriptor","KeyDescriptor","services","SingleSignOnService","idpEntityID","entityDescriptor","extractIdpEntityID","Array","isArray","httpPostService","find","service","BINDING","HTTP_POST_BINDING","httpRedirectService","HTTP_REDIRECT_BINDING","LOCATION","extractLocation","certificates","Set","keyDescriptor","x509Data","KEY_INFO","X509_DATA","dsX509Data","DS_KEY_INFO","DS_X509_DATA","certificatesArray","DS_X509_CERTIFICATE","certificate","add","extractX509Certificate","validationMessaging","INVALID_OR_MISSING_IDPENTITYID","INVALID_OR_MISSING_AUTH_REQUEST_URL","INVALID_OR_MISSING_CERTIFICATE","now","Date","certWithHeaders","values","next","join","cert","certificateFromPem","validity","notBefore","notAfter","CERTIFICATE_EXPIRED","e","isValid","from","xmlFileWithRestrictions","FINAL_STEP","FILE_SUCCESSFULLY_LOADED","toFixed","parseError","FILE_PARSING_ERROR","MALICIOUS_FILE_DETECTED","readAsText","onReadStarted","_fileHandle","onReadFinished","onClearClick","dropzoneProps","accept","maxSize","onDropRejected","validated","hideDefaultPreview","FormHelperText","FILE_TOO_LARGE","SAML_XML_REQUIREMENTS","ExpandableSection","toggleText","onToggle","SamlHelperTextMessages","ImportSamlFromFile","samlMetadataFile","setSamlMetadataFile","updateValidations","labelIcon","Popover","triggerAction","bodyContent","preventDefault","formGroupLabelHelp","serviceProviderIssuer","primeNextStep","AUTHENTICATION_REQUEST_URL","identityProviderEntityId","authenticationRequestsUrl","NO_SPECIAL_CHARS","TextArea","resizeOrientation","x509Certificate","trim","split","map","msg","dangerouslySetInnerHTML","__html","accessToken","orgId","setOrgId","chrome","useChrome","getConfigURL","path","ClipboardCopy","isReadOnly","clickTip","userChoices","setPreviousTriggered","currentState","goToNextStep","goToPrevStep","WizardFooter","W","SubmitFooter","userChoiceData","previous","isLoading","setIsLoading","alerts","setAlerts","serviceProviderEntityId","responseBody","fields","Alert","isPlain","title","timeout","onTimeout","AlertGroup","isLiveRegion","checkState","setCheckState","Stack","StackItem","Checkbox","isChecked","reload","FlowTemplate","useRef","isConfigured","setIsConfigured","isAllowedToConfigure","setIsAllowedToConfigure","isInit","setIsInit","idpData","setIdpData","catch","flowState","setFlowState","previousState","displayed","setDisplayed","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideImportManually","hideFinish","triggerNextStep","nextStep","newDisplay","pruneChoices","validChoices","choicesKeys","Object","keys","i","setBackTriggered","prevStep","triggerBackStep","PageSection","Provider","Wizard","onClose","isProgressive","WizardStep","footer","isHidden","OidcHelperTextMessages","baseData","editFunction","editableData","isCreation","issuer","ISSUER","CLIENT_ID","CLIENT_SECRET","authorizationUrl","AUTHORIZATION_URL","tokenUrl","TOKEN_URL","publicKeyId","PUBLIC_KEY_ID","publicKey","PUBLIC_KEY","DisableIdpModal","isOpen","recomputeAppState","Modal","titleIconVariant","small","ModalBody","ModalFooter","disableIdp","IdpTestingModal","ssoBaseUrl","primaryModalAction","setPrimaryModalAction","testBtnEnabled","setTestBtnEnabled","idpTestingModalIcon","setIdpTestingModalIcon","idpTestingModalTitle","setIdpTestingModalTitle","idpTestingModalBody","setIdpTestingModalBody","idpTestingModalErrorBody","setIdpTestingModalErrorBody","resetTestingModal","dismissTestingModal","enableIdP","medium","actions","key","addEventListener","origin","success","Link","to","errorMsg","processEventData","open","idpAliasJson","idpAliasJsonString","encodeURIComponent","getTestUrl","TextContent","hidden","DeleteIdpModal","deleteIdpUrl","apiDeleteIdp","deleteIdp","IdpDisplayNames","getPrintableString","varName","this","variableConversion","IdpCommonMessages","oidcData","milestoneThreeEnabled","isTestingModalVisible","toggleTestingModalVisibility","isDisabledModalVisible","toggleIsDisabledModalVisible","isDeleteModalVisible","toggleIsDeleteModalVisible","isEditing","setIsEditing","inputData","setInputData","scrollToTop","document","getElementById","scrollIntoView","behavior","messages","errorList","keysList","forEach","push","UPDATE_ERROR_TITLE","editEvent","existingInput","p","ActionList","ActionListItem","errorFields","fromEntries","UPDATE_SUCCESS_MESSAGE","prevData","updateIdpSettings","headerContent","footerContent","isDanger","ENTITY_ID","baseUrl","setMessages","showErrorMessage","samlData","showSuccessMessage","SimpleText","BLANK_VALUE","format","preValue","postValue","formatter","responseData","providerType","setProviderType","Spinner","isCompact","isLarge","Label","color","icon","toLocaleDateString","toLocaleTimeString","chromeRef","cleanRequest","IdpSelector","configFlow","setConfigFlow","PageHeader","PageHeaderTitle","a","iconPosition","chosen","userToken","currentUser","updateUser","adminUser","selfServiceIDP","isSelfServiceIDPEnabled","appAction","parseToken","base64","decodeURIComponent","atob","c","charCodeAt","slice","isAdminUser","is_org_admin","getOrgId","org_id","setStateValue","stateObject","updateFunction","updatedValue","isBase64","str","decoded","decode64","encode64","isFailureTriggered","choices","failureTriggered","validationKey","field","submittedValue","submittedType","verificationObject","input","required","INVALID_CERT_MESSAGE","verified","results","sanitizedCertChainArray","firstCertInTheChain","verifyInput","getSSOBaseUrl","getEnvironment","getSSOApiUrl","apiPath"],"sourceRoot":""}