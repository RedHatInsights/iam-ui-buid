{"version":3,"file":"js/Identity-Provider-Integration.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/DisabledPage/disabled-page.js","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/validation-context.tsx","webpack:///./src/Apps/IdpSelfService/FirstStep/customer-information.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/oidc-configuration.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/saml-configuration.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-url.tsx","webpack:///./src/Utils/message-formatter-utils.ts","webpack:///./src/Apps/IdpSelfService/Constants/flow-step.ts","webpack:///./src/Apps/IdpSelfService/Constants/saml-metadata-constants.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/idp-request-types.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-messages.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-file.tsx","webpack:///./src/Utils/xml-utils.ts","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-url.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-manual.tsx","webpack:///./src/Apps/IdpSelfService/FinalStep/urls-for-user.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-oidc-idp.tsx","webpack:///./src/Apps/IdpSelfService/ApiClient/idp-controller.ts","webpack:///./src/Apps/IdpSelfService/IdpTesting/idp-testing-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/disable-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/delete-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-saml-idp.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-idp.tsx","webpack:///./src/Apps/IdpSelfService/IdpNotSetup/idp-not-setup.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/generic-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/submit-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/finalize-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/flow-template.tsx","webpack:///./src/Components/NonAdminUser/non-admin-idp.tsx","webpack:///./src/Routes/AuthenticationPolicy/identity-provider-integration.tsx","webpack:///./src/Utils/general-utils.ts"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","import React, {createContext, useContext} from 'react';\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\n\nexport interface ValidationContextType {\n    validations: InputValidation,\n    setValidations: React.Dispatch<React.SetStateAction<any>>\n}\n\nexport const ValidationContext = createContext<ValidationContextType>({\n    validations: {\n        CUSTOMER_INFORMATION: {},\n        OIDC_CONFIG: {},\n        SAML_CONFIG: {},\n        IMPORT_FROM_FILE: {},\n        IMPORT_FROM_URL: {},\n        IMPORT_SAML_FROM_FILE: {},\n        IMPORT_SAML_FROM_URL: {},\n        IMPORT_SAML_MANUALLY: {}\n    },\n    // eslint-disable-next-line no-empty-function\n    setValidations: () => {}\n});\n\nexport const useValidationContext = () => {\n    const context = useContext(ValidationContext);\n    if (!context) {\n        throw new Error('Validation context not found');\n    }\n    return context;\n}\n\nexport default ValidationContext;\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useEffect} from 'react';\nimport { \n    Text,\n    Radio,\n    Title,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props {\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\n/**\n * handle input selection needs to update information being used to govern the application flow as well as the final api update object\n * (if needed this method could be shared between components and moved to general-utils.ts)\n */\n// eslint-disable-next-line max-params\nexport const handleInputSelection = (value: any, rootUserChoices: any, resetNextClicked: Function, updateStatus: Function) => {\n\n    /*\n     * regardless of current state. if the user alters the input clear existing flags. \\\n     * This should also reset the currently displayed errors\n     */\n    resetNextClicked(false);\n\n    if (!rootUserChoices) { rootUserChoices = {}; }\n\n    if (!rootUserChoices.selections) { rootUserChoices.selections = {}; }\n\n    //  update the main data storage object with the new value\n    rootUserChoices.selections[value.target.id] = value.target.value;\n\n    if (rootUserChoices.selections.protocol) { updateStatus(rootUserChoices.selections.protocol); }\n\n};\n\nconst CustomerInformation = ({resetNextClicked, rootUserChoices, updateStatus} : Props) => {\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.CUSTOMER_INFORMATION =\n                {\n                    'protocol': {\n                        inputType: 'RADIO',\n                        variant: 'default',\n                        message: ''\n                    }\n                };\n        setValidations(updated);\n    }, []);\n\n    const handleChange = (value: any) => {\n        handleInputSelection(value, rootUserChoices, resetNextClicked, updateStatus);\n    };\n\n\n    // pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n\n                {/* TODO had to remove validated prop. PF5 suggests moving that logic to the text input's helperText, FormHelperText, or HelperTextItem */}\n\n                <FormGroup\n                    onChange={(value) => { handleChange(value) } }\n                    role=\"radiogroup\"\n                    fieldId=\"authType\"\n                    label=\"Choose identity provider protocol\"\n                    id=\"protocol\">\n                    <Radio isDisabled={true} name=\"authType\" id=\"protocol\" label=\"OpenID Connect\" value=\"OIDC_CONFIG\"/>\n                    <Radio name=\"authType\" id=\"protocol\" label=\"Saml 2.0\" value=\"SAML_CONFIG\"/>\n                </FormGroup>\n            </Form>\n}\n\nCustomerInformation.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useEffect, useState} from 'react';\nimport { \n    Text,\n    TextInput,\n    Radio,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport {setStateValue} from '../../../Utils/general-utils';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {\n    useValidationContext\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\n\ninterface Props{\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst OidcConfiguration = ({resetNextClicked, rootUserChoices, updateStatus}: Props) => {\n    const [selections, setSelections] = useState<Object>();\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: any) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) {\n            updateStatus(rootUserChoices.selections.inputMethod);\n        }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') {\n            return value;\n        }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.OIDC_CONFIG =\n            {\n                'clientId': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'The Red Hat client identifier registered within the customer identity provider. Your identity provider generates this client ID when a Red Hat client is added'\n                },\n                'clientSecret': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'Enter the client secret associated with your client identifier  by your identity provider'\n                },\n                'inputMethod': {\n                    inputType: 'RADIO',\n                    variant: 'default',\n                    message: ''\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    // @ts-ignore\n    return <Form>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n                <FormGroup\n                    label=\"Client ID/SP entity ID\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientId\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientId\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={ parseVariantValue(validations.OIDC_CONFIG?.clientId?.variant) }>\n                            { validations.OIDC_CONFIG?.clientId?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Client Secret\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientSecret\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientSecret\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.clientSecret?.variant)}>\n                            { validations.OIDC_CONFIG?.clientSecret?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file or download it from a url\">\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORT_FROM_URL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_FROM_FILE\"/>\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.inputMethod?.variant)}>\n                            { validations.OIDC_CONFIG?.inputMethod?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n}\n\nOidcConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default OidcConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Radio,\n    Form,\n    FormGroup\n} from '@patternfly/react-core';\n\nimport React, {useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props{\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst SamlConfiguration = ({resetNextClicked, rootUserChoices, updateStatus}: Props) => {\n\n    const handleSelection = (value: any) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) { updateStatus(rootUserChoices.selections.inputMethod); }\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.SAML_CONFIG =\n            {\n            'inputMethod': {\n                inputType: 'RADIO',\n                variant: 'default',\n                message: ''\n            }\n        };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IDP metadata from a config file\"\n                    isRequired>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_SAML_FROM_FILE\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Enter Manually\" value=\"IMPORT_SAML_MANUALLY\"/>\n                </FormGroup>\n            </Form>\n}\n\nSamlConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup,\n    Title,\n    Text,\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props {\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n}\n\nconst ImportFromFile = ({updateStatus, rootUserChoices}: Props) => {\n    const [fileData, setFileData] = useState(\"\");\n\n    const { validations, setValidations } = useValidationContext();\n\n\n    const handleFileData = (_event: any, data:string) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(err);\n            }\n            else if (result) {\n                updateStatus(\"FINAL_STEP\");\n                rootUserChoices.selections.configFileData = result;\n\n                /*\n                 * may need to submit a query at this point to the api to validate that the file chosen is good to go\n                 * alternatively a validation step could be added locally to check for the existence of required fields\n                 */\n                const update = {...validations};\n                update.IMPORT_FROM_URL = { };\n                setValidations(update);\n            }\n        })\n    }\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Import from file</Title>\n            <FormGroup label=\"File Upload\" isRequired >\n                <FileUpload\n                    value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    onDataChange={handleFileData}\n                    browseButtonText=\"Upload\"\n                />\n            </FormGroup>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">An XML formatted file detailing the configuration of your IDP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n        </Form>\n    )\n}\n\nImportFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport {isFailureTriggered} from '../../../Utils/general-utils';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\n\ninterface Props{\n    resetNextClicked: Function;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportFromUrl = ({resetNextClicked, rootUserChoices}: Props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the application flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value)=>{handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportFromUrl.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    nextClicked: PropTypes.func,\n}\n\nexport default ImportFromUrl;\n","/**\n * Formats a string message by replacing placeholders with provided arguments.\n * Currently, it supports both {n} style placeholders and %s for strings and %d for numbers.\n *\n * @param message - string message template containing placeholders.\n * @param args - any umber of string or number arguments to replace placeholders.\n * @returns formatted message.\n */\nexport function formatMessage(message: string, ...args: (string | number)[]): string {\n    if (!message) {\n        return '';\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    let formattedMessage = message.replace(/%s|%d/g, (match) => {\n        const arg = args.shift();\n        return String(arg);\n    });\n\n    // eslint-disable-next-line require-unicode-regexp\n    formattedMessage = formattedMessage.replace(/{(?:\\d+)}/g, (match, index) => {\n        const arg = args[parseInt(index, 10)];\n        // eslint-disable-next-line no-undefined\n        return arg !== undefined ? String(arg) : match;\n    });\n\n    return formattedMessage;\n}\n","export class FlowStep {\n\n    public static readonly OIDC_CONFIG = 'OIDC_CONFIG';\n\n    public static readonly SAML_CONFIG = 'SAML_CONFIG';\n\n    public static readonly IMPORT_FROM_FILE = 'IMPORT_FROM_FILE';\n\n    public static readonly IMPORT_FROM_URL = 'IMPORT_FROM_URL';\n\n    public static readonly IMPORT_SAML_FROM_FILE = 'IMPORT_SAML_FROM_FILE';\n\n    public static readonly IMPORT_SAML_FROM_URL = 'IMPORT_SAML_FROM_URL';\n\n    public static readonly IMPORT_SAML_MANUALLY = 'IMPORT_SAML_MANUALLY';\n\n    public static readonly FINAL_STEP = 'FINAL_STEP';\n\n    public static readonly CUSTOMER_INFORMATION = 'CUSTOMER_INFORMATION';\n\n}\n","/*\n * SAML 2.0 specs\n * https://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd\n * https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf\n */\n\nexport class SamlMetadataConstants {\n\n    /*\n     * @_ is a fast-xml-parser prefix convention to differentiate between XML attributes and element content.\n     * The @ symbol signifies that it's an attribute, and the _ is added to the prefix to ensure clarity.\n     */\n\n    public static readonly IDENTITY_PROVIDER_ENTITY_ID = '@_entityID';\n\n    public static readonly BINDING = '@_Binding';\n\n    public static readonly LOCATION = '@_Location';\n\n    public static readonly KEY_INFO = 'KeyInfo';\n\n    public static readonly X509_DATA = 'X509Data';\n\n    public static readonly X509_CERTIFICATE = 'X509Certificate';\n\n    public static readonly DS_KEY_INFO = 'ds:KeyInfo';\n\n    public static readonly DS_X509_DATA = 'ds:X509Data';\n\n    public static readonly DS_X509_CERTIFICATE = 'ds:X509Certificate';\n\n    public static readonly HTTP_POST_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST';\n\n    public static readonly HTTP_REDIRECT_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect';\n}\n","export interface idpRequestData {\n    displayName: string;\n    providerId: string;\n}\n\nexport const IDENTITY_PROVIDER_ENTITY_ID = \"identityProviderEntityId\";\nexport const AUTH_REQUEST_URL = \"authenticationRequestsUrl\";\nexport const X509_CERTIFICATE = \"x509Certificate\";\nexport const SERVICE_PROVIDER_ENTITY_ID = \"serviceProviderEntityId\";\n\nexport interface samlRequestData extends idpRequestData {\n    identityProviderEntityId: string;\n    authenticationRequestsUrl: string;\n    x509Certificate: string;\n    serviceProviderEntityId: string;\n}\n","export class SamlMetadataMessages {\n\n    public static readonly INVALID_OR_MISSING_DATA = 'Invalid or missing data';\n\n    public static readonly SUCCESS_MSG = 'loaded successfully!';\n\n    public static readonly FILE_SUCCESSFULLY_LOADED = '%s ' + SamlMetadataMessages.SUCCESS_MSG + ' (size: %dK)';\n\n    public static readonly FILE_PARSING_ERROR = 'Error parsing XML: %s';\n\n    public static readonly INVALID_FILE_TYPE = 'Invalid file type. Only XML files are allowed.';\n\n    public static readonly MALICIOUS_FILE_DETECTED = 'Error: Invalid XML document.';\n\n    public static readonly FILE_READ_ERROR = 'Error reading file';\n\n    public static readonly SAML_XML_REQUIREMENTS = 'Upload a XML file with your IDP configuration. Max file size allowed is %d K';\n\n    public static readonly FILE_TOO_LARGE = \"Must be a XML file no larger than %d KB\";\n\n}\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport {\n    DropEvent,\n    ExpandableSection,\n    FileUpload,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\n\nimport _ from 'lodash';\nimport './saml-metadata-file.scss'\nimport PropTypes from \"prop-types\";\nimport { XMLParser } from 'fast-xml-parser';\n\nimport {formatMessage} from \"../../../Utils/message-formatter-utils\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport {SamlMetadataConstants} from \"../../../Apps/IdpSelfService/Constants/saml-metadata-constants\";\nimport {SamlMetadataSchemaAttributes} from \"../../../Apps/IdpSelfService/CommonInterfaces/saml-metadata-file\";\nimport {UserChoices} from \"../../../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID, X509_CERTIFICATE\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {containsPotentialThreats} from \"../../../Utils/xml-utils\";\nimport {SamlMetadataMessages} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-messages\";\nimport {useValidationContext} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\n\ninterface Props {\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n    maxKBSize: number;\n    updateStatus: Function;\n}\n\nexport const SamlMetadataFile: React.FunctionComponent<Props> = forwardRef(({resetNextClicked, rootUserChoices, maxKBSize, updateStatus}: Props, ref) => {\n    const allowedFileTypes = ['text/xml'];\n\n    const [file, setFile] = useState<File | null>(null);\n    const [value, setValue] = useState('');\n    const [filename, setFilename] = useState('');\n\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n    const [isFileSizeRejected, setIsFileSizeRejected] = useState(false);\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isSafe, setIsSafe] = useState(false);\n\n    const { validations, setValidations } = useValidationContext();\n\n    /*\n     * Add the following code to the import-saml-from-file.tsx (or the parent component)\n     * if you need to do extra handling of the file object or any attribute used in this component:\n     *const samlMetadataFileRef = useRef<any>(null);\n     *if (samlMetadataFileRef.current) {\n     *  const file = samlMetadataFileRef.current.getFile();\n     *}\n     */\n    useImperativeHandle(ref, () => ({\n        getFile: () => file\n    }));\n\n    function clear() {\n        setFile(null);\n        setValue('');\n        setFilename('');\n        setSuccessMessage('');\n        setErrorMessage('');\n        setIsFileSizeRejected(false);\n    }\n\n    // eslint-disable-next-line no-shadow\n    const onToggle = (_event: React.MouseEvent, isExpanded: boolean) => {\n        setIsExpanded(isExpanded);\n    };\n\n    function isValid(idpEntityID: string | null, location: string | null, certificates: Set<string>) {\n        if ((!_.isString(idpEntityID) || !_.isString(location) || certificates.size === 0) || (idpEntityID.length === 0 || location.length === 0)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * XMLParser docs:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/tree/master/docs/v5\n     * Config options:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v5/3.Options.md\n     */\n    // eslint-disable-next-line no-shadow\n    function parse(xml: string, file: File) {\n        // regardless of current state. if the user alters the input clear existing flags.\n        resetNextClicked(false);\n\n        function extractIdpEntityID(parsedXml: SamlMetadataSchemaAttributes) {\n            if (parsedXml?.EntityDescriptor?.[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID]) {\n                return parsedXml.EntityDescriptor[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID];\n            }\n            return null;\n        }\n\n        function extractLocation(services: any) {\n            if (services || Array.isArray(services)) {\n                const httpPostService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_POST_BINDING);\n                const httpRedirectService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_REDIRECT_BINDING);\n\n                // see: org.keycloak.broker.saml.SAMLIdentityProviderFactory#parseConfig\n                if (httpPostService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpPostService[SamlMetadataConstants.LOCATION];\n                } else if (httpRedirectService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpRedirectService[SamlMetadataConstants.LOCATION];\n                }\n            }\n            return null;\n        }\n\n        function extractX509Certificate(keyDescriptors: any) {\n            const certificates: Set<string> = new Set<string>();\n            if (keyDescriptors) {\n                // ensure we handle both single and multiple KeyDescriptor entries\n                for (const keyDescriptor of Array.isArray(keyDescriptors) ? keyDescriptors : [keyDescriptors]) {\n                    const x509Data = keyDescriptor?.[SamlMetadataConstants.KEY_INFO]?.[SamlMetadataConstants.X509_DATA];\n                    const dsX509Data = keyDescriptor?.[SamlMetadataConstants.DS_KEY_INFO]?.[SamlMetadataConstants.DS_X509_DATA];\n\n                    let certificatesArray = []\n\n                    // we need to handle both single and multiple <X509Certificate> entries\n                    if (x509Data) {\n                        certificatesArray = Array.isArray(x509Data?.[SamlMetadataConstants.X509_CERTIFICATE])\n                            ? x509Data[SamlMetadataConstants.X509_CERTIFICATE]\n                            : [x509Data?.[SamlMetadataConstants.X509_CERTIFICATE]];\n                    } else if (dsX509Data) {\n                        // maybe the metadata file uses <ds:XXX> as a prefix, so let's try handling w/ DS entries instead\n                        certificatesArray = Array.isArray(dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE])\n                            ? dsX509Data[SamlMetadataConstants.DS_X509_CERTIFICATE]\n                            : [dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE]];\n                    }\n\n                    // add the certificates found (ignores null/undefined entries)\n                    for (const certificate of certificatesArray) {\n                        if (certificate) {\n                            certificates.add(certificate);\n                        }\n                    }\n                }\n            }\n            return certificates;\n        }\n\n        try {\n            const parser = new XMLParser({\n                // ensure that attributes like SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID are captured and not ignored\n                ignoreAttributes: false,\n                // allows the parser to handle boolean attributes in the XML\n                allowBooleanAttributes: true,\n                attributeNamePrefix: '@_',\n                parseAttributeValue: true,\n                // ignores processing instructions <? .. ?> in the XML file as they are irrelevant.\n                ignorePiTags: true\n            });\n\n            const parsedXml: SamlMetadataSchemaAttributes = parser.parse(xml);\n            const keyDescriptors = parsedXml?.EntityDescriptor?.IDPSSODescriptor?.KeyDescriptor || [];\n            const services = parsedXml?.EntityDescriptor?.IDPSSODescriptor?.SingleSignOnService;\n\n            const idpEntityID = extractIdpEntityID(parsedXml);\n            const location = extractLocation(services);\n            const certificates: Set<string> = extractX509Certificate(keyDescriptors);\n\n            if (!isValid(idpEntityID, location, certificates)) {\n                throw new Error(SamlMetadataMessages.INVALID_OR_MISSING_DATA);\n            }\n\n            //  update the main data storage object with the parsed values\n            rootUserChoices.selections[IDENTITY_PROVIDER_ENTITY_ID] = idpEntityID as string;\n            rootUserChoices.selections[AUTH_REQUEST_URL] = location as string;\n            const cert = certificates.values().next();\n            rootUserChoices.selections[X509_CERTIFICATE] = cert.value;\n\n            //TODO this is bad. Make better\n            rootUserChoices.selections['xml-file-with-restrictions'] = \"selected\";\n            const updated = {...validations};\n            updated.IMPORT_SAML_FROM_FILE = {\n                'xml-file-with-restrictions': {\n                    inputType: 'GLOBAL',\n                    variant: 'default',\n                    message: ''\n                }\n            }\n            setValidations(updated);\n\n            updateStatus(FlowStep.FINAL_STEP);\n\n            setIsFileSizeRejected(false);\n            setFile(file);\n            setErrorMessage(null);\n            setSuccessMessage(formatMessage(SamlMetadataMessages.FILE_SUCCESSFULLY_LOADED, file.name, (file.size / 1024).toFixed(2)));\n            setIsSafe(true);\n        } catch (parseError) {\n            setIsSafe(false);\n            setErrorMessage(formatMessage(SamlMetadataMessages.FILE_PARSING_ERROR, (parseError as Error).message));\n        }\n    }\n\n    // eslint-disable-next-line no-shadow\n    function isFileSizeInvalid(file: File) {\n        if (!allowedFileTypes.includes(file.type)) {\n            setErrorMessage(SamlMetadataMessages.INVALID_FILE_TYPE);\n            setSuccessMessage(null);\n            return true;\n        }\n        if (file.size > (maxKBSize * 1024)) {\n            setIsFileSizeRejected(true);\n            return true;\n        }\n        return false;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const handleFileInputChange = (_: any, file: File) => {\n        clear();\n        setFilename(file.name);\n\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                setIsSafe(false);\n                setErrorMessage(SamlMetadataMessages.FILE_READ_ERROR);\n            }\n\n            reader.onload = (event: ProgressEvent<FileReader>) => {\n                const xmlString = event.target?.result as string;\n                if (containsPotentialThreats(xmlString)) {\n                    setIsSafe(false);\n                    setErrorMessage(SamlMetadataMessages.MALICIOUS_FILE_DETECTED);\n                } else if (!isFileSizeInvalid(file)) {\n                    parse(xmlString, file);\n                }\n            };\n\n            reader.readAsText(file);\n        }\n    };\n\n    // eslint-disable-next-line no-shadow\n    const handleDataChange = (_event: DropEvent, value: string) => {\n        setValue(value);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleClear = (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        clear();\n        setIsExpanded(false);\n    };\n\n    const handleFileRejected = () => {\n        setIsFileSizeRejected(true);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadStarted = (_event: DropEvent, _fileHandle: File) => {\n        setErrorMessage('');\n        setSuccessMessage('');\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadFinished = (_event: DropEvent, _fileHandle: File) => {\n        setIsExpanded(true);\n    };\n\n    return (\n        <FormGroup fieldId=\"xml-file-with-restrictions\">\n            <FileUpload\n                id=\"xml-file-with-restrictions\"\n                type=\"text\"\n                value={value}\n                filename={filename}\n                filenamePlaceholder=\"Drag and drop the SAML metadata file or upload one\"\n                onFileInputChange={handleFileInputChange}\n                onDataChange={handleDataChange}\n                onReadStarted={handleFileReadStarted}\n                onReadFinished={handleFileReadFinished}\n                onClearClick={handleClear}\n                dropzoneProps={{\n                    accept: {'text/xml': ['.xml']},\n                    maxSize: (maxKBSize * 1024),\n                    onDropRejected: handleFileRejected\n                }}\n                validated={isFileSizeRejected ? 'error' : 'default'}\n                browseButtonText=\"Upload\"\n                // this will hide the core component code preview block (which doesn't support syntax highlighting)\n                hideDefaultPreview/>\n            <FormHelperText>\n                <HelperText>\n                    <HelperTextItem variant={isFileSizeRejected ? 'error' : 'default'}>\n                        {isFileSizeRejected ? formatMessage(SamlMetadataMessages.FILE_TOO_LARGE, maxKBSize) : formatMessage(SamlMetadataMessages.SAML_XML_REQUIREMENTS, maxKBSize)}\n                    </HelperTextItem>\n                    {(successMessage || errorMessage) && (\n                        <HelperTextItem variant={errorMessage ? 'error' : 'success'}>\n                            {errorMessage ?? successMessage}\n                        </HelperTextItem>\n                    )}\n                </HelperText>\n            </FormHelperText>\n            <div className=\"xml-highlighter\">\n                {isSafe && value && (\n                    <ExpandableSection toggleText={isExpanded ? 'Show less' : 'Show more'} onToggle={onToggle} isExpanded={isExpanded}>\n                        <div className=\"highlighter-panel\">\n                            {value}\n                        </div>\n                    </ExpandableSection>\n                )}\n            </div>\n        </FormGroup>\n    );\n});\n\nSamlMetadataFile.displayName = \"SamlMetadataFile\";\n\nSamlMetadataFile.propTypes = {\n    maxKBSize: PropTypes.number.isRequired\n}\n\nexport default SamlMetadataFile;\n","/**\n * check for potentially dangerous XML elements:\n * - XXE (XML External Entity)\n * - XML Bomb (Billion Laughs Attack)\n * - Recursive Entity defs\n */\nexport function containsPotentialThreats(xmlString: string) {\n    return xmlString.includes('<!DOCTYPE') ||\n        xmlString.includes('<!ENTITY') ||\n        xmlString.includes('SYSTEM') ||\n        ((xmlString.match(/<!ENTITY/gu) || []).length > 5) ||\n        (xmlString.includes('&') && !(/&[a-zA-Z0-9]+;/u).test(xmlString));\n}\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Form,\n    FormGroup, HelperText, HelperTextItem, TextInput, Title\n} from '@patternfly/react-core';\nimport React, {ReactElement, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {SamlMetadataFile} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-file\";\nimport {SERVICE_PROVIDER_ENTITY_ID} from \"../CommonInterfaces/idp-request-types\";\nimport {FlowStep} from \"../Constants/flow-step\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props {\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst ImportSamlFromFile = ({resetNextClicked, rootUserChoices, updateStatus}: Props) => {\n    const [samlMetadataFile, setSamlMetadataFile] = useState<ReactElement>()\n    const { validations, setValidations } = useValidationContext();\n    useEffect(() => {\n        setSamlMetadataFile(<SamlMetadataFile resetNextClicked={resetNextClicked}\n                                              rootUserChoices={rootUserChoices}\n                                              updateStatus={updateStatus}\n                                              maxKBSize={ 100 }></SamlMetadataFile>);\n\n        const updateValidations = {...validations}\n        if (updateValidations.IMPORT_SAML_FROM_FILE) {\n            updateValidations.IMPORT_SAML_FROM_FILE[SERVICE_PROVIDER_ENTITY_ID] = {\n                inputType: 'GENERAL',\n                variant: 'default',\n                message: 'The Entity ID that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\"'\n            }\n        }\n        else {\n            updateValidations.IMPORT_SAML_FROM_FILE = {\n                \"serviceProviderEntityId\": {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'The Entity ID that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\"'\n                }\n            }\n        }\n        setValidations(updateValidations);\n    }, []);\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const handleSelection = (value: any) => {\n        resetNextClicked(false);\n        rootUserChoices.selections[value.target.id] = value.target.value;\n        if (rootUserChoices.selections) { updateStatus(FlowStep.FINAL_STEP); }\n    }\n\n    return <Form>\n        <Title headingLevel=\"h2\">Import from file</Title>\n        <FormGroup\n            label=\"Service Provider Entity ID\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.serviceProviderEntityId?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.serviceProviderEntityId?.message }\n                </HelperTextItem>\n            </HelperText>\n            <TextInput\n                type=\"text\"\n                id={SERVICE_PROVIDER_ENTITY_ID} />\n        </FormGroup>\n        <FormGroup label=\"File Upload\" isRequired>\n            {samlMetadataFile}\n        </FormGroup>\n    </Form>\n}\n\nImportSamlFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromFile;\n","// step three, choice 6 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props{\n    resetNextClicked: Function;\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportSamlFromUrl = ({resetNextClicked, rootUserChoices}: Props) => {\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage objec(value) => { handleSelection(value) }t with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    <TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value) => { handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportSamlFromUrl.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    nextClicked: PropTypes.func,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromUrl;\n","import React, {useEffect} from 'react';\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem, TextArea\n} from '@patternfly/react-core';\nimport {UserChoices} from \"@apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {AUTH_REQUEST_URL, IDENTITY_PROVIDER_ENTITY_ID, X509_CERTIFICATE, SERVICE_PROVIDER_ENTITY_ID} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {useValidationContext} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\n\ninterface Props {\n    updateStatus: Function;\n    resetNextClicked: Function;\n    rootUserChoices: UserChoices;\n}\nconst ImportSamlManual = ({updateStatus, resetNextClicked, rootUserChoices}: Props) => {\n\n    /**\n     * updates the information being used to govern the application flow as well as the final api update object.\n     * @param value\n     */\n    const handleSelection = (value: any) => {\n\n        /*\n         * regardless of current state. if the user alters the input clear existing flags. This should also reset\n         * the currently displayed errors\n         */\n        resetNextClicked(false);\n\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections) { updateStatus(FlowStep.FINAL_STEP); }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.IMPORT_SAML_MANUALLY =\n            {\n                'identityProviderEntityId': {\n                    inputType: 'DOMAIN',\n                    variant: 'default',\n                    message: 'The entityID used to validate the Issuer for received SAML assertions.'\n                },\n                'serviceProviderEntityId': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'The Entity ID that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\"'\n                },\n                'authenticationRequestsUrl': {\n                    inputType: 'DOMAIN',\n                    variant: 'default',\n                    message: 'The URL that sends SAML authentication requests'\n                },\n                'x509Certificate': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'A PEM certificate that is used to check for signatures.'\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n        <FormGroup\n            label=\"Identity Provider Entity ID\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.message }\n                </HelperTextItem>\n            </HelperText>\n            <TextInput\n                type=\"text\"\n                id={IDENTITY_PROVIDER_ENTITY_ID} />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Authentication Request URL\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.message }\n                </HelperTextItem>\n            </HelperText>\n            <TextInput\n                       type=\"text\"\n                       id={AUTH_REQUEST_URL} />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Service Provider Entity ID\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.serviceProviderEntityId?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.serviceProviderEntityId?.message }\n                </HelperTextItem>\n            </HelperText>\n            <TextInput\n                       type=\"text\"\n                       id={SERVICE_PROVIDER_ENTITY_ID} />\n        </FormGroup>\n\n        <FormGroup\n            label=\"x509 Certificate\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.x509Certificate?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.x509Certificate?.message }\n                </HelperTextItem>\n            </HelperText>\n            <TextArea resizeOrientation=\"vertical\"\n                      type=\"text\"\n                      id={X509_CERTIFICATE}/>\n        </FormGroup>\n\n    </Form>\n\n}\n\nexport default ImportSamlManual;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {ClipboardCopy, Form, FormGroup, Text, Title} from '@patternfly/react-core';\nimport React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {getOrgId, getSSOBaseUrl} from \"../../../Utils/general-utils\";\ninterface Props{\n    accessToken: string | null;\n}\nconst ImportSamlFromURL = ({accessToken} : Props) => {\n    const [orgId, setOrgId] = useState('');\n    const chrome = useChrome();\n\n    const getConfigURL = (path: string) => {\n        return getSSOBaseUrl(chrome) + path;\n    };\n\n    useEffect(() => {\n        setOrgId(getOrgId(accessToken!));\n    }, [])\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Configure URLs</Title>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">Some Identity Provider Services require additional\n                configuration when enabling third party single sign on. Please review the following information and\n                verify that these are filled in where required in your company IDP.</Text>\n\n            <FormGroup label=\"Metadata URL\">\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint/descriptor`)}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup label=\"Redirect URL or ACS (Assertion Consumption Service) URL\">\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint`)}\n                </ClipboardCopy>\n            </FormGroup>\n        </Form>\n    )\n}\n\nexport default ImportSamlFromURL;\n","import React from 'react';\nimport './configured-oidc-idp.scss'\nimport { oidcResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Label,\n    Popover,\n    Text,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\n\ninterface Props {\n    oidcData: oidcResponseData\n}\n\nconst ConfiguredOidcIdp = ({ oidcData }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    return (\n        <Form>\n            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                <p>Forthcoming enhancements will provide the ability to edit.</p>\n            </Alert>\n\n            <Title headingLevel={\"h1\"}>\n                {oidcData.displayName}\n                {oidcData.enabled\n                    ? <Label color=\"green\" icon={<CheckCircleIcon />} className=\"pf-v5-u-ml-md\">\n                        Enabled\n                    </Label>\n                    : <Label color=\"grey\" icon={<WrenchIcon />} className=\"pf-v5-u-ml-md\">\n                        Disabled\n                    </Label>\n                }\n            </Title>\n\n            <FormGroup\n                label=\"Issuer\"\n                fieldId=\"oidc-issuer\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The issuer is used to validate tokens generated by the identity provider and allows\n                                additional security for your organization. This value is optional but recommended.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-issuer\" name=\"oidc-issuer\" value={oidcData.issuerUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client ID\"\n                fieldId=\"oidc-client-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client ID registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-id\" name=\"oidc-client-id\" value={oidcData.clientId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>Spaces and special characters are allowed here.</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client Secret\"\n                fieldId=\"oidc-client-secret\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client secret registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-secret\" name=\"oidc-client-secret\" value={oidcData.clientSecret} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Authorization URL\"\n                fieldId=\"oidc-authorization-url-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL that performs authentication of the end-user.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-token-url-id\" name=\"oidc-token-url-id\" value={oidcData.authorizationUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Token URL\"\n                fieldId=\"authorization-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL where an authorization code can be exchanged for an access token and ID token.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"authorization-url\" name=\"authorization-url\" value={oidcData.tokenUrl} />\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate sso.redhat.com with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"metadata-url\"\n                    name=\"metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}.well-known/openid-configuration`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${oidcData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <ActionList>\n                <Popover\n                    triggerAction=\"hover\"\n                    aria-label=\"Hoverable popover\"\n                    headerContent={<div>Read-Only</div>}\n                    bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                        enhancements will provide the ability to edit.</div>}\n                    footerContent=\"\">\n                    <ActionListItem>\n                        {oidcData.enabled\n                            ? <Button variant=\"danger\" isDisabled>\n                                Disable\n                            </Button>\n                            : <Button variant=\"primary\" isDisabled>\n                                Test and enable\n                            </Button>\n                        }\n                    </ActionListItem>\n                </Popover>\n                <ActionListItem>\n                    <Button variant=\"link\" isDanger isDisabled>\n                        Delete identity provider\n                    </Button>\n                </ActionListItem>\n            </ActionList>\n        </Form>\n    )\n}\n\nexport default ConfiguredOidcIdp;\n","import { getSSOApiUrl } from \"../../../Utils/general-utils\";\nimport { SubmittableChoices } from \"../CommonInterfaces/user-choices\";\nimport { ChromeAPI } from \"@redhat-cloud-services/types\";\n\nfunction getSSOIdpApiUrl(chromeApi: ChromeAPI) {\n    return getSSOApiUrl(chromeApi, 'apis/organizations/v1/identity-providers');\n}\n\nexport async function apiGetIdp(chromeApi: ChromeAPI): Promise<Response> {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const response = await fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Fetch failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiCreateIdp(chromeApi: ChromeAPI, createIdp: SubmittableChoices): Promise<Response> {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const response = await fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'POST',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(createIdp)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Create failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiToggleIdPStatus(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const apiStatusUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}/status`;\n        const response = await fetch(apiStatusUrl, {\n            method: 'PATCH',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Status update failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiDeleteIdp(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const deleteIdpUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}`;\n        const response = await fetch(deleteIdpUrl, {\n            method: 'DELETE',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n\n    } catch (error) {\n        console.error(\"IDP deletion failed:\", error);\n        throw error;\n    }\n}\n\n","import {Button, Modal, ModalVariant, Text, TextContent, Title} from \"@patternfly/react-core\";\nimport React, {useEffect, useState} from \"react\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {Link} from \"react-router-dom\";\nimport {apiToggleIdPStatus} from \"../ApiClient/idp-controller\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nconst IdpTestingModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    const [primaryModalAction, setPrimaryModalAction] = useState(<Button />);\n    const [testBtnEnabled, setTestBtnEnabled] = useState(false);\n    const [idpTestingModalIcon, setIdpTestingModalIcon] = useState<\"info\"|\"danger\"|\"success\">(\"info\");\n    const [idpTestingModalTitle, setIdpTestingModalTitle] = useState(\"\");\n    const [idpTestingModalBody, setIdpTestingModalBody] = useState(<Text></Text>);\n    const [idpTestingModalErrorBody, setIdpTestingModalErrorBody] = useState(\"\");\n\n    const resetTestingModal = () => {\n        setPrimaryModalAction(<Button />);\n        setTestBtnEnabled(true);\n        setIdpTestingModalIcon(\"info\");\n        setIdpTestingModalTitle(\"Identity Provider Testing\");\n        setIdpTestingModalBody(<Text>Select the prompt below to begin testing. This will open a pop-up window that will authenticate with your configured identity provider. If you are not currently signed into this identity provider, please do so in the pop-up window. Please be sure that pop-ups are allowed.</Text>);\n        setIdpTestingModalErrorBody(\"\");\n    }\n\n    useEffect(() => {\n        resetTestingModal();\n    }, []);\n\n    const dismissTestingModal = () => {\n        onClose();\n        resetTestingModal();\n    }\n\n    const getTestUrl = () => {\n        const idpAliasJson = { 'idp_alias': idpAlias }\n        const idpAliasJsonString = encodeURIComponent(JSON.stringify(idpAliasJson));\n        return `${ssoBaseUrl}protocol/openid-connect/auth?client_id=idp-connectivity-testing-login-client&redirect_uri=${ssoBaseUrl}&response_mode=query&response_type=code&scope=openid&state=${idpAliasJsonString}`;\n    }\n\n    const enableIdP = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        dismissTestingModal();\n    }\n\n    const handleTestBtn = () => {\n        setTestBtnEnabled(false);\n        setIdpTestingModalBody(<Text>Please complete identity provider testing in pop-up window</Text>);\n\n        window.open(getTestUrl(), \"RH IdP Integration Testing\", 'width=600,height=600,resizable,scrollbars');\n\n        window.addEventListener(\"message\", (event) => {\n            if (ssoBaseUrl.includes(event.origin)) {\n                if (event.data.success === true) {\n                    setPrimaryModalAction(<Button key=\"Enable\" variant=\"primary\" onClick={enableIdP}>Enable</Button>)\n                    setIdpTestingModalIcon(\"success\")\n                    setIdpTestingModalTitle(\"Test successful. Enable for your organization?\")\n                    setIdpTestingModalBody(<Text>Enabling will require users on your organization to authenticate through your newly-configured identity provider on their next authentication. If you do not enable this now, you will have to re-test again before being allowed to enable this identity provider.</Text>)\n                } else {\n                    setPrimaryModalAction(<Button key=\"Dismiss\" variant=\"primary\" onClick={dismissTestingModal}>Dismiss</Button>)\n                    setIdpTestingModalIcon(\"danger\")\n                    setIdpTestingModalTitle(\"Test failed\")\n                    setIdpTestingModalBody(<Text>Try looking over some <Link to=\"https://access.redhat.com/articles/7092870\">common mistakes</Link> and then re-testing. If that doesn’t help, <Link to={\"https://access.redhat.com/support/\"}>contact support</Link>.</Text>)\n                    setIdpTestingModalErrorBody(event.data.errorMsg);\n                }\n            }\n        });\n    }\n\n    return (\n        <Modal\n            titleIconVariant={idpTestingModalIcon}\n            title={idpTestingModalTitle}\n            isOpen={isOpen}\n            variant={ModalVariant.medium}\n            onClose={dismissTestingModal}\n            actions={[\n                primaryModalAction.key !== null ? primaryModalAction\n                : [\n                    <Button isDisabled={!testBtnEnabled} key=\"Begin test\" variant=\"primary\" onClick={handleTestBtn}>\n                        Begin Test\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"link\" onClick={dismissTestingModal}>\n                        Cancel\n                    </Button>\n                ]\n            ]}\n        >\n            <TextContent>\n                <Text>{idpTestingModalBody}</Text>\n                <Title headingLevel={\"h3\"} hidden={!idpTestingModalErrorBody}>Error:</Title>\n                <Text hidden={!idpTestingModalErrorBody}>{idpTestingModalErrorBody}</Text>\n            </TextContent>\n        </Modal>\n    )\n}\n\nexport { IdpTestingModal };\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiToggleIdPStatus } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nexport const DisableIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n\n    const disableIdp = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        onClose();\n    }\n\n    return (\n        <Modal\n            titleIconVariant={'warning'}\n            title=\"Disable identity provider?\"\n            isOpen={isOpen}\n            variant={ModalVariant.small}\n            onClose={onClose}\n        >\n            <ModalBody>\n                Disabling your identity provider will allow users on your organization to sign-in using their Red Hat credentials\n            </ModalBody>\n            <ModalFooter>\n                <Button variant=\"danger\" onClick={() => disableIdp()}>\n                    Disable\n                </Button>\n                <Button variant=\"link\" onClick={onClose}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiDeleteIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n  idpAlias: string,\n  isOpen: boolean,\n  onClose: () => void,\n  recomputeAppState: () => void\n}\n\nexport const DeleteIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n  const chrome = useChrome();\n\n  const deleteIdp = async () => {\n    await apiDeleteIdp(chrome, idpAlias);\n    recomputeAppState();\n    onClose();\n  }\n\n  return (\n    <Modal\n      titleIconVariant={'warning'}\n      title=\"Delete identity provider?\"\n      isOpen={isOpen}\n      variant={ModalVariant.small}\n      onClose={onClose}\n    >\n      <ModalBody>\n        You will have to restart the wizard to configure an identity provider.\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"danger\" onClick={() => deleteIdp()}>\n          Delete\n        </Button>\n        <Button variant=\"link\" onClick={onClose}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport './configured-saml-idp.scss'\nimport { samlResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Label,\n    Popover,\n    Text,\n    TextArea,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOApiUrl, getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport { IdpTestingModal } from \"../IdpTesting/idp-testing-modal\";\nimport { DisableIdpModal } from \"../Configured/disable-idp-modal\";\nimport { DeleteIdpModal } from './delete-idp-modal';\n\ninterface Props {\n    samlData: samlResponseData,\n    milestoneTwoEnabled: boolean\n    recomputeAppState: () => void\n}\n\nconst ConfiguredSamlIdp = ({ samlData, milestoneTwoEnabled, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n    const [isTestingModalVisible, toggleTestingModalVisibility] = useState(false);\n    const [isDisabledModalVisible, toggleIsDisabledModalVisible] = useState(false);\n    const [isDeleteModalVisible, toggleIsDeleteModalVisible] = useState(false);\n\n    return (\n        <Form>\n            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                <p>Forthcoming enhancements will provide the ability to edit.</p>\n            </Alert>\n\n            <Title headingLevel={\"h1\"} className=\"pf-v5-u-display-flex\">\n                {samlData.displayName}\n                {samlData.enabled\n                    ? <Label color=\"green\" icon={<CheckCircleIcon />} className=\"pf-v5-u-ml-md\">\n                        Enabled\n                    </Label>\n                    : <Label color=\"grey\" icon={<WrenchIcon />} className=\"pf-v5-u-ml-md\">\n                        Disabled\n                    </Label>\n                }\n            </Title>\n\n            <FormGroup\n                label=\"Identity provider entityID\"\n                fieldId=\"saml-entity-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The entityID used to validate the Issuer for received SAML assertions.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"saml-entity-id\" name=\"saml-entity-id\" value={samlData.identityProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>The entityID attribute is in your SAML metadata configuration</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Single sign-on authentication request URL\"\n                fieldId=\"saml-authn-request-url\">\n                <TextInput isDisabled type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.authenticationRequestsUrl} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>The URL that sends SAML authentication requests</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Service Provider Entity ID\"\n                fieldId=\"saml-provider-entity-id\">\n                <TextInput isDisabled type=\"text\" id=\"saml-provider-entity-id\" name=\"saml-provider-entity-id\" value={samlData.serviceProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>The Entity ID that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\"</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n\n            <FormGroup\n                label=\"x509 certificate\"\n                fieldId=\"saml-x509-certificate\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                A PEM certificate that is used to check for signatures.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextArea resizeOrientation=\"vertical\" isDisabled type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.x509Certificate} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>\n                            A Base64 encoded certificate must not include the certificate preamble/ending:\n                            <code>(-----BEGIN/END CERTIFICATE-----)</code>\n                        </HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"service-provider-metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate sso.redhat.com with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"service-provider-metadata-url\"\n                    name=\"service-provider-metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint/descriptor`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            {!milestoneTwoEnabled &&\n                <ActionList>\n                    <Popover\n                        triggerAction=\"hover\"\n                        aria-label=\"Hoverable popover\"\n                        headerContent={<div>Read-Only</div>}\n                        bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                            enhancements will provide the ability to edit.</div>}\n                        footerContent=\"\">\n                        <ActionListItem>\n                            <Button isDisabled>\n                                Save\n                            </Button>\n                        </ActionListItem>\n                    </Popover>\n                    <ActionListItem>\n                        <Button isDisabled variant=\"link\">\n                            Cancel\n                        </Button>\n                    </ActionListItem>\n                </ActionList>\n            }\n\n            {milestoneTwoEnabled &&\n                <ActionList hidden={!milestoneTwoEnabled}>\n                    <ActionListItem>\n                        {!samlData.enabled\n                            ? <Button onClick={() => toggleTestingModalVisibility(true)}>\n                                Test and enable\n                            </Button>\n                            : <Button variant={\"danger\"} onClick={() => toggleIsDisabledModalVisible(true)}>\n                                Disable\n                            </Button>\n                        }\n                    </ActionListItem>\n                    <ActionListItem>\n                        <Button variant=\"link\" onClick={() => toggleIsDeleteModalVisible(true)} isDanger>\n                            Delete identity provider\n                        </Button>\n                    </ActionListItem>\n                    {isDisabledModalVisible && <DisableIdpModal idpAlias={samlData.idpAlias} isOpen={isDisabledModalVisible} onClose={() => toggleIsDisabledModalVisible(false)} recomputeAppState={recomputeAppState} />}\n                    {isTestingModalVisible && <IdpTestingModal idpAlias={samlData.idpAlias} isOpen={isTestingModalVisible} onClose={() => toggleTestingModalVisibility(false)} recomputeAppState={recomputeAppState} />}\n                    {isDeleteModalVisible && <DeleteIdpModal idpAlias={samlData.idpAlias} isOpen={isDeleteModalVisible} onClose={() => toggleIsDeleteModalVisible(false)} recomputeAppState={recomputeAppState} />}\n                </ActionList>\n            }\n        </Form>\n    )\n}\n\nexport default ConfiguredSamlIdp;\n","import './configured-idp.scss';\nimport ConfiguredOidcIdp from './configured-oidc-idp';\nimport ConfiguredSamlIdp from './configured-saml-idp';\nimport React, {useState, useEffect, ReactElement} from 'react';\nimport {\n    Card,\n    CardBody,\n    Spinner\n} from '@patternfly/react-core';\n\nimport {idpResponseData, oidcResponseData, samlResponseData} from \"../CommonInterfaces/idp-response-types\";\n\ninterface Props {\n    responseData: idpResponseData,\n    milestoneTwoFeaturesEnabled: boolean\n    recomputeAppState: () => void\n}\n\nconst ConfiguredIdp = ({responseData, milestoneTwoFeaturesEnabled, recomputeAppState}: Props) => {\n\n    // flag to control which values get displayed\n\n    const [providerType, setProviderType] = useState<ReactElement>(\n       <Spinner/>\n    )\n\n    useEffect(() => {\n        if (responseData.providerId === 'saml-improved') {\n            setProviderType(<ConfiguredSamlIdp samlData={responseData as samlResponseData} milestoneTwoEnabled={milestoneTwoFeaturesEnabled} recomputeAppState={recomputeAppState}/>);\n        }\n        else if (responseData.providerId === 'oidc-improved') {\n            setProviderType(<ConfiguredOidcIdp oidcData={responseData as oidcResponseData}/>);\n        }\n    }, [responseData]);\n\n    return (\n        <React.Fragment>\n            <Card isCompact={false} isLarge={true}>\n                <CardBody>\n                    {providerType}\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default ConfiguredIdp;\n","import './idp-not-setup.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from \"prop-types\";\n\ninterface Props{\n    setupIDP: any,\n    wizardEnabled: boolean\n}\n\nconst IdpNotSetup = ({setupIDP, wizardEnabled}: Props) => {\n\n    return <div className=\"notSetupDiv\">\n                <CubesIcon className=\"cubesIcon\"/>\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">No Identity Providers are currently configured</Title>\n                <Text className=\"pf-v5-u-mt-md\">Your organization has not integrated an identity provider. More information is available <Button variant=\"link\" target=\"_blank\" href=\"https://access.redhat.com/announcements/7039300\" component=\"a\" isInline>here</Button></Text>\n                <Button className={wizardEnabled ? \"pf-v5-u-mt-lg\" : \"hideFeature\"} variant=\"primary\" onClick={setupIDP}>Set up an identity provider</Button>\n            </div>\n}\n\nIdpNotSetup.propTypes = {\n    setupIDP: PropTypes.func\n}\n\nexport default IdpNotSetup;\n","import React from 'react';\nimport { WizardFooterWrapper, useWizardContext} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\n\ninterface Props {\n    userChoices: UserChoices;\n    setNextTriggered: Function;\n    setPreviousTriggered: Function;\n    currentState: string;\n}\n\nconst GenericFooter = ({userChoices, setNextTriggered, setPreviousTriggered, currentState}: Props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (!isFailureTriggered(userChoices, currentState, validations, setValidations)) {\n            goToNextStep();\n        }\n        else {\n            setNextTriggered(true);\n        }\n    }\n\n    /**\n     * on back click we need to be able to trigger the wizard context's default back functionality but we also need to\n     * handle the current state stored in the flowTemplate.\n     */\n    const handleBackClick = () => {\n        // handles wizard default functionality\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        setPreviousTriggered();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick}>Next</Button>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default GenericFooter;\n","import React, { MutableRefObject } from 'react';\nimport {\n    WizardFooterWrapper /* data-codemods */, useWizardContext /* data-codemods */\n} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button, Alert, AlertGroup } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport { SubmittableChoices, UserChoices } from \"../CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID,\n    X509_CERTIFICATE,\n    SERVICE_PROVIDER_ENTITY_ID\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\n\nimport PropTypes from \"prop-types\";\nimport { useValidationContext } from \"../CommonInterfaces/validation-context\";\nimport { apiCreateIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\n\ninterface Props {\n    userChoiceData: MutableRefObject<UserChoices>;\n    previous: Function;\n    currentState: string;\n}\n\nconst SubmitFooter = ({ userChoiceData, previous, currentState }: Props) => {\n    const chrome = useChrome();\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [alerts, setAlerts] = React.useState<React.ReactNode>();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * convert the choice data to use the key's required by the api.\n     */\n    const filterChoiceData = (): SubmittableChoices => {\n        const provider = userChoiceData.current.selections.protocol === \"OIDC_CONFIG\" ? \"oidc-improved\" : \"saml-improved\"\n        const idpEID = userChoiceData.current.selections[IDENTITY_PROVIDER_ENTITY_ID];\n        const reqURL = userChoiceData.current.selections[AUTH_REQUEST_URL];\n        const serviceEID = userChoiceData.current.selections[SERVICE_PROVIDER_ENTITY_ID];\n        const cert = userChoiceData.current.selections[X509_CERTIFICATE];\n\n        return {\n            providerId: provider,\n            identityProviderEntityId: idpEID,\n            authenticationRequestsUrl: reqURL,\n            serviceProviderEntityId: serviceEID,\n            x509Certificate: cert,\n        }\n    }\n\n    /**\n     * function that allows us to trigger the error alert on unsuccessful api call.\n     */\n    const throwError = (message: string) => {\n        const timeout = 8000;\n        // eslint-disable-next-line react/jsx-key\n        setAlerts(<Alert variant=\"danger\" isInline isPlain title={message} timeout={timeout} onTimeout={() => { setAlerts([]) }} />)\n    }\n\n    const createIDPCall = () => {\n        apiCreateIdp(chrome, filterChoiceData())\n            .then(response => response.json())\n            .then((responseData) => {\n                // errors that come through post authentication typically end up here\n                if (responseData.error || responseData.error_description) {\n                    console.error(\"Error Type: \" + responseData.error);\n                    console.error(\"Error Message: \" + responseData.error_description);\n                    throwError(\"Failed to upload config: \" + responseData.error_description);\n\n                    setIsLoading(false);\n                }\n                else {\n                    setIsLoading(false)\n                    goToNextStep();\n                }\n\n            })\n            .catch(error => {\n                // this handles any of the extraneous errors.\n                throwError(error.toString());\n                console.error('Error: ', error);\n                setIsLoading(false);\n            })\n    }\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        const stringifySpace = 2;\n        console.log(\"Submitting with this data: \" + JSON.stringify(userChoiceData, null, stringifySpace));\n\n        if (!isFailureTriggered(userChoiceData.current, currentState, validations, setValidations)) {\n            // trigger the spinner.\n            setIsLoading(true);\n            // fire the call to SSO.\n            createIDPCall();\n        } else {\n            setIsLoading(false);\n        }\n    }\n\n    const handleBackClick = () => {\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        previous();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick} isLoading={isLoading} >Next</Button>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n            <AlertGroup isLiveRegion className=\"pf-v5-u-mt-sm\">\n                {alerts}\n            </AlertGroup>\n        </WizardFooterWrapper>\n    );\n}\n\nSubmitFooter.propTypes = {\n    userChoiceData: PropTypes.object,\n}\n\nexport default SubmitFooter;\n","import React from 'react';\nimport { WizardFooterWrapper} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\n\nconst FinalizeFooter = () => {\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        window.location.reload();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button onClick={handleNextClick}>Submit</Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default FinalizeFooter;\n","import './flow-template.scss'\nimport React, {useState, useRef, useEffect} from 'react';\nimport {Wizard, WizardStep} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport {idpResponseData} from \"../CommonInterfaces/idp-response-types\";\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {InputValidation} from '../CommonInterfaces/input-validation'\nimport {PageHeader, PageHeaderTitle} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport CustomerInformation from '../FirstStep/customer-information';\nimport OIDCConfig from '../SecondStep/oidc-configuration';\nimport SAMLConfig from '../SecondStep/saml-configuration';\nimport ImportFromFile from '../ThirdStep/import-from-file';\nimport ImportFromUrl from '../ThirdStep/import-from-url';\nimport ImportSamlFromFile from '../ThirdStep/import-saml-from-file';\nimport ImportSamlFromUrl from '../ThirdStep/import-saml-from-url';\nimport ImportSamlManual from '../ThirdStep/import-saml-manual';\nimport URLsForUser from '../FinalStep/urls-for-user';\nimport ConfiguredIdp from '../Configured/configured-idp';\nimport IdpNotSetup from \"../IdpNotSetup/idp-not-setup\";\nimport GenericFooter from './generic-footer';\nimport SubmitFooter from './submit-footer';\nimport FinalizeFooter from './finalize-footer';\nimport PropTypes from \"prop-types\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {PageSection, Text, TextContent, TextVariants, Spinner} from \"@patternfly/react-core\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport ValidationContext, {\n    ValidationContextType\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {apiGetIdp} from \"../ApiClient/idp-controller\";\n\ninterface Props {\n    accessToken: string\n}\n\nconst FlowTemplate = ({accessToken}: Props) => {\n    const chrome = useChrome();\n    // intended to serve as the main aggregate of data that gets sent to the server\n    const userChoices = useRef<UserChoices>({selections: {}});\n\n    // Is the admin's account been configured with an idp. If so display the management screen.\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isAllowedToConfigure, setIsAllowedToConfigure] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInit, setIsInit] = useState(true);\n    const [idpData, setIdpData] = useState({idpAlias: '', providerId: '', displayName: '', enabled: ''});\n    const isWizardFlowEnabled = useFlag('iamconsole.IDPIntegration.wizardFlowEnabled')\n\n\n    const recomputeAppState = () => {\n        apiGetIdp(chrome)\n        .then(response => {\n            if (response.status === 204) {\n                return {status: ''};\n            }\n            return response.json()\n        })\n        .then((data: idpResponseData) => {\n            if (data.providerId === 'oidc-improved' || data.providerId === 'saml-improved') {\n                setIdpData(data);\n                setIsLoading(false);\n                setIsConfigured(true);\n            } else if (data.error) {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(false);\n            } else {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(true);\n            }\n        })\n        .catch(error => {\n            console.error('Error: ', error);\n            setIsLoading(false);\n        })\n    }\n\n    useEffect(() => {\n        recomputeAppState();\n    }, [])\n\n    const defaultValue: ValidationContextType = {\n        validations: {\n            CUSTOMER_INFORMATION: {},\n            OIDC_CONFIG: {},\n            SAML_CONFIG: {},\n            IMPORT_FROM_FILE: {},\n            IMPORT_FROM_URL: {},\n            IMPORT_SAML_FROM_FILE: {},\n            IMPORT_SAML_FROM_URL: {},\n            IMPORT_SAML_MANUALLY: {}\n        },\n        // eslint-disable-next-line no-empty-function\n        setValidations: () => {\n        }\n    };\n\n    // handle the present validation state of the various steps.\n    const [validations, setValidations] = useState<InputValidation>(defaultValue.validations)\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available.\n     */\n    const [flowState, setFlowState] = useState({\n        currentState: FlowStep.CUSTOMER_INFORMATION,\n        previousState: \"\"\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n        // eslint-disable-next-line no-empty-function\n    const closeWizard = () => {\n        }\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideCustomerInformation: false,\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideImportManually: true,\n        hideFinish: true,\n    })\n\n    /*\n     * used to communicated between the footer and currently displayed window.\n     * this is currently unused, but I suggest leaving this here until we have come up with a fix for displaying the\n     * error state\n     */\n    // eslint-disable-next-line no-unused-vars\n    const [nextTriggered, setNextTriggered] = useState(false);\n\n    const triggerNextStep = (nextStep: string) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch (nextStep) {\n            case FlowStep.OIDC_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                newDisplay.hideSAML = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.SAML_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                newDisplay.hideOIDC = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                newDisplay = {...displayed};\n                newDisplay.hideImportManually = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.FINAL_STEP:\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                });\n                break;\n            default:\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                });\n\n        }\n\n    }\n\n    /**\n     *\n     * @param validChoices an array of strings representing the values that will remain in the selection list.\n     */\n    const pruneChoices = (validChoices: string[]) => {\n        const choicesKeys = Object.keys(userChoices.current.selections);\n        for (let i = 0; i < choicesKeys.length; i++) {\n            if (!validChoices.includes(choicesKeys[i])) {\n                // @ts-ignore\n                delete userChoices.current.selections[choicesKeys[i]];\n            }\n        }\n    }\n\n    const triggerBackStep = (prevStep: string) => {\n        switch (prevStep) {\n            case FlowStep.OIDC_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.SAML_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            default:\n                pruneChoices([\"\"]);\n                setDisplayed({\n                    hideCustomerInformation: false,\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n        }\n    }\n\n    const setBackTriggered = () => {\n        triggerBackStep(flowState.previousState)\n    }\n\n    return (\n        <div className=\"flowPage\">\n            <PageHeader className=\"wizardHeader\">\n                <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-v5-u-mb-lg\"/>\n                <TextContent>\n                    Manage identity provider integration for your organization.{' '}\n                    <Text component={TextVariants.a}>\n                        {/* TODO: add the correct URL below\n                         <Button variant=\"link\" href={\"https://www.redhat.com\"} target=\"_blank\" component=\"a\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\"right\" className=\"pf-v5-u-ml-xs\">\n                            Learn more about identity provider integration\n                        </Button>\n                         */}\n                    </Text>\n                </TextContent>\n            </PageHeader>\n            <PageSection>\n                <div className={isLoading ? 'loadingIcon' : 'hiddenPage'}>\n                    <Spinner/>\n                </div>\n                <div className={!isLoading && isConfigured ? '' : 'hiddenPage'}>\n                    <ConfiguredIdp responseData={idpData} milestoneTwoFeaturesEnabled={isWizardFlowEnabled} recomputeAppState={recomputeAppState}/>\n                </div>\n                <div className={(!isLoading && !isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                    <IdpNotSetup setupIDP={() => {\n                        setIsInit(false)\n                    }} wizardEnabled={isWizardFlowEnabled && isAllowedToConfigure}/>\n                </div>\n                <div className={(!isConfigured && !isInit) ? '' : 'hiddenPage'}>\n                    <ValidationContext.Provider value={{validations, setValidations}}>\n                        <Wizard\n                            onClose={closeWizard}\n                            isProgressive>\n\n                            {/* Standard customer config. Every flow requires this */}\n                            <WizardStep\n                                id={'CUSTOMERINFORMATION'}\n                                name={'Customer Information'}\n                                isHidden={displayed.hideCustomerInformation}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setNextTriggered={setNextTriggered}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'CUSTOMER_INFORMATION'}\n                                    />\n                                }>\n                                <CustomerInformation\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                            <WizardStep\n                                id={'OIDCCONFIG'}\n                                name={'OIDC Configuration'}\n                                isHidden={displayed.hideOIDC}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setNextTriggered={setNextTriggered}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'OIDC_CONFIG'}\n                                    />\n                                }>\n                                <OIDCConfig\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMFILE'}\n                                name={'Import config from file'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_FILE}\n                                    />\n                                }>\n                                <ImportFromFile\n                                    updateStatus={triggerNextStep}\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMURL'}\n                                name={'Import config from URL'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_URL}\n                                    />\n                                }>\n                                <ImportFromUrl\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices}\n                                />\n                            </WizardStep>\n\n                            {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                            <WizardStep\n                                id={'SAMLCONFIG'}\n                                name={'Saml Configuration'}\n                                isHidden={displayed.hideSAML}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setNextTriggered={setNextTriggered}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'SAML_CONFIG'}\n                                    />\n                                }>\n                                <SAMLConfig\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                name={'Import SAML from file'}\n                                id={'IMPORTSAMLFROMFILE'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_FROM_FILE}\n                                    />\n                                }>\n                                <ImportSamlFromFile\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n\n                            </WizardStep>\n                            <WizardStep\n                                name={'Import SAML Manually'}\n                                id={'IMPORTSAMLMANUALLY'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportManually)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_MANUALLY}\n                                    />\n                                }>\n\n                                <ImportSamlManual\n                                    updateStatus={triggerNextStep}\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices.current}\n                                />\n\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTSAMLFROMURL'}\n                                name={'Import SAML from URL'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportFromURL)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_FROM_URL}\n                                    />\n                                }>\n\n                                <ImportSamlFromUrl\n                                    resetNextClicked={setNextTriggered}\n                                    rootUserChoices={userChoices}\n                                />\n\n                            </WizardStep>\n\n                            {/* Final steps of the process. again any selection will show the following two steps.*/}\n                            <WizardStep\n                                id={'FINALSTEP'}\n                                name={'Configure URL\\'s'}\n                                isHidden={displayed.hideFinish}\n                                footer={\n                                    <FinalizeFooter/>\n                                }>\n                                {/* should support both SAML and OIDC params */}\n                                <URLsForUser accessToken={accessToken}/>\n                            </WizardStep>\n                        </Wizard>\n                    </ValidationContext.Provider>\n                </div>\n            </PageSection>\n        </div>\n);\n}\n\n\nFlowTemplate.propTypes = {\n    accessToken: PropTypes.string\n}\n\nexport default FlowTemplate;\n","import './non-admin-user.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminIDP = () => {\n\n    const triggerRedirect = () => {\n        window.location.href = \"/iam/my-user-access\";\n    }\n    const myUserAccessLink = \"/iam/my-user-access\";\n\n    return <div className=\"nonAdminDiv\">\n                <LockIcon className=\"lockIcon\" />\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">Access permissions needed</Title>\n                <Text className=\"pf-v5-u-mt-lg\">\n                    To access Identity Provider Integration, ask your organization administrator(s) to adjust your permissions,\n                    or visit <Button variant=\"link\" href={myUserAccessLink} target={\"_blank\"} component=\"a\" isInline>My User Access</Button> to learn more about your permissions\n                </Text>\n                <Button onClick={triggerRedirect} className=\"pf-v5-u-mt-lg\">Return to home page</Button>\n            </div>\n}\n\nexport default NonAdminIDP;\n","import './identity-provider-integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport FlowTemplate from '../../Apps/IdpSelfService/IdpFlowTemplate/flow-template'\nimport DisabledPage from \"../../Components/DisabledPage/disabled-page\";\nimport {isAdminUser} from '../../Utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\nimport NonAdminIDP from \"../../Components/NonAdminUser/non-admin-idp\";\n\n\nconst IdentityProviderIntegration = () => {\n    const chrome = useChrome();\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: false,\n        selfServiceIDP: <DisabledPage/>\n    })\n    const isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        // eslint-disable-next-line no-undef\n        chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            userToken = token;\n            if (!isAdminUser(userToken!)) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <NonAdminIDP/>\n                })\n                return;\n            }\n            // if the user is in fact and admin user then render TwoFactorCheckOld\n            if (isAdminUser(userToken!) && isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <FlowTemplate accessToken={userToken!} />\n                })\n            }\n        })\n    }, []);\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n\n}\n\nexport default IdentityProviderIntegration\n","import {ValidationTemplate} from \"../Apps/IdpSelfService/CommonInterfaces/oidc-validation\";\nimport {UserChoices} from \"../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {useState} from \"react\";\n\nfunction parseToken (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload;\n}\n\nexport function isAdminUser (token :string) {\n    return parseToken(token).is_org_admin;\n}\n\n\nexport function getOrgId (token :string) {\n    return parseToken(token).org_id;\n}\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult {\n    if (required && !input) {\n        if (type === 'RADIO') {\n            return {\n                status: 'error',\n                message: 'A selection must be made'\n            }\n        }\n        return {\n            status: 'error',\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified:VerificationResult;\n    let results :boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\n/**\n * \n * @param {Object} choices state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @param {String} currentState variable being changed\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\n// eslint-disable-next-line\nexport function isFailureTriggered (choices :UserChoices, currentState :string, validations: ValidationTemplate, setValidations: Function) {\n    let failureTriggered = false;\n    const update: ValidationTemplate = {};\n    Object.keys(validations).forEach(validationKey => {\n        update[validationKey] = {};\n        if (validationKey === currentState) {\n            Object.keys(validations[currentState]).forEach(field => {\n\n                const submittedValue = choices && choices.selections[field];\n                // @ts-ignorer\n                const submittedType = validations[validationKey][field].inputType;\n\n                const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n                if (verificationObject.status !== 'default') {\n                    failureTriggered = true;\n                }\n\n                // @ts-ignore\n                update[validationKey][field] = {\n                    inputType: submittedType,\n                    variant: verificationObject.status,\n                    message: verificationObject.message\n                }\n            });\n        }\n    });\n\n    setValidations(update);\n    return failureTriggered;\n}\n\nexport const getSSOBaseUrl = (chromeApi: any) => {\n    if (chromeApi.getEnvironment() === 'prod') {\n        return \"https://sso.redhat.com/auth/realms/redhat-external/\";\n    }\n    return \"https://sso.stage.redhat.com/auth/realms/redhat-external/\";\n}\n\nexport const getSSOApiUrl = (chromeApi: any, apiPath: string) => {\n    return getSSOBaseUrl(chromeApi) + apiPath;\n}\n"],"names":["className","headingLevel","size","ValidationContext","createContext","validations","CUSTOMER_INFORMATION","OIDC_CONFIG","SAML_CONFIG","IMPORT_FROM_FILE","IMPORT_FROM_URL","IMPORT_SAML_FROM_FILE","IMPORT_SAML_FROM_URL","IMPORT_SAML_MANUALLY","setValidations","useValidationContext","context","useContext","Error","CustomerInformation","resetNextClicked","rootUserChoices","updateStatus","useEffect","updated","inputType","variant","message","Form","Title","Text","FormGroup","onChange","value","selections","target","id","protocol","handleInputSelection","handleChange","role","fieldId","label","Radio","isDisabled","name","propTypes","OidcConfiguration","setSelections","useState","handleSelection","inputMethod","parseVariantValue","TextInput","_event","type","HelperText","HelperTextItem","clientId","clientSecret","SamlConfiguration","isRequired","ImportFromFile","fileData","setFileData","FileUpload","toString","onDataChange","data","err","result","console","error","configFileData","update","browseButtonText","rootValidation","ImportFromUrl","status","current","currentTarget","nextClicked","formatMessage","args","formattedMessage","replace","match","arg","shift","String","index","parseInt","undefined","FlowStep","static","SamlMetadataConstants","IDENTITY_PROVIDER_ENTITY_ID","AUTH_REQUEST_URL","X509_CERTIFICATE","SERVICE_PROVIDER_ENTITY_ID","SamlMetadataMessages","SUCCESS_MSG","SamlMetadataFile","forwardRef","maxKBSize","ref","allowedFileTypes","file","setFile","setValue","filename","setFilename","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isFileSizeRejected","setIsFileSizeRejected","isExpanded","setIsExpanded","isSafe","setIsSafe","clear","useImperativeHandle","getFile","filenamePlaceholder","onFileInputChange","_","reader","FileReader","onerror","FILE_READ_ERROR","onload","event","xmlString","includes","length","test","containsPotentialThreats","INVALID_FILE_TYPE","isFileSizeInvalid","xml","parsedXml","XMLParser","ignoreAttributes","allowBooleanAttributes","attributeNamePrefix","parseAttributeValue","ignorePiTags","parse","keyDescriptors","EntityDescriptor","IDPSSODescriptor","KeyDescriptor","services","SingleSignOnService","idpEntityID","extractIdpEntityID","location","Array","isArray","httpPostService","find","service","BINDING","HTTP_POST_BINDING","httpRedirectService","HTTP_REDIRECT_BINDING","LOCATION","extractLocation","certificates","Set","keyDescriptor","x509Data","KEY_INFO","X509_DATA","dsX509Data","DS_KEY_INFO","DS_X509_DATA","certificatesArray","DS_X509_CERTIFICATE","certificate","add","extractX509Certificate","isValid","INVALID_OR_MISSING_DATA","cert","values","next","FINAL_STEP","FILE_SUCCESSFULLY_LOADED","toFixed","parseError","FILE_PARSING_ERROR","MALICIOUS_FILE_DETECTED","readAsText","onReadStarted","_fileHandle","onReadFinished","onClearClick","dropzoneProps","accept","maxSize","onDropRejected","validated","hideDefaultPreview","FormHelperText","FILE_TOO_LARGE","SAML_XML_REQUIREMENTS","ExpandableSection","toggleText","onToggle","displayName","ImportSamlFromFile","samlMetadataFile","setSamlMetadataFile","updateValidations","serviceProviderEntityId","ImportSamlFromUrl","identityProviderEntityId","authenticationRequestsUrl","x509Certificate","TextArea","resizeOrientation","accessToken","orgId","setOrgId","chrome","useChrome","getConfigURL","path","ClipboardCopy","isReadOnly","clickTip","oidcData","ssoBaseUrl","Alert","isInline","title","enabled","Label","color","icon","labelIcon","Popover","triggerAction","bodyContent","Button","onClick","e","preventDefault","formGroupLabelHelp","issuerUrl","authorizationUrl","tokenUrl","TextContent","component","p","idpAlias","ActionList","headerContent","footerContent","ActionListItem","isDanger","getSSOIdpApiUrl","chromeApi","async","apiToggleIdPStatus","token","auth","getToken","apiStatusUrl","response","fetch","method","referrerPolicy","headers","body","JSON","stringify","ok","statusText","IdpTestingModal","isOpen","onClose","recomputeAppState","primaryModalAction","setPrimaryModalAction","testBtnEnabled","setTestBtnEnabled","idpTestingModalIcon","setIdpTestingModalIcon","idpTestingModalTitle","setIdpTestingModalTitle","idpTestingModalBody","setIdpTestingModalBody","idpTestingModalErrorBody","setIdpTestingModalErrorBody","resetTestingModal","dismissTestingModal","enableIdP","Modal","titleIconVariant","medium","actions","key","window","open","idpAliasJson","idpAliasJsonString","encodeURIComponent","getTestUrl","addEventListener","origin","success","Link","to","errorMsg","hidden","DisableIdpModal","small","ModalBody","ModalFooter","disableIdp","DeleteIdpModal","deleteIdpUrl","apiDeleteIdp","deleteIdp","samlData","milestoneTwoEnabled","isTestingModalVisible","toggleTestingModalVisibility","isDisabledModalVisible","toggleIsDisabledModalVisible","isDeleteModalVisible","toggleIsDeleteModalVisible","responseData","milestoneTwoFeaturesEnabled","providerType","setProviderType","Spinner","providerId","Card","isCompact","isLarge","CardBody","IdpNotSetup","setupIDP","wizardEnabled","href","userChoices","setNextTriggered","setPreviousTriggered","currentState","goToNextStep","goToPrevStep","WizardFooter","W","SubmitFooter","userChoiceData","previous","isLoading","setIsLoading","alerts","setAlerts","throwError","isPlain","timeout","onTimeout","log","createIdp","apiCreateIdp","then","json","error_description","catch","AlertGroup","isLiveRegion","reload","FlowTemplate","useRef","isConfigured","setIsConfigured","isAllowedToConfigure","setIsAllowedToConfigure","isInit","setIsInit","idpData","setIdpData","isWizardFlowEnabled","useFlag","apiGetIdp","flowState","setFlowState","previousState","displayed","setDisplayed","hideCustomerInformation","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideImportManually","hideFinish","nextTriggered","triggerNextStep","nextStep","newDisplay","pruneChoices","validChoices","choicesKeys","Object","keys","i","setBackTriggered","prevStep","triggerBackStep","PageHeader","PageHeaderTitle","a","PageSection","Provider","Wizard","isProgressive","WizardStep","isHidden","footer","userToken","currentUser","updateUser","adminUser","selfServiceIDP","isSelfServiceIDPEnabled","appAction","parseToken","base64","split","decodeURIComponent","atob","map","c","charCodeAt","slice","join","isAdminUser","is_org_admin","getOrgId","org_id","setStateValue","stateObject","updateFunction","updatedValue","isFailureTriggered","choices","failureTriggered","forEach","validationKey","field","submittedValue","submittedType","verificationObject","input","required","verified","results","verifyInput","getSSOBaseUrl","getEnvironment","getSSOApiUrl","apiPath"],"sourceRoot":""}