{"version":3,"file":"js/User-Management.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/disabledPage/disabled-page.js","webpack:///./src/Components/utils/general-utils.ts","webpack:///./src/Components/userManagement/UserList.tsx","webpack:///./src/Components/userManagement/modifyUser/DropdownHandler.tsx","webpack:///./src/Components/userManagement/modifyUser/AddUser.tsx","webpack:///./src/Components/userManagement/UserManagementController.tsx","webpack:///./src/Routes/Authentication-Policy/User-Management.tsx"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","import {UserChoices} from \"../idpintegrationflows/commonInterfaces/userChoices\";\nimport {\n    OIDCValidation,\n    ValidationDetails,\n    ValidationTemplate\n} from \"../idpintegrationflows/commonInterfaces/OIDCValidation\";\n\nexport function isAdminUser (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload && jsonPayload.is_org_admin;\n}\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult {\n    if (required && !input) {\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified:VerificationResult;\n    let results :boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\ninterface Selections{\n    [key:string]: string;\n}\n\ninterface Validations{\n    [key:string]: {\n        inputType: string;\n    };\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (choices :Selections, validations :ValidationTemplate, setValidations :Function) {\n    let failureTriggered = false;\n    let update:Selections= {};\n    Object.keys(validations).forEach(validationKey => {\n        const submittedValue = choices &&  choices[validationKey];\n        // @ts-ignorer\n        const submittedType = validations[validationKey].inputType\n\n        const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n        if (verificationObject.status === 'error') {\n            failureTriggered = true;\n        }\n\n        // @ts-ignore\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n\n    });\n\n    // @ts-ignore\n    setValidations(update);\n\n    return failureTriggered;\n}\n","import './UserList.scss';\nimport React, {useEffect, useState, useContext} from 'react';\nimport { Table /* data-codemods */, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport {Toolbar, ToolbarItem, ToolbarContent, SearchInput, Button, Pagination, PaginationVariant, Checkbox} from '@patternfly/react-core';\nimport {QueryContext} from './UserManagementController';\nimport PropTypes from 'prop-types';\nimport {UserData} from './UserData';\n\n\n\ninterface Props{\n    triggerEditUser: Function;\n    triggerAddUser: Function;\n    triggerCancel: Function;\n}\n\ninterface User{\n    user: UserData\n}\n\ninterface UserDetails{\n    checked: boolean;\n}\n\ninterface CheckedUsers{\n    [key:string]: UserDetails;\n}\n\nconst UserList = ({triggerEditUser, triggerAddUser}: Props) => {\n    const queryDetails = useContext(QueryContext);\n    const [listData, setListData] = useState([]);\n    const [checkedUsers, setCheckedUsers] = useState<CheckedUsers>({});\n    // eslint-disable-next-line no-magic-numbers\n    const [perPageValue, setPerPageValue] = useState<string>(\"10\");\n    // eslint-disable-next-line no-magic-numbers\n    const [currentPage, setCurrentPage] = useState<string>(\"0\");\n    // eslint-disable-next-line\n    const [resultsCount, setResultsCount] = useState(20)\n\n    const pullUserList = () => {\n        let targetUrl = queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users?\"\n        targetUrl += new URLSearchParams({\n            firstResultIndex: currentPage,\n            maxResults: perPageValue\n        })\n        fetch(targetUrl, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + queryDetails.userToken\n            }\n        })\n            .then(response => response.json())\n            .then(userList => {\n                setListData(userList.body);\n\n                const checkReference:CheckedUsers = {}\n                // iterate through the result list to populate checked status\n                for (let i = 0; i < userList.body.length; i++) {\n                    const userObj = {\n                        status: userList.body[i].user.status,\n                        username: userList.body[i].user.username,\n                        checked: false\n                    }\n                    const userId = userList.body[i].user.id\n\n                    checkReference[userId] = userObj;\n                }\n                setCheckedUsers(checkReference);\n            })\n    }\n\n    /**\n     * On load pull the user list\n     */\n    useEffect(() => {\n        pullUserList();\n    }, [currentPage]);\n\n    const doNothing = () => {\n        console.log(\"doing nothing\");\n    }\n\n    const handlePageSelect = (_event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n                              newPerPage: number,\n                              newPage: number) => {\n        setPerPageValue(String(newPage));\n    }\n\n    /**\n     *\n     */\n    const disableUser = () => {\n        let targetForDisable;\n        const checkedList = Object.keys(checkedUsers);\n        for (let i = 0; i < checkedList.length; i++) {\n            if (checkedUsers[checkedList[i]].checked) {\n                targetForDisable = checkedList[i];\n                break;\n            }\n        }\n\n        if (targetForDisable) {\n            // eslint-disable-next-line no-useless-concat\n            fetch(queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users\" + \"/\" + targetForDisable + \"/status\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + queryDetails.userToken\n                },\n                body: JSON.stringify({\n                    \"status\": \"disabled\"\n                })\n\n            })\n                .then(response => response.json())\n                .then(() => {\n                    // fire the queries required to disable all selected users\n                    window.location.reload();\n                })\n        }\n    }\n\n    /**\n     * triggered by the edit user button, this function calls the prop passed in that will swap the view to\n     * use edit.\n     */\n    const editUser = () => {\n        let targetForEdit;\n        const checkedList = Object.keys(checkedUsers);\n        for (let i = 0; i < checkedList.length; i++) {\n            if (checkedUsers[checkedList[i]].checked) {\n                targetForEdit = checkedList[i];\n                break;\n            }\n        }\n\n        if (targetForEdit) {\n            // eslint-disable-next-line no-useless-concat\n            fetch(queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users\" + \"/\" + targetForEdit, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + queryDetails.userToken\n                },\n\n            })\n                .then(response => response.json())\n                .then(resp => {\n                    // fire the queries required to disable all selected users\n                    triggerEditUser(resp.body);\n                })\n        }\n    }\n\n    /**\n     * Governs what happens when a user clicks a checkbox. Manages the checkbox useState status\n     */\n    const handleCheckbox = (id: string, checked: boolean) => {\n\n        // get the existing state\n        const existing = checkedUsers[id];\n\n        // if we know something has been checked then display the 'disable user', and 'edit user' buttons\n        if (checked) {\n            // reset with checked\n            existing.checked = true;\n        }\n        else {\n            existing.checked = false;\n        }\n\n        setCheckedUsers({...checkedUsers, [id]: existing});\n\n\n    }\n\n    /**\n     *\n     */\n    const handleNextPageClick = () => {\n        setCurrentPage(currentPage + perPageValue);\n    }\n\n    /**\n     *\n     */\n    const handlePrevPageClick = () => {\n        let target:number = Number(currentPage) - Number(perPageValue);\n        setCurrentPage(String(target));\n    }\n\n    const ConditionRender = () => {\n        // eslint-disable-next-line no-magic-numbers\n        if (listData.length > 0) {\n            return <div>\n                        <Toolbar id=\"userListToolbar\">\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <SearchInput aria-label=\"Search user list\"/>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={()=>{triggerAddUser()}} variant=\"primary\">Add User</Button>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={editUser} variant=\"primary\">Edit User</Button>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={disableUser} variant=\"link\">Disable User</Button>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Table aria-label=\"Sortable table\">\n                            <Thead>\n                                <Tr>\n                                    <Th\n                                       \n                                    />\n                                    <Th>Name</Th>\n                                    <Th modifier=\"wrap\">Email</Th>\n                                    <Th modifier=\"wrap\" info={{ tooltip: 'More information ' }}>\n                                        LastName\n                                    </Th>\n                                    <Th modifier=\"wrap\">First Name</Th>\n                                    <Th modifier=\"wrap\">Status</Th>\n                                </Tr>\n                            </Thead>\n                            <Tbody>\n                                {listData.map((userRecord: User) => (\n                                    <Tr key={userRecord.user.username}>\n                                        <Td>\n                                            <Checkbox\n                                                onChange={(_event, val) => handleCheckbox(userRecord.user.id, val)}\n                                                isChecked={checkedUsers[userRecord.user.id].checked}\n                                                id={userRecord.user.id + '-check'}\n                                            />\n                                        </Td>\n                                        <Td>{userRecord.user.username}</Td>\n                                        <Td>{userRecord.user.email}</Td>\n                                        <Td>{userRecord.user.lastName}</Td>\n                                        <Td>{userRecord.user.firstName}</Td>\n                                        <Td>{userRecord.user.status}</Td>\n                                    </Tr>\n                                ))}\n                            </Tbody>\n                        </Table>\n                        <Pagination\n                            \n                            widgetId=\"bottom-pagination\"\n                            itemCount={resultsCount}\n                            perPage={Number(perPageValue)}\n                            variant={PaginationVariant.bottom}\n                            onPerPageSelect={handlePageSelect}\n                            onNextClick={handleNextPageClick}\n                            onPreviousClick={handlePrevPageClick}\n                            page={Number(currentPage)}\n                        />\n                    </div>\n\n        }\n\n        return <div>spinner ....</div>\n\n    }\n\n    return (\n        <div>\n            <ConditionRender/>\n        </div>\n    )\n}\n\nUserList.propTypes = {\n    triggerEditUser: PropTypes.func,\n    triggerAddUser: PropTypes.func\n\n}\n\nexport default UserList;\n","import React from 'react';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownToggle\n} from '@patternfly/react-core/deprecated';\nimport PropTypes from 'prop-types';\n\ninterface Props {\n    defaultText: string;\n    idValue: string;\n    items:string[];\n    onSelect: Function;\n}\n\n/**\n * A subclass to handle all of the bloat that comes with this under patternfly design\n * @param props primarily intended to  pass the array of items provided to it\n * @constructor\n */\nconst DropdownHandler = ({defaultText, idValue, items, onSelect}: Props) => {\n    const [isDDOpen, setIsDDOpen] = React.useState(false);\n    const [selection, setSelection] = React.useState(defaultText);\n\n    const onDDToggle = (isOpen:boolean) => {\n        setIsDDOpen(isOpen);\n    };\n\n    const onDDFocus = () => {\n        const element = document.getElementById(idValue);\n        element!.focus();\n    };\n    const onDDSelect = () => {\n        setIsDDOpen(false);\n        onDDFocus();\n    };\n\n    return (\n        <Dropdown\n            onSelect={onDDSelect}\n            toggle={\n                <DropdownToggle id={idValue} onToggle={(_event, isOpen) => onDDToggle(isOpen)}>\n                    {selection}\n                </DropdownToggle>\n            }\n            isOpen={isDDOpen}\n            dropdownItems={items.map((val:string) => {\n                return <DropdownItem key={val} onClick={ () => { onSelect(val); setSelection(val); }}>{val}</DropdownItem> })}\n        />\n    )\n}\n\nDropdownHandler.propTypes = {\n    defaultText: PropTypes.string,\n    idValue: PropTypes.string,\n    items: PropTypes.array,\n    onSelect: PropTypes.func\n}\nexport default DropdownHandler;\n","import './AddUser.scss';\nimport DropdownHandler from './DropdownHandler'\nimport React, {useEffect, useState, useContext, ReactElement} from 'react';\nimport {\n    Button,\n    Card,\n    Form,\n    FormGroup,\n    TextInput, CardHeader, CardBody, Checkbox, ActionGroup, Divider, Alert, AlertGroup} from \"@patternfly/react-core\";\nimport {QueryContext} from '../UserManagementController';\nimport PropTypes from 'prop-types';\nimport {FormUser} from './FormUser';\nimport {UserAddress} from './UserAddress';\nimport {PermissionsOptions} from './PermissionsOptions';\nimport {QueryDetails} from '../QueryDetails';\n\n/**\n * The form page allowing for the creation of new users.\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\n\ninterface Props {\n   editingUser: FormUser|undefined;\n   triggerReturn: Function;\n}\n\nconst AddUser = ({editingUser, triggerReturn}: Props) => {\n    const queryDetails: QueryDetails = useContext(QueryContext);\n\n    /*\n     * role: organization_administrator\n     * permissions portal_download, portal_system_management, portal_manage_subscriptions, portal_manage_cases\n     */\n\n    const [alerts, setAlerts] = useState<ReactElement[]>([]);\n    const [isEditMode, setIsEditMode] = useState(false);\n\n    // base form data that needs to be sent to account api.\n    const [formData, setFormData] = useState<FormUser>({\n        salutation: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        address: {\n            city: '',\n            country: '',\n            county: '',\n            state: '',\n            streets: [],\n            zipCode: ''\n        },\n        permissions: [''],\n        phone: '',\n        roles: [],\n        username: '',\n        id: '',\n        status: ''\n    });\n\n    useEffect(() => {\n        // if this prop is set, we know that we are in edit mode\n        if (editingUser) {\n            setIsEditMode(true);\n            setFormData(editingUser);\n        }\n    }, [])\n\n    const [permsChecks, setPermsChecks] = useState<PermissionsOptions>({\n        // eslint-disable-next-line camelcase\n        portal_manage_subscriptions: false,\n        // eslint-disable-next-line camelcase\n        portal_download: false,\n        // eslint-disable-next-line camelcase\n        portal_system_management: false,\n        // eslint-disable-next-line camelcase\n        portal_manage_cases: false,\n        admin: false\n    })\n\n    // base list of provided greetings. this will definitely need reviewing.\n    const greetings = [\n        \"Mr.\",\n        \"Mrs.\",\n        \"Other\"\n    ]\n\n    /**\n     * order matters in the streets selection but we also need to be able to alter the streets array nested in the\n     * parent address object. This simplifies the process.\n     * @param value the input value provided by the user.\n     * @param position the street array position the provided value belongs in.\n     */\n    const handleStreets = (value: string, position: number) => {\n        const streetArray: string[] = [...formData.address.streets]\n        streetArray[position] = value;\n        const addressObject: UserAddress = {...formData.address}\n        addressObject['streets'] = streetArray;\n        // eslint-disable-next-line\n        setFormData({...formData, address: addressObject});\n    }\n\n    /**\n     * helper function to shorten jsx logic. allow you to set the address properties in the root state.\n     * @param key The address key recieving an update.\n     * @param value The value provided by the user.\n     */\n    const handleAddress = (key: string, value: string) => {\n        // typescript is stupid so I'm forcing this to work.\n        const addressData: any = {...formData.address};\n        addressData[key] = value;\n        // eslint-disable-next-line\n        setFormData({...formData, address: addressData})\n    }\n\n    /**\n     * helper function to take care of dropdown selection.\n     */\n    const handleDropDown = (selection: string, identifier: string) => {\n        // eslint-disable-next-line\n        setFormData({...formData, [identifier]: selection})\n    }\n\n    /**\n     * handles the checkbox selection and properly populates the root form data accordingling.\n     */\n    const handlePermsCheckBox = (boxId: string) => {\n        const existingPerms = {...permsChecks};\n        existingPerms[boxId] = !permsChecks[boxId];\n        setPermsChecks(existingPerms);\n\n        // need to create an array with the currently most active permission set for the user.\n        const permsKeys = Object.keys(existingPerms);\n        const saveablePermsList = [];\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < permsKeys.length; i++) {\n            if (existingPerms[permsKeys[i]] === true) {\n                if (permsKeys[i] === \"admin\") {\n                    const rolesArray = ['organization_administrator'];\n                    // eslint-disable-next-line object-property-newline\n                    setFormData({...formData, roles: rolesArray});\n                }\n                else {\n                    saveablePermsList.push(permsKeys[i])\n                    // eslint-disable-next-line object-property-newline\n                    setFormData({...formData, permissions: saveablePermsList});\n                }\n\n            }\n        }\n\n    }\n\n    /**\n     * handles the submition of the addUser form\n     */\n    const submitForm = () => {\n        // submit query to account api\n        console.log(\"submitting formData object: \")\n        console.log(formData);\n        const updatedForm: FormUser = {...formData};\n        if (isEditMode) {\n            delete updatedForm.id;\n            delete updatedForm.username;\n            delete updatedForm.status;\n        }\n\n        // alter url to handle add vs edit endpoints\n        let targetUrl;\n        if (isEditMode) {\n            targetUrl = queryDetails!.accountAPI + \"/\" + queryDetails!.accountID + \"/users/\" + formData.id;\n        }\n        else {\n            targetUrl = queryDetails!.accountAPI + \"/\" + queryDetails!.accountID + \"/users\"\n        }\n\n        fetch(targetUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + queryDetails.userToken\n            },\n            body: JSON.stringify(updatedForm)\n        })\n            .then(response => response.json())\n            .then(resp => {\n                if (resp.status) {\n                    // eslint-disable-next-line no-magic-numbers\n                    if (resp.status === 400) {\n                        setAlerts([<Alert title={resp.title} key={resp.title} variant=\"danger\" timeout={8000}>{JSON.stringify(resp.errors)}</Alert>])\n                        // eslint-disable-next-line no-magic-numbers\n                        document.getElementsByClassName('pf-c-page__main')[0].scrollTop = 0;\n                    }\n                    // eslint-disable-next-line no-magic-numbers\n                    else if (resp.status === 200) {\n                        triggerReturn();\n                    }\n                    else {\n                        setAlerts([<Alert key=\"mainAlert\" title={resp.title} variant=\"danger\" timeout={8000}>Unexpected Result</Alert>])\n                        // eslint-disable-next-line no-magic-numbers\n                        document.getElementsByClassName('pf-c-page__main')[0].scrollTop = 0;\n                    }\n                }\n                else if (resp.body) {\n                    triggerReturn();\n                }\n\n            })\n\n        // return to previous page on success\n\n        // on error (likely validation) update existing page with toast.\n    }\n\n    return (\n        <div>\n            <Form>\n\n                <div>\n                    <AlertGroup isLiveRegion>\n                        {alerts}\n                    </AlertGroup>\n                </div>\n\n                <Card>\n                    <CardHeader>\n                        Name\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <DropdownHandler\n                                items={greetings}\n                                idValue=\"greetingDropdown\"\n                                defaultText=\"Greeting\"\n                                onSelect={ handleDropDown }\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"First Name\">\n                            <TextInput\n                                id=\"firstName\"\n                                onChange={(_event, value) => { setFormData({...formData, firstName: value}) }}\n                                value={formData.firstName}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Last Name\">\n                            <TextInput\n                                id=\"lastName\"\n                                onChange={(_event, value) => { setFormData({...formData, lastName: value}) }}\n                                value={formData.lastName}\n                            />\n                        </FormGroup>\n                    </CardBody>\n\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Address\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup label=\"Email\">\n                            <TextInput\n                                id=\"email\"\n                                onChange={(_event, value) => { setFormData({...formData, email: value}) }}\n                                value={formData.email}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 1\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address1\" onChange={(_event, value) => { handleStreets(value, 0) }} value={formData.address.streets[0]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 2\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address2\" onChange={(_event, value) => { handleStreets(value, 1) }} value={formData.address.streets[1]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 3\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address3\" onChange={(_event, value) => { handleStreets(value, 2) }} value={formData.address.streets[2]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Postal Code\">\n                            <TextInput\n                                id=\"postalcode\"\n                                onChange = {(_event, value) => { handleAddress('zipCode', value) }}\n                                value={formData.address.zipCode}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"City\">\n                            <TextInput\n                                id=\"city\"\n                                onChange = {(_event, value) => { handleAddress('city', value) }}\n                                value={formData.address.city}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"State\">\n                            <TextInput\n                                id=\"state\"\n                                onChange = {(_event, value) => { handleAddress('state', value) }}\n                                value={formData.address.state}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"County\">\n                            <TextInput\n                                id=\"county\"\n                                onChange = {(_event, value) => { handleAddress('county', value) }}\n                                value={formData.address.county}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Country\">\n                            <TextInput\n                                id=\"country\"\n                                onChange = {(_event, value) => { handleAddress('country', value) }}\n                                value={formData.address.country}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Phone Number\">\n                            <TextInput\n                                id=\"phoneNumber\"\n                                onChange = {(_event, value) => { setFormData({...formData, phone: value}) }}\n                                value={formData.phone}\n                            />\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Red Hat Login\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <TextInput\n                                id=\"login\"\n                                onChange={(_event, value) => { setFormData({...formData, username: value}) }}\n                                value={formData.username}\n                            />\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Permissions\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <Checkbox\n                                label=\"Manage Support Cases\"\n                                isChecked={permsChecks.portal_manage_cases}\n                                onChange={() => { handlePermsCheckBox(\"portal_manage_cases\") }}\n                                id=\"controlled-check-1\"\n                                name=\"check1\"\n                            />\n                            <Checkbox\n                                label=\"Download Software and Updates\"\n                                isChecked={permsChecks.portal_download}\n                                onChange={() => { handlePermsCheckBox(\"portal_download\") }}\n                                id=\"controlled-check-2\"\n                                name=\"check2\"\n                            />\n                            <Checkbox\n                                label=\"View/Renew Subscription Information\"\n                                isChecked={permsChecks.portal_system_management}\n                                onChange={() => { handlePermsCheckBox(\"portal_system_management\") }}\n                                id=\"controlled-check-3\"\n                                name=\"check3\"\n                            />\n                            <Checkbox\n                                label=\"Manage Your Subscriptions\"\n                                isChecked={permsChecks.portal_manage_subscriptions}\n                                onChange={() => { handlePermsCheckBox(\"portal_manage_subscriptions\") }}\n                                id=\"controlled-check-4\"\n                                name=\"check4\"\n                            />\n\n                            <Divider id=\"adminDivider\" component=\"div\"/>\n\n                            <Checkbox\n                                label=\"Account Administrator\"\n                                isChecked={permsChecks.admin}\n                                onChange={() => { handlePermsCheckBox(\"admin\") }}\n                                id=\"admin\"\n                                name=\"check5\"\n                            />\n\n                        </FormGroup>\n\n                    </CardBody>\n                </Card>\n\n                <ActionGroup>\n                    <Button onClick={submitForm} variant=\"primary\">\n                        Submit\n                    </Button>\n                    <Button onClick={() => {triggerReturn()}} variant=\"link\">\n                        Cancel\n                    </Button>\n                </ActionGroup>\n            </Form>\n\n        </div>\n    )\n}\n\nAddUser.propTypes = {\n    editingUser: PropTypes.bool,\n    triggerReturn: PropTypes.func\n}\n\n/**\n * Saving this in case deemed neccessary. This was on UGC but account api doesnt accept it.\n * <Card>\n *                     <CardHeader>\n *                         Preferred Language\n *                     </CardHeader>\n *                     <CardBody>\n *                         <FormGroup>\n *                             <DropdownHandler\n *                                 items={[\"English\", \"Spanish\", \"Mandorin\"]}\n *                                 idValue=\"defaultLanguageDropdown\"\n *                                 defaultText=\"Language\"\n *                                 onSelect={handleDropDown}\n *                             />\n *                         </FormGroup>\n *                         <FormGroup>\n *                             <DropdownHandler\n *                                 items={[\"EST\", \"PST\", \"Central\"]}\n *                                 idValue=\"timezoneDropdown\"\n *                                 defaultText=\"Time Zone\"\n *                                 onSelect={handleDropDown}\n *                             />\n *                         </FormGroup>\n *                     </CardBody>\n *                 </Card>\n */\n\nexport default AddUser;\n","import './UserManagementController.scss';\nimport React, {useEffect, useState, createContext, ReactElement} from 'react';\nimport {PageHeader, PageHeaderTitle} from \"@redhat-cloud-services/frontend-components/PageHeader\";\nimport {Divider, PageSection} from \"@patternfly/react-core\";\nimport UserList from \"./UserList\";\nimport AddUser from './modifyUser/AddUser'\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport {QueryDetails} from './QueryDetails';\nimport {FormUser} from './modifyUser/FormUser'\n\nexport const QueryContext = createContext < QueryDetails > ({\n    accountAPI: \"\",\n    accountID: \"\",\n    userToken: \"\"\n});\n\nconst UserManagementController = () => {\n    const chrome = useChrome();\n    let targetSSO;\n\n    if (window.location.host === \"stage.foo.redhat.com:1337\" || window.location.host === \"console.stage.redhat.com\") {\n        targetSSO = \"https://api.access.stage.redhat.com/account/v1/accounts\";\n    }\n    else {\n        targetSSO = \"https://api.access.redhat.com/account/v1/accounts\";\n    }\n\n    // stores the required information produce queries. Gets stuffed into the context for use in other modules.\n    const [queryDetails, setQueryDetails] = useState < QueryDetails > ({\n        accountAPI: targetSSO,\n        accountID: \"\",\n        userToken: \"\"\n    });\n    const queryBase = {\n        accountAPI: targetSSO,\n        accountID: \"\",\n        userToken: \"\",\n    }\n\n    const [displayedPage, setDisplayedPage] = useState({\n        userList: true,\n        addUser: false,\n        editUser: false\n    })\n\n    // needed to pass edit target from the userList to the addPage. editTarget will be a string with the user's id\n    const [editTarget, setEditTarget] = useState<FormUser>();\n\n    /**\n     * pulls the user's account list for this user from the account api service\n     */\n    const getAccountId = () => {\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            queryBase.userToken = (String(token));\n            // trigger fetch with the existing user's token\n            fetch(queryDetails.accountAPI, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    const bodyPosition = 0;\n                    const accountData = data.body[bodyPosition];\n                    queryBase.accountID = accountData.id;\n                    setQueryDetails(queryBase);\n                })\n        });\n    }\n\n    /**\n     * Passed via props to the userlist to govern the displaying of the addUser page.\n     */\n    const showAddUserPage = () => {\n        setDisplayedPage({\n            userList: false,\n            addUser: true,\n            editUser: false\n        })\n    }\n\n\n    /**\n     * Passed via props to the userlist to govern the displaying of the addUser page.\n     */\n    const showEditUserPage = () => {\n        setDisplayedPage({\n            userList: false,\n            addUser: false,\n            editUser: true\n        })\n    }\n\n    /**\n     * helpful for back/cancel buttons\n     */\n    const showUserListPage = () => {\n        setDisplayedPage({\n            userList: true,\n            addUser: false,\n            editUser: false\n        })\n    }\n\n    /**\n     * used to run the split functionality of what happens when an edit is triggered.\n     * @param userObject\n     */\n    const handleEditSelection = (userObject :FormUser) => {\n        setEditTarget(userObject)\n        showEditUserPage();\n    }\n\n\n    /**\n     * conditional statement to handle the async nature of the initial js queries\n     */\n        // eslint-disable-next-line consistent-return\n    const BaseRender = ():ReactElement|null => {\n        if (queryDetails.accountID && queryDetails.accountID.length > 0) {\n            if (displayedPage.userList) {\n                return <UserList\n                            triggerAddUser={showAddUserPage}\n                            triggerEditUser={handleEditSelection}\n                            triggerCancel={showUserListPage}\n                        />;\n            }\n            else if (displayedPage.addUser) {\n                return <AddUser triggerReturn={showUserListPage} editingUser={undefined}/>;\n            }\n            else if (displayedPage.editUser) {\n                return <AddUser triggerReturn={showUserListPage} editingUser={editTarget} />\n            }\n        }\n        else {\n            return <div>Loading Spinner...</div>\n        }\n        return null;\n    }\n\n    useEffect(() => {\n        getAccountId();\n    }, []);\n\n    return (\n        <div>\n            <PageHeader>\n                <PageHeaderTitle title=\"User Management\" className=\"pf-u-mb-lg\" />\n                <p> Manage organization users and privelages</p>\n            </PageHeader>\n            <Divider/>\n            <PageSection>\n                <QueryContext.Provider value={queryDetails}>\n                    <BaseRender/>\n                </QueryContext.Provider>\n            </PageSection>\n\n        </div>\n\n    )\n}\n\nexport default UserManagementController;\n","import React, { useState, useEffect } from 'react';\nimport UserManagementController from \"../../Components/userManagement/UserManagementController\";\nimport {isAdminUser} from \"../../Components/utils/general-utils\";\nimport DisabledPage from \"../../Components/disabledPage/disabled-page\";\nimport {useFlag} from '@unleash/proxy-client-react';\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\n\n\nconst UserManagement = () => {\n    const chrome = useChrome();\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: true,\n        renderedPage: <UserManagementController />\n    })\n    const isUserManagementEnabled = useFlag('iamconsole.usermanagement.enabled');\n\n    useEffect(() => {\n        // insights?.chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            userToken = token;\n            // if the user is in fact and admin user then render TwoFactorCheckOld\n            if (isAdminUser(userToken!) && isUserManagementEnabled) {\n                updateUser({\n                    adminUser: true,\n                    renderedPage: <UserManagementController />\n                })\n            }\n\n            // check to see if 2fa feature flag is set. if not then render the proper error page\n            if (!isUserManagementEnabled) {\n                updateUser({\n                    adminUser: false,\n                    renderedPage: <DisabledPage/>\n                })\n            }\n\n        })\n    }, []);\n\n\n    return (\n        <React.Fragment>\n            {currentUser.renderedPage}\n        </React.Fragment>\n    )\n}\n\nexport default UserManagement;\n"],"names":["className","headingLevel","size","isAdminUser","token","base64","split","replace","jsonPayload","JSON","parse","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","is_org_admin","setStateValue","value","key","stateObject","updateFunction","updatedValue","processAllInputs","choices","validations","setValidations","failureTriggered","update","Object","keys","forEach","validationKey","submittedValue","submittedType","inputType","verificationObject","input","type","required","status","message","verified","results","test","verifyInput","UserList","triggerEditUser","triggerAddUser","queryDetails","useContext","QueryContext","listData","setListData","useState","checkedUsers","setCheckedUsers","perPageValue","setPerPageValue","currentPage","setCurrentPage","resultsCount","setResultsCount","useEffect","targetUrl","accountAPI","accountID","URLSearchParams","firstResultIndex","maxResults","fetch","method","headers","userToken","then","response","json","userList","body","checkReference","i","length","userObj","user","username","checked","id","pullUserList","handlePageSelect","_event","newPerPage","newPage","String","disableUser","targetForDisable","checkedList","stringify","location","reload","editUser","targetForEdit","resp","handleNextPageClick","handlePrevPageClick","target","Number","Toolbar","ToolbarContent","ToolbarItem","T","SearchInput","Button","onClick","variant","Table","Thead","Tr","Th","modifier","info","tooltip","Tbody","userRecord","Td","Checkbox","onChange","val","existing","handleCheckbox","isChecked","email","lastName","firstName","Pagination","widgetId","itemCount","perPage","bottom","onPerPageSelect","onNextClick","onPreviousClick","page","propTypes","DropdownHandler","defaultText","idValue","items","onSelect","isDDOpen","setIsDDOpen","selection","setSelection","Dropdown","document","getElementById","focus","toggle","DropdownToggle","onToggle","isOpen","onDDToggle","dropdownItems","DropdownItem","AddUser","editingUser","triggerReturn","alerts","setAlerts","isEditMode","setIsEditMode","formData","setFormData","salutation","address","city","country","county","state","streets","zipCode","permissions","phone","roles","permsChecks","setPermsChecks","portal_manage_subscriptions","portal_download","portal_system_management","portal_manage_cases","admin","handleStreets","position","streetArray","addressObject","handleAddress","addressData","handlePermsCheckBox","boxId","existingPerms","permsKeys","saveablePermsList","rolesArray","push","Form","AlertGroup","isLiveRegion","Card","CardHeader","CardBody","FormGroup","identifier","label","TextInput","name","Divider","component","ActionGroup","console","log","updatedForm","Alert","title","timeout","errors","getElementsByClassName","scrollTop","createContext","chrome","useChrome","targetSSO","host","setQueryDetails","queryBase","displayedPage","setDisplayedPage","addUser","editTarget","setEditTarget","showAddUserPage","showUserListPage","handleEditSelection","userObject","auth","getToken","data","accountData","PageHeader","PageHeaderTitle","PageSection","Provider","triggerCancel","undefined","currentUser","updateUser","adminUser","renderedPage","isUserManagementEnabled","useFlag"],"sourceRoot":""}