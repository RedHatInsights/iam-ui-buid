{"version":3,"file":"js/363.39cd64454f15ec806109.js","mappings":"yMAMO,SAASA,IAAoB,QAAAC,EAAAC,UAAAC,OAAZC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAMhC,OALWC,EAAAA,EAAAA,GAAY,CAAC,EAAG,CACzBC,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAWC,OAClEP,GAGP,C,0BCRMQ,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,8BAAuE,IAEnEC,GAAoBD,EAAAA,EAAAA,OAAK,kBAC7B,6BAEC,IAEGE,GAAcF,EAAAA,EAAAA,OAAK,kBACvB,qDAEC,IAGGG,GAAiBH,EAAAA,EAAAA,OAAK,kBAC1B,8DAEC,IAGGI,GAAiBJ,EAAAA,EAAAA,OAAK,kBACxB,qDAEK,IAWIK,EAAS,WAAH,OACjBC,IAAAA,cAACC,EAAAA,SAAQ,CACPC,SACEF,IAAAA,cAACG,EAAAA,SAAQ,KACPH,IAAAA,cAACI,EAAAA,QAAO,QAIZJ,IAAAA,cAACK,EAAAA,OAAY,KACTL,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,OAAOC,QAASR,IAAAA,cAACP,EAAQ,QACrCO,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,iBAAiBC,QAASR,IAAAA,cAACL,EAAiB,QACxDK,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,2BAA2BC,QAASR,IAAAA,cAACJ,EAAW,QAC5DI,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,kCAAkCC,QAASR,IAAAA,cAACH,EAAc,QACtEG,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,oBAAoBC,QAASR,IAAAA,cAACF,EAAc,QAExDE,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,IAAIC,QAASR,IAAAA,cAACP,EAAQ,SAE7B,E,iCC7Bb,QAlBY,WACR,IAAOgB,GAAuBC,EAAAA,EAAAA,KAAvBD,oBASP,OAPAE,EAAAA,EAAAA,YAAU,YACWvB,EAAAA,EAAAA,KACRwB,SAAS,CAAEC,cAAeC,EAAAA,KAEnCL,EAAoB,cACxB,GAAG,IAGCT,IAAAA,cAACe,EAAAA,SAAQ,KACLf,IAAAA,cAACgB,EAAAA,GAAmB,MACpBhB,IAAAA,cAACD,EAAM,MAGnB,E,SCPA,QAZiB,WAAH,OACVC,IAAAA,cAACiB,EAAAA,GAAQ,CACLC,MAAOrC,EAAIsC,WAAC,GAADC,EAAAA,EAAAA,GAEgD,KACzDC,YAEFrB,IAAAA,cAACsB,EAAG,MAEG,ECXf,IAAMC,EAAYC,SAASC,eAAe,SAC7BC,EAAAA,EAAAA,GAAWH,GAEnBI,OAAO3B,IAAAA,cAAC4B,EAAQ,OACrBL,EAAUM,aAAa,kBAAkB,E,qBCNrCC,EAAI,EAAQ,OAEdC,EAAQ,EAAaD,EAAEJ,WACDI,EAAEE,W","sources":["webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./node_modules/react-dom/client.js"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nexport let registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Routes as RouterRoutes} from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n  )\n);\nconst AuthFactors = lazy(() => \n  import(\n    /* webpackChunkName: \"Authentication-Factors\"*/ './Routes/Authentication-Policy/Authentication-Factors'\n  )\n);\n\nconst IdpIntegration = lazy(() =>\n  import(\n     /* webpackChunkName: \"Identity-Provider-Integration\"*/ './Routes/Authentication-Policy/Identity-Provider-Integration'\n  )\n)\n\nconst UserManagement = lazy(() =>\n    import(\n        /* webpackChunkName: \"User-Management\"*/ './Routes/Authentication-Policy/User-Management'\n        )\n)\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <RouterRoutes>\n        <Route path=\"oops\" element={<OopsPage/>} />\n        <Route path=\"no-permissions\" element={<NoPermissionsPage/>} />\n        <Route path=\"authentication-factors/*\" element={<AuthFactors/>} />\n        <Route path=\"identity-provider-integration/*\" element={<IdpIntegration/>}/>\n        <Route path=\"user-management/*\" element={<UserManagement/>}/>\n      {/* Finally, catch all unmatched routes */}\n        <Route path=\"*\" element={<OopsPage/>} />\n    </RouterRoutes>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n    const {updateDocumentTitle} = useChrome();\n\n    useEffect(() => {\n        const registry = getRegistry();\n        registry.register({ notifications: notificationsReducer });\n\n        updateDocumentTitle(\"IAM Console\");\n    }, []);\n\n    return (\n        <Fragment>\n            <NotificationsPortal />\n            <Routes />\n        </Fragment>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n    <Provider\n        store={init(\n            // eslint-disable-next-line no-undef\n            ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n        ).getStore()}\n    >\n        <App />\n\n    </Provider>\n);\n\nexport default AppEntry;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport AppEntry from './AppEntry';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(<AppEntry />);\ncontainer.setAttribute('data-ouia-safe', true)\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["init","_len","arguments","length","middleware","Array","_key","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","concat","OopsPage","lazy","NoPermissionsPage","AuthFactors","IdpIntegration","UserManagement","Routes","React","Suspense","fallback","Bullseye","Spinner","RouterRoutes","Route","path","element","updateDocumentTitle","useChrome","useEffect","register","notifications","notificationsReducer","Fragment","NotificationsPortal","Provider","store","apply","_toConsumableArray","getStore","App","container","document","getElementById","createRoot","render","AppEntry","setAttribute","m","exports","hydrateRoot"],"sourceRoot":""}