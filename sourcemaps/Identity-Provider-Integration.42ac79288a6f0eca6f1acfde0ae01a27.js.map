{"version":3,"file":"js/Identity-Provider-Integration.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/DisabledPage/disabled-page.js","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/idp-response-types.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/validation-context.tsx","webpack:///./src/Apps/IdpSelfService/FirstStep/customer-information.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/oidc-configuration.tsx","webpack:///./src/Apps/IdpSelfService/SecondStep/saml-configuration.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-from-url.tsx","webpack:///./src/Utils/message-formatter-utils.ts","webpack:///./src/Apps/IdpSelfService/Constants/flow-step.ts","webpack:///./src/Apps/IdpSelfService/Constants/saml-metadata-constants.ts","webpack:///./src/Apps/IdpSelfService/CommonInterfaces/idp-request-types.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-messages.ts","webpack:///./src/Components/FileUpload/SamlMetadataFile/saml-metadata-file.tsx","webpack:///./src/Utils/xml-utils.ts","webpack:///./src/Apps/IdpSelfService/Constants/saml-helper-text-messages.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-from-file.tsx","webpack:///./src/Apps/IdpSelfService/ThirdStep/import-saml-manual.tsx","webpack:///./src/Apps/IdpSelfService/FinalStep/urls-for-user.tsx","webpack:///./src/Components/AuditInfo/formatters/simple-text.ts","webpack:///./src/Components/AuditInfo/audit-info.tsx","webpack:///./src/Components/AuditInfo/formatters/audit-date.ts","webpack:///./src/Apps/IdpSelfService/Configured/configured-oidc-idp.tsx","webpack:///./src/Apps/IdpSelfService/ApiClient/idp-controller.ts","webpack:///./src/Apps/IdpSelfService/IdpTesting/idp-testing-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/disable-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/delete-idp-modal.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-saml-idp.tsx","webpack:///./src/Apps/IdpSelfService/Configured/configured-idp.tsx","webpack:///./src/Apps/IdpSelfService/IdpNotSetup/idp-not-setup.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/generic-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/submit-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/finalize-footer.tsx","webpack:///./src/Apps/IdpSelfService/IdpFlowTemplate/flow-template.tsx","webpack:///./src/Components/NonAdminUser/non-admin-idp.tsx","webpack:///./src/Routes/AuthenticationPolicy/identity-provider-integration.tsx","webpack:///./src/Utils/general-utils.ts"],"sourcesContent":["import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","export interface IdpResponseData {\n    idpAlias: string;\n    displayName: string;\n    enabled: string;\n    providerId: string;\n    createdDate: string;\n    lastUpdatedDate: string;\n    lastUpdatedBy: string;\n    error?: string;\n}\n\nexport const IdpResponseDataInitialState =\n    {idpAlias: '', displayName: '', enabled: '', providerId: '', createdDate: '', lastUpdatedDate: '', lastUpdatedBy: '' }\n\nexport interface SamlResponseData extends IdpResponseData {\n    identityProviderEntityId: string;\n    authenticationRequestsUrl: string;\n    x509Certificate: string;\n    serviceProviderEntityId: string;\n}\n\nexport interface OidcResponseData extends IdpResponseData {\n    clientId: string;\n    clientSecret: string;\n    authorizationUrl: string;\n    tokenUrl: string;\n    userInfoUrl: string;\n    issuerUrl: string;\n    jwksUrl: string;\n}\n","import React, {createContext, useContext} from 'react';\nimport {InputValidation} from \"../CommonInterfaces/input-validation\";\n\nexport interface ValidationContextType {\n    validations: InputValidation,\n    setValidations: React.Dispatch<React.SetStateAction<any>>\n}\n\nexport const ValidationContext = createContext<ValidationContextType>({\n    validations: {\n        CUSTOMER_INFORMATION: {},\n        OIDC_CONFIG: {},\n        SAML_CONFIG: {},\n        IMPORT_FROM_FILE: {},\n        IMPORT_FROM_URL: {},\n        IMPORT_SAML_FROM_FILE: {},\n        IMPORT_SAML_FROM_URL: {},\n        IMPORT_SAML_MANUALLY: {}\n    },\n    // eslint-disable-next-line no-empty-function\n    setValidations: () => {}\n});\n\nexport const useValidationContext = () => {\n    const context = useContext(ValidationContext);\n    if (!context) {\n        throw new Error('Validation context not found');\n    }\n    return context;\n}\n\nexport default ValidationContext;\n","// step one of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport React, {useEffect} from 'react';\nimport {\n    Text,\n    Radio,\n    Title,\n    Form,\n    FormGroup, Tooltip\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\n/**\n * handle input selection needs to update information being used to govern the application flow as well as the final api update object\n * (if needed this method could be shared between components and moved to general-utils.ts)\n */\n// eslint-disable-next-line max-params\nexport const handleInputSelection = (value: any, rootUserChoices: any, updateStatus: Function) => {\n    if (!rootUserChoices) { rootUserChoices = {}; }\n\n    if (!rootUserChoices.selections) { rootUserChoices.selections = {}; }\n\n    //  update the main data storage object with the new value\n    rootUserChoices.selections[value.target.name] = value.target.value;\n\n    if (rootUserChoices.selections.protocol) { updateStatus(rootUserChoices.selections.protocol); }\n};\n\nconst CustomerInformation = ({rootUserChoices, updateStatus} : Props) => {\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.CUSTOMER_INFORMATION =\n                {\n                    'protocol': {\n                        inputType: 'RADIO',\n                        variant: 'default',\n                        message: ''\n                    }\n                };\n        setValidations(updated);\n    }, []);\n\n    const handleChange = (value: any) => {\n        handleInputSelection(value, rootUserChoices, updateStatus);\n    };\n\n\n    // pull from props.inputTrigger to handle change values\n    return <Form>\n                <Title headingLevel=\"h2\">Customer Information</Title>\n                <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">All fields are required</Text>\n\n                {/* TODO had to remove validated prop. PF5 suggests moving that logic to the text input's helperText, FormHelperText, or HelperTextItem */}\n\n                <FormGroup\n                    onChange={(value) => { handleChange(value) } }\n                    role=\"radiogroup\"\n                    fieldId=\"authType\"\n                    label=\"Choose identity provider protocol\"\n                    id=\"protocol\"\n                >\n                    <Tooltip content=\"This feature is not yet available\" position=\"left-start\">\n                        <Radio isDisabled={true} name=\"protocol\" id=\"oidc-protocol\" label=\"OpenID Connect\" value=\"OIDC_CONFIG\"/>\n                    </Tooltip>\n                    <Radio name=\"protocol\" id=\"saml-protocol\" label=\"SAML 2.0\" value=\"SAML_CONFIG\"/>\n                </FormGroup>\n            </Form>\n}\n\nCustomerInformation.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default CustomerInformation;\n","// step two, choice 1 of the flow https://miro.com/app/board/uXjVO_x__QE=/\nimport React, {useEffect, useState} from 'react';\nimport {\n    TextInput,\n    Radio,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport {setStateValue} from '../../../Utils/general-utils';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {\n    useValidationContext\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\n\ninterface Props{\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst OidcConfiguration = ({ rootUserChoices, updateStatus}: Props) => {\n    const [selections, setSelections] = useState<Object>();\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the applicaton flow as well as the final api update object\n     */\n    const handleSelection = (value: any) => {\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) {\n            updateStatus(rootUserChoices.selections.inputMethod);\n        }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') {\n            return value;\n        }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.OIDC_CONFIG =\n            {\n                'clientId': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'The Red Hat client identifier registered within the customer identity provider. Your identity provider generates this client ID when a Red Hat client is added'\n                },\n                'clientSecret': {\n                    inputType: 'GENERAL',\n                    variant: 'default',\n                    message: 'Enter the client secret associated with your client identifier  by your identity provider'\n                },\n                'inputMethod': {\n                    inputType: 'RADIO',\n                    variant: 'default',\n                    message: ''\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    // @ts-ignore\n    return <Form>\n                <FormGroup\n                    label=\"Client ID/SP Entity ID\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientId\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientId\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={ parseVariantValue(validations.OIDC_CONFIG?.clientId?.variant) }>\n                            { validations.OIDC_CONFIG?.clientId?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Client Secret\"\n                    onChange={(value) => { handleSelection(value) }}>\n                    <TextInput\n                        onChange={(_event, value) => setStateValue(value, \"clientSecret\", selections, setSelections)}\n                        type=\"text\"\n                        id=\"clientSecret\"\n                    />\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.clientSecret?.variant)}>\n                            { validations.OIDC_CONFIG?.clientSecret?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external IdP metadata from a config file or download it from a url\">\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from URL\" value=\"IMPORT_FROM_URL\"/>\n                    <Radio name=\"inputChoice\" id=\"inputMethod\" label=\"Import from file\" value=\"IMPORT_FROM_FILE\"/>\n                    <HelperText>\n                        <HelperTextItem variant={parseVariantValue(validations.OIDC_CONFIG?.inputMethod?.variant)}>\n                            { validations.OIDC_CONFIG?.inputMethod?.message }\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n}\n\nOidcConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object\n}\n\nexport default OidcConfiguration;\n","// step two, choice 2 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Radio,\n    Form,\n    FormGroup, Title\n} from '@patternfly/react-core';\n\nimport React, {useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props{\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst SamlConfiguration = ({rootUserChoices, updateStatus}: Props) => {\n\n    const handleSelection = (value: any) => {\n\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.name] = value.target.value;\n\n        if (rootUserChoices.selections.inputMethod) { updateStatus(rootUserChoices.selections.inputMethod); }\n    }\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.SAML_CONFIG =\n            {\n            'inputMethod': {\n                inputType: 'RADIO',\n                variant: 'default',\n                message: ''\n            }\n        };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n                <Title headingLevel=\"h2\">SAML IdP configuration selection</Title>\n                <FormGroup\n                    onChange={(value) => { handleSelection(value) }}\n                    label=\"Load external identity provider metadata\">\n                    <Radio name=\"inputMethod\" id=\"inportFromFile\" label=\"Import SAML from file\" value=\"IMPORT_SAML_FROM_FILE\"/>\n                    <Radio name=\"inputMethod\" id=\"inportManually\" label=\"Import SAML manually\" value=\"IMPORT_SAML_MANUALLY\"/>\n                </FormGroup>\n            </Form>\n}\n\nSamlConfiguration.propTypes = {\n    resetNextClicked: PropTypes.func,\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default SamlConfiguration;\n","// step three, choice 3 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    FileUpload,\n    Form,\n    FormGroup,\n    Title,\n    Text,\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport xml2js from 'xml2js';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\ninterface Props {\n    updateStatus: Function;\n    rootUserChoices: UserChoices;\n}\n\nconst ImportFromFile = ({updateStatus, rootUserChoices}: Props) => {\n    const [fileData, setFileData] = useState(\"\");\n\n    const { validations, setValidations } = useValidationContext();\n\n\n    const handleFileData = (_event: any, data:string) => {\n        setFileData(data);\n        xml2js.parseString(data, (err, result) => {\n            if (err) {\n                console.error(err);\n            }\n            else if (result) {\n                updateStatus(\"FINAL_STEP\");\n                rootUserChoices.selections.configFileData = result;\n\n                /*\n                 * may need to submit a query at this point to the api to validate that the file chosen is good to go\n                 * alternatively a validation step could be added locally to check for the existence of required fields\n                 */\n                const update = {...validations};\n                update.IMPORT_FROM_URL = { };\n                setValidations(update);\n            }\n        })\n    }\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Import from file</Title>\n            <FormGroup label=\"File upload\" isRequired >\n                <FileUpload\n                    value={fileData.toString()}\n                    id=\"text-file-with-edits-allowed\"\n                    type=\"text\"\n                    onDataChange={handleFileData}\n                    browseButtonText=\"Upload\"\n                />\n            </FormGroup>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">An XML formatted file detailing the configuration of your IdP, minimally including the OpenID Connect Identity provider discovery URL</Text>\n        </Form>\n    )\n}\n\nImportFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    rootValidation: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportFromFile;\n","// step three, choice 4 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    Title,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\nimport React, {useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\n\ninterface Props{\n    rootUserChoices: React.MutableRefObject<UserChoices>;\n}\n\nconst ImportFromUrl = ({rootUserChoices}: Props) => {\n\n    const [validations, setValidations] = useState({\n        'importURL': {\n            inputType: 'DOMAIN',\n            status: 'default',\n            message: ''\n        },\n    });\n\n    /**\n     * handle selection needs to update information being used to govern\n     * the application flow as well as the final api update object\n     */\n    const handleSelection = (value: React.FormEvent<HTMLInputElement>) => {\n\n        //  update the main data storage object with the new value\n        rootUserChoices.current.selections[value.currentTarget.id] = value.currentTarget.value;\n    }\n\n    return <Form>\n                <Title headingLevel=\"h2\">Import from URL</Title>\n                <FormGroup\n                    label=\"URL\">\n                    < TextInput\n                        type=\"text\"\n                        id=\"importURL\"\n                        onChange={(value) => { handleSelection(value) }}\n                    />\n                    <HelperText>\n                        <HelperTextItem>\n                            import metadata from a remote identity provider discovery descriptor\n                        </HelperTextItem>\n                    </HelperText>\n                </FormGroup>\n            </Form>\n\n}\n\nImportFromUrl.propTypes = {\n    rootUserChoices: PropTypes.object,\n}\n\nexport default ImportFromUrl;\n","/**\n * Formats a string message by replacing placeholders with provided arguments.\n * Currently, it supports both {n} style placeholders and %s for strings and %d for numbers.\n *\n * @param message - string message template containing placeholders.\n * @param args - any umber of string or number arguments to replace placeholders.\n * @returns formatted message.\n */\nexport function formatMessage(message: string, ...args: (string | number)[]): string {\n    if (!message) {\n        return '';\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    let formattedMessage = message.replace(/%s|%d/g, (match) => {\n        const arg = args.shift();\n        return String(arg);\n    });\n\n    // eslint-disable-next-line require-unicode-regexp\n    formattedMessage = formattedMessage.replace(/{(?:\\d+)}/g, (match, index) => {\n        const arg = args[parseInt(index, 10)];\n        // eslint-disable-next-line no-undefined\n        return arg !== undefined ? String(arg) : match;\n    });\n\n    return formattedMessage;\n}\n","export class FlowStep {\n\n    public static readonly OIDC_CONFIG = 'OIDC_CONFIG';\n\n    public static readonly SAML_CONFIG = 'SAML_CONFIG';\n\n    public static readonly IMPORT_FROM_FILE = 'IMPORT_FROM_FILE';\n\n    public static readonly IMPORT_FROM_URL = 'IMPORT_FROM_URL';\n\n    public static readonly IMPORT_SAML_FROM_FILE = 'IMPORT_SAML_FROM_FILE';\n\n    public static readonly IMPORT_SAML_FROM_URL = 'IMPORT_SAML_FROM_URL';\n\n    public static readonly IMPORT_SAML_MANUALLY = 'IMPORT_SAML_MANUALLY';\n\n    public static readonly FINAL_STEP = 'FINAL_STEP';\n\n    public static readonly CUSTOMER_INFORMATION = 'CUSTOMER_INFORMATION';\n\n}\n","/*\n * SAML 2.0 specs\n * https://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd\n * https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf\n */\n\nexport class SamlMetadataConstants {\n\n    /*\n     * @_ is a fast-xml-parser prefix convention to differentiate between XML attributes and element content.\n     * The @ symbol signifies that it's an attribute, and the _ is added to the prefix to ensure clarity.\n     */\n\n    public static readonly IDENTITY_PROVIDER_ENTITY_ID = '@_entityID';\n\n    public static readonly BINDING = '@_Binding';\n\n    public static readonly LOCATION = '@_Location';\n\n    public static readonly KEY_INFO = 'KeyInfo';\n\n    public static readonly X509_DATA = 'X509Data';\n\n    public static readonly X509_CERTIFICATE = 'X509Certificate';\n\n    public static readonly DS_KEY_INFO = 'ds:KeyInfo';\n\n    public static readonly DS_X509_DATA = 'ds:X509Data';\n\n    public static readonly DS_X509_CERTIFICATE = 'ds:X509Certificate';\n\n    public static readonly HTTP_POST_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST';\n\n    public static readonly HTTP_REDIRECT_BINDING = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect';\n}\n","export interface IdpRequestData {\n    displayName: string;\n    providerId: string;\n}\n\nexport const IDENTITY_PROVIDER_ENTITY_ID = \"identityProviderEntityId\";\nexport const AUTH_REQUEST_URL = \"authenticationRequestsUrl\";\nexport const X509_CERTIFICATE = \"x509Certificate\";\nexport const SERVICE_PROVIDER_ISSUER = \"serviceProviderIssuer\";\n\nexport interface SamlRequestData extends IdpRequestData {\n    identityProviderEntityId: string;\n    authenticationRequestsUrl: string;\n    x509Certificate: string;\n    serviceProviderEntityId: string;\n}\n","export class SamlMetadataMessages {\n\n    public static readonly INVALID_OR_MISSING_DATA = 'Invalid or missing data';\n\n    public static readonly INVALID_OR_MISSING_IDPENTITYID = \"Invalid or missing IdP Entity ID\"\n\n    public static readonly INVALID_OR_MISSING_AUTH_REQUEST_URL = \"Invalid or missing Authentication Request URL\"\n\n    public static readonly INVALID_OR_MISSING_CERTIFICATE = \"Invalid or missing X509 Certificate\"\n\n    public static readonly CERTIFICATE_EXPIRED = \"Certificate is expired\"\n\n    public static readonly SUCCESS_MSG = 'loaded successfully';\n\n    public static readonly FILE_SUCCESSFULLY_LOADED = '%s ' + SamlMetadataMessages.SUCCESS_MSG + ' (size: %dK)';\n\n    public static readonly FILE_PARSING_ERROR = 'Error parsing XML: %s';\n\n    public static readonly INVALID_FILE_TYPE = 'Invalid file type. Only XML files are allowed.';\n\n    public static readonly MALICIOUS_FILE_DETECTED = 'Error: Invalid XML document.';\n\n    public static readonly FILE_READ_ERROR = 'Error reading file';\n\n    public static readonly SAML_XML_REQUIREMENTS = 'Upload an XML file with your IdP configuration. Max file size allowed is %d K';\n\n    public static readonly FILE_TOO_LARGE = \"Must be an XML file no larger than %d KB\";\n\n}\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport {\n    DropEvent,\n    ExpandableSection,\n    FileUpload,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem\n} from '@patternfly/react-core';\n\nimport _ from 'lodash';\nimport './saml-metadata-file.scss'\nimport PropTypes from \"prop-types\";\nimport {XMLParser} from 'fast-xml-parser';\nimport forge from 'node-forge';\n\nimport {formatMessage} from \"../../../Utils/message-formatter-utils\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport {SamlMetadataConstants} from \"../../../Apps/IdpSelfService/Constants/saml-metadata-constants\";\nimport {SamlMetadataSchemaAttributes} from \"../../../Apps/IdpSelfService/CommonInterfaces/saml-metadata-file\";\nimport {UserChoices} from \"../../../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID,\n    X509_CERTIFICATE\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {containsPotentialThreats} from \"../../../Utils/xml-utils\";\nimport {SamlMetadataMessages} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-messages\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    maxKBSize: number;\n    updateStatus: Function;\n}\n\nexport const SamlMetadataFile: React.FunctionComponent<Props> = forwardRef(({ rootUserChoices, maxKBSize, updateStatus}: Props, ref) => {\n    const allowedFileTypes = ['text/xml'];\n\n    const [file, setFile] = useState<File | null>(null);\n    const [value, setValue] = useState('');\n    const [filename, setFilename] = useState('');\n\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n    const [isFileSizeRejected, setIsFileSizeRejected] = useState(false);\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isSafe, setIsSafe] = useState(false);\n\n    /*\n     * Add the following code to the import-saml-from-file.tsx (or the parent component)\n     * if you need to do extra handling of the file object or any attribute used in this component:\n     *const samlMetadataFileRef = useRef<any>(null);\n     *if (samlMetadataFileRef.current) {\n     *  const file = samlMetadataFileRef.current.getFile();\n     *}\n     */\n    useImperativeHandle(ref, () => ({\n        getFile: () => file\n    }));\n\n    function clear() {\n        setFile(null);\n        setValue('');\n        setFilename('');\n        setSuccessMessage('');\n        setErrorMessage('');\n        setIsFileSizeRejected(false);\n    }\n\n    // eslint-disable-next-line no-shadow\n    const onToggle = (_event: React.MouseEvent, isExpanded: boolean) => {\n        setIsExpanded(isExpanded);\n    };\n\n    function isValid(idpEntityID: string | null, location: string | null, certificates: Set<string>) {\n\n        if (!_.isString(idpEntityID) || idpEntityID.length === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_IDPENTITYID;\n        }\n        else if (!_.isString(location) || location.length === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_AUTH_REQUEST_URL;\n        }\n        else if (certificates.size === 0) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_CERTIFICATE;\n        }\n\n        // check cert expiration\n        try {\n            const now = new Date();\n            // check only the first cert in the chain\n            const certWithHeaders = `-----BEGIN CERTIFICATE-----\\n${certificates.values().next().value.match(/.{1,64}/gu)?.join('\\n')}\\n-----END CERTIFICATE-----`\n            const cert = forge.pki.certificateFromPem(certWithHeaders);\n\n            if (now < cert.validity.notBefore || now > cert.validity.notAfter) {\n                return SamlMetadataMessages.CERTIFICATE_EXPIRED;\n            }\n        } catch (e) {\n            return SamlMetadataMessages.INVALID_OR_MISSING_CERTIFICATE;\n        }\n\n        return SamlMetadataMessages.SUCCESS_MSG;\n    }\n\n    /**\n     * XMLParser docs:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/tree/master/docs/v5\n     * Config options:\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md\n     * https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v5/3.Options.md\n     */\n    // eslint-disable-next-line no-shadow\n    function parse(xml: string, file: File) {\n\n        function extractIdpEntityID(parsedXml: SamlMetadataSchemaAttributes) {\n            const entityDescriptor = parsedXml.EntityDescriptor || parsedXml['md:EntityDescriptor'];\n\n            if (entityDescriptor?.[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID]) {\n                return entityDescriptor[SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID];\n            }\n            return null;\n        }\n\n        function extractLocation(services: any) {\n            if (services || Array.isArray(services)) {\n                const httpPostService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_POST_BINDING);\n                const httpRedirectService = services.find((service: any) => service[SamlMetadataConstants.BINDING] === SamlMetadataConstants.HTTP_REDIRECT_BINDING);\n\n                // see: org.keycloak.broker.saml.SAMLIdentityProviderFactory#parseConfig\n                if (httpPostService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpPostService[SamlMetadataConstants.LOCATION];\n                } else if (httpRedirectService?.[SamlMetadataConstants.LOCATION]) {\n                    return httpRedirectService[SamlMetadataConstants.LOCATION];\n                }\n            }\n            return null;\n        }\n\n        function extractX509Certificate(keyDescriptors: any) {\n            const certificates: Set<string> = new Set<string>();\n            if (keyDescriptors) {\n                // ensure we handle both single and multiple KeyDescriptor entries\n                for (const keyDescriptor of Array.isArray(keyDescriptors) ? keyDescriptors : [keyDescriptors]) {\n                    const x509Data = keyDescriptor?.[SamlMetadataConstants.KEY_INFO]?.[SamlMetadataConstants.X509_DATA];\n                    const dsX509Data = keyDescriptor?.[SamlMetadataConstants.DS_KEY_INFO]?.[SamlMetadataConstants.DS_X509_DATA];\n\n                    let certificatesArray = []\n\n                    // we need to handle both single and multiple <X509Certificate> entries\n                    if (x509Data) {\n                        certificatesArray = Array.isArray(x509Data?.[SamlMetadataConstants.X509_CERTIFICATE])\n                            ? x509Data[SamlMetadataConstants.X509_CERTIFICATE]\n                            : [x509Data?.[SamlMetadataConstants.X509_CERTIFICATE]];\n                    } else if (dsX509Data) {\n                        // maybe the metadata file uses <ds:XXX> as a prefix, so let's try handling w/ DS entries instead\n                        certificatesArray = Array.isArray(dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE])\n                            ? dsX509Data[SamlMetadataConstants.DS_X509_CERTIFICATE]\n                            : [dsX509Data?.[SamlMetadataConstants.DS_X509_CERTIFICATE]];\n                    }\n\n                    // add the certificates found (ignores null/undefined entries)\n                    for (const certificate of certificatesArray) {\n                        if (certificate) {\n                            certificates.add(certificate);\n                        }\n                    }\n                }\n            }\n            return certificates;\n        }\n\n        try {\n            const parser = new XMLParser({\n                // ensure that attributes like SamlMetadataConstants.IDENTITY_PROVIDER_ENTITY_ID are captured and not ignored\n                ignoreAttributes: false,\n                // allows the parser to handle boolean attributes in the XML\n                allowBooleanAttributes: true,\n                attributeNamePrefix: '@_',\n                parseAttributeValue: true,\n                // ignores processing instructions <? .. ?> in the XML file as they are irrelevant.\n                ignorePiTags: true\n            });\n\n            const parsedXml: SamlMetadataSchemaAttributes = parser.parse(xml);\n            const keyDescriptors =\n                parsedXml?.EntityDescriptor?.IDPSSODescriptor?.KeyDescriptor ||\n                parsedXml['md:EntityDescriptor']?.['md:IDPSSODescriptor']?.['md:KeyDescriptor'] ||\n                [];\n            const services =\n                parsedXml.EntityDescriptor?.IDPSSODescriptor?.SingleSignOnService ||\n                parsedXml['md:EntityDescriptor']?.['md:IDPSSODescriptor']?.['md:SingleSignOnService'] ||\n                null;\n\n            const idpEntityID = extractIdpEntityID(parsedXml);\n            const location = extractLocation(services);\n            const certificates: Set<string> = extractX509Certificate(keyDescriptors);\n\n            const validationMessaging = isValid(idpEntityID, location, certificates);\n            if (!(validationMessaging === SamlMetadataMessages.SUCCESS_MSG)) {\n                throw new Error(validationMessaging);\n            }\n\n            //  update the main data storage object with the parsed values\n            rootUserChoices.selections[IDENTITY_PROVIDER_ENTITY_ID] = idpEntityID as string;\n            rootUserChoices.selections[AUTH_REQUEST_URL] = location as string;\n\n            const cert = Array.from(certificates).join(',');\n            rootUserChoices.selections[X509_CERTIFICATE] = cert;\n\n            /*\n             * TODO this is bad. Make better. Esseintially we are forcing the root user choices to have something present.\n             * this prevents the validator from failing and allows the interface to move forward when a file is uploaded\n             */\n            rootUserChoices.selections.xmlFileWithRestrictions = \"selected\";\n\n            updateStatus(FlowStep.FINAL_STEP);\n\n            setIsFileSizeRejected(false);\n            setFile(file);\n            setErrorMessage(null);\n            setSuccessMessage(formatMessage(SamlMetadataMessages.FILE_SUCCESSFULLY_LOADED, file.name, (file.size / 1024).toFixed(2)));\n            setIsSafe(true);\n        } catch (parseError) {\n            setIsSafe(false);\n            setErrorMessage(formatMessage(SamlMetadataMessages.FILE_PARSING_ERROR, (parseError as Error).message));\n        }\n    }\n\n    // eslint-disable-next-line no-shadow\n    function isFileSizeInvalid(file: File) {\n        if (!allowedFileTypes.includes(file.type)) {\n            setErrorMessage(SamlMetadataMessages.INVALID_FILE_TYPE);\n            setSuccessMessage(null);\n            return true;\n        }\n        if (file.size > (maxKBSize * 1024)) {\n            setIsFileSizeRejected(true);\n            return true;\n        }\n        return false;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const handleFileInputChange = (_: any, file: File) => {\n        clear();\n        setFilename(file.name);\n\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                setIsSafe(false);\n                setErrorMessage(SamlMetadataMessages.FILE_READ_ERROR);\n            }\n\n            reader.onload = (event: ProgressEvent<FileReader>) => {\n                const xmlString = event.target?.result as string;\n                if (containsPotentialThreats(xmlString)) {\n                    setIsSafe(false);\n                    setErrorMessage(SamlMetadataMessages.MALICIOUS_FILE_DETECTED);\n                } else if (!isFileSizeInvalid(file)) {\n                    parse(xmlString, file);\n                }\n            };\n\n            reader.readAsText(file);\n        }\n    };\n\n    // eslint-disable-next-line no-shadow\n    const handleDataChange = (_event: DropEvent, value: string) => {\n        setValue(value);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleClear = (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        clear();\n        setIsExpanded(false);\n    };\n\n    const handleFileRejected = () => {\n        setIsFileSizeRejected(true);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadStarted = (_event: DropEvent, _fileHandle: File) => {\n        setErrorMessage('');\n        setSuccessMessage('');\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const handleFileReadFinished = (_event: DropEvent, _fileHandle: File) => {\n        setIsExpanded(true);\n    };\n\n    return (\n        <FormGroup fieldId=\"xml-file-with-restrictions\">\n            <FileUpload\n                id=\"xml-file-with-restrictions\"\n                type=\"text\"\n                value={value}\n                filename={filename}\n                filenamePlaceholder=\"Drag and drop the SAML metadata file or upload one\"\n                onFileInputChange={handleFileInputChange}\n                onDataChange={handleDataChange}\n                onReadStarted={handleFileReadStarted}\n                onReadFinished={handleFileReadFinished}\n                onClearClick={handleClear}\n                dropzoneProps={{\n                    accept: {'text/xml': ['.xml']},\n                    maxSize: (maxKBSize * 1024),\n                    onDropRejected: handleFileRejected\n                }}\n                validated={isFileSizeRejected ? 'error' : 'default'}\n                browseButtonText=\"Upload\"\n                // this will hide the core component code preview block (which doesn't support syntax highlighting)\n                hideDefaultPreview/>\n            <FormHelperText>\n                <HelperText>\n                    <HelperTextItem variant={isFileSizeRejected ? 'error' : 'default'}>\n                        {isFileSizeRejected ? formatMessage(SamlMetadataMessages.FILE_TOO_LARGE, maxKBSize) : formatMessage(SamlMetadataMessages.SAML_XML_REQUIREMENTS, maxKBSize)}\n                    </HelperTextItem>\n                    {(successMessage || errorMessage) && (\n                        <HelperTextItem variant={errorMessage ? 'error' : 'success'}>\n                            {errorMessage ?? successMessage}\n                        </HelperTextItem>\n                    )}\n                </HelperText>\n            </FormHelperText>\n            <div className=\"xml-highlighter\">\n                {isSafe && value && (\n                    <ExpandableSection toggleText={isExpanded ? 'Show less' : 'Show more'} onToggle={onToggle} isExpanded={isExpanded}>\n                        <div className=\"highlighter-panel\">\n                            {value}\n                        </div>\n                    </ExpandableSection>\n                )}\n            </div>\n        </FormGroup>\n    );\n});\n\nSamlMetadataFile.displayName = \"SamlMetadataFile\";\n\nSamlMetadataFile.propTypes = {\n    maxKBSize: PropTypes.number.isRequired\n}\n\nexport default SamlMetadataFile;\n","/**\n * check for potentially dangerous XML elements:\n * - XXE (XML External Entity)\n * - XML Bomb (Billion Laughs Attack)\n * - Recursive Entity defs\n */\nexport function containsPotentialThreats(xmlString: string) {\n    return xmlString.includes('<!DOCTYPE') ||\n        xmlString.includes('<!ENTITY') ||\n        xmlString.includes('SYSTEM') ||\n        ((xmlString.match(/<!ENTITY/gu) || []).length > 5) ||\n        (xmlString.includes('&') && !(/&[a-zA-Z0-9]+;/u).test(xmlString));\n}\n","export class SamlHelperTextMessages {\n\n    public static readonly NO_SPECIAL_CHARS = 'This field is expected to consist only of alphanumeric characters. Spaces, dashes, and special characters will not be accepted.';\n\n    public static readonly ENTITY_ID = 'The Entity ID attribute is in your SAML metadata configuration';\n\n    public static readonly IDENTITY_PROVIDER_ENTITY_ID = 'The Entity ID used to validate the issuer for received SAML assertions.';\n\n    public static readonly SERVICE_PROVIDER_ISSUER = 'The issuer that will be used to uniquely identify the SAML Service Provider. This might also be referred to as a \"client\" or a \"Service Provider Entity ID\".';\n\n    public static readonly AUTHENTICATION_REQUEST_URL = 'The URL that receives SAML authentication requests; i.e. the URL of your internal log in page.';\n\n    public static readonly X509_CERTIFICATE = [\n        'A Base64 encoded certificate. This must not include the certificate preamble/ending: <code>(-----BEGIN/END CERTIFICATE-----).</code>',\n        'Multiple certificates may be included. Separate multiple certificates with a comma if you need to attach more than one.',\n        'An X.509 certificate must be provided, as it is essential for signing assertions from the Service Provider to secure SAML communication.'\n    ];\n\n}\n","// step three, choice 5 of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {\n    Button,\n    Form,\n    FormGroup, HelperText, HelperTextItem, Popover, TextInput, Title\n} from '@patternfly/react-core';\nimport React, {ReactElement, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {SamlMetadataFile} from \"../../../Components/FileUpload/SamlMetadataFile/saml-metadata-file\";\nimport {SERVICE_PROVIDER_ISSUER} from \"../CommonInterfaces/idp-request-types\";\nimport {FlowStep} from \"../Constants/flow-step\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/dynamic/icons/help-icon\";\nimport {SamlHelperTextMessages} from \"../../../Apps/IdpSelfService/Constants/saml-helper-text-messages\";\n\ninterface Props {\n    rootUserChoices: UserChoices;\n    updateStatus: Function;\n}\n\nconst ImportSamlFromFile = ({ rootUserChoices, updateStatus}: Props) => {\n    const [samlMetadataFile, setSamlMetadataFile] = useState<ReactElement>()\n    const { validations, setValidations } = useValidationContext();\n    useEffect(() => {\n        setSamlMetadataFile(<SamlMetadataFile rootUserChoices={rootUserChoices}\n                                              updateStatus={updateStatus}\n                                              maxKBSize={ 100 }></SamlMetadataFile>);\n\n        const updateValidations = {...validations}\n\n        updateValidations.IMPORT_SAML_FROM_FILE = {\n            \"serviceProviderIssuer\": {\n                inputType: 'ENTITYID',\n                variant: 'default',\n                message: SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER\n            },\n            'xmlFileWithRestrictions': {\n                inputType: 'GLOBAL',\n                variant: 'default',\n                message: ''\n            }\n        }\n\n        setValidations(updateValidations);\n    }, []);\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n    const handleSelection = (value: any) => {\n        rootUserChoices.selections[value.target.id] = value.target.value;\n        if (rootUserChoices.selections) { updateStatus(FlowStep.FINAL_STEP); }\n    }\n\n    return <Form>\n        <Title headingLevel=\"h2\">Import SAML from file</Title>\n        <FormGroup\n            label=\"Service provider issuer\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}\n            labelIcon={\n                <Popover\n                    triggerAction=\"hover\"\n                    bodyContent={\n                        <div>\n                            This field is expected to consist only of alphanumeric characters. Spaces, dashes, and special characters will not be accepted.\n                        </div>\n                    }>\n                    <Button\n                        variant=\"plain\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                        className={`customPopover ${styles.formGroupLabelHelp}`}>\n                        <HelpIcon />\n                    </Button>\n                </Popover>\n            }>\n            <TextInput\n                type=\"text\"\n                id={SERVICE_PROVIDER_ISSUER} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_FROM_FILE?.serviceProviderIssuer?.variant) }>\n                    { validations.IMPORT_SAML_FROM_FILE?.serviceProviderIssuer?.message || SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n        <FormGroup label=\"File upload\" isRequired>\n            {samlMetadataFile}\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_FROM_FILE?.xmlFileWithRestrictions?.variant) }>\n                    { validations.IMPORT_SAML_FROM_FILE?.xmlFileWithRestrictions?.message }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n    </Form>\n}\n\nImportSamlFromFile.propTypes = {\n    rootUserChoices: PropTypes.object,\n    updateStatus: PropTypes.func\n}\n\nexport default ImportSamlFromFile;\n","import React, {useEffect} from 'react';\nimport {\n    TextInput,\n    Form,\n    FormGroup,\n    HelperText,\n    HelperTextItem, TextArea, Title, Popover, Button\n} from '@patternfly/react-core';\nimport {UserChoices} from \"@apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport {AUTH_REQUEST_URL, IDENTITY_PROVIDER_ENTITY_ID, X509_CERTIFICATE, SERVICE_PROVIDER_ISSUER} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\nimport {useValidationContext} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/dynamic/icons/help-icon\";\nimport {SamlHelperTextMessages} from \"../../../Apps/IdpSelfService/Constants/saml-helper-text-messages\";\n\ninterface Props {\n    primeNextStep: Function;\n    rootUserChoices: UserChoices;\n}\nconst ImportSamlManual = ({primeNextStep, rootUserChoices}: Props) => {\n\n    /**\n     * updates the information being used to govern the application flow as well as the final api update object.\n     * @param value\n     */\n    const handleSelection = (value: any) => {\n        //  update the main data storage object with the new value\n        rootUserChoices.selections[value.target.id] = value.target.value;\n\n        if (rootUserChoices.selections) { primeNextStep(FlowStep.FINAL_STEP); }\n    }\n\n    const parseVariantValue = (value: string | undefined): (\"default\" | \"error\" | undefined) => {\n        if (value === 'default' || value === 'error') { return value; }\n        // eslint-disable-next-line\n        return undefined;\n    }\n\n\n    const { validations, setValidations } = useValidationContext();\n\n    useEffect(() => {\n        const updated = {...validations};\n        updated.IMPORT_SAML_MANUALLY =\n            {\n                'identityProviderEntityId': {\n                    inputType: 'ENTITYID',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.IDENTITY_PROVIDER_ENTITY_ID\n                },\n                'serviceProviderIssuer': {\n                    inputType: 'ENTITYID',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER\n                },\n                'authenticationRequestsUrl': {\n                    inputType: 'DOMAIN',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL\n                },\n                'x509Certificate': {\n                    inputType: 'x509',\n                    variant: 'default',\n                    message: SamlHelperTextMessages.X509_CERTIFICATE.join('@')\n                }\n            };\n        setValidations(updated);\n    }, []);\n\n    return <Form>\n        <Title headingLevel=\"h2\">Configure SAML manually</Title>\n        <FormGroup\n            label=\"Identity provider Entity ID\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextInput\n                type=\"text\"\n                id={IDENTITY_PROVIDER_ENTITY_ID} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.identityProviderEntityId?.message || SamlHelperTextMessages.IDENTITY_PROVIDER_ENTITY_ID }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"Authentication request url\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextInput\n                       type=\"text\"\n                       id={AUTH_REQUEST_URL} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.authenticationRequestsUrl?.message || SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"Service provider issuer\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}\n            labelIcon={\n                <Popover\n                    triggerAction=\"hover\"\n                    bodyContent={\n                        <div>{SamlHelperTextMessages.NO_SPECIAL_CHARS}</div>\n                    }>\n                    <Button\n                        variant=\"plain\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                        className={`customPopover ${styles.formGroupLabelHelp}`}>\n                        <HelpIcon />\n                    </Button>\n                </Popover>\n            }>\n            <TextInput\n                       type=\"text\"\n                       id={SERVICE_PROVIDER_ISSUER} />\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.serviceProviderIssuer?.variant) }>\n                    { validations.IMPORT_SAML_MANUALLY?.serviceProviderIssuer?.message || SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n        <FormGroup\n            label=\"x509 certificate\"\n            isRequired\n            onChange={(value) => { handleSelection(value) }}>\n            <TextArea resizeOrientation=\"vertical\"\n                      type=\"text\"\n                      id={X509_CERTIFICATE}/>\n            <HelperText>\n                <HelperTextItem variant={ parseVariantValue(validations.IMPORT_SAML_MANUALLY?.x509Certificate?.variant) }>\n                    {\n                        (() => {\n                            const message = validations.IMPORT_SAML_MANUALLY?.x509Certificate?.message?.trim();\n                            if (message) {\n                                // we need to treat the x509 message as an array because it has multiple messages\n                                return message.split('@')\n                                    .map((msg, index) => (\n                                        <p key={index} dangerouslySetInnerHTML={{__html: msg}}/>\n                                    ));\n                            }\n                            // if there is no validation message to throw, show the default helper text message defined in the constant\n                            return SamlHelperTextMessages.X509_CERTIFICATE.map((msg, index) => (\n                                <p key={index} dangerouslySetInnerHTML={{__html: msg}}/>\n                            ));\n                        })()\n                    }\n                </HelperTextItem>\n            </HelperText>\n        </FormGroup>\n\n    </Form>\n\n}\n\nexport default ImportSamlManual;\n","// Final page to display the urls of the flow https://miro.com/app/board/uXjVO_x__QE=/\n\nimport {Button, ClipboardCopy, Form, FormGroup, Popover, Text, Title} from '@patternfly/react-core';\nimport React, {useEffect, useState} from 'react';\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {getOrgId, getSSOBaseUrl} from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\ninterface Props{\n    accessToken: string | null;\n}\nconst ImportSamlFromURL = ({accessToken} : Props) => {\n    const [orgId, setOrgId] = useState('');\n    const chrome = useChrome();\n\n    const getConfigURL = (path: string) => {\n        return getSSOBaseUrl(chrome) + path;\n    };\n\n    useEffect(() => {\n        setOrgId(getOrgId(accessToken!));\n    }, [])\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\">Configure these URLs in your Identity Provider</Title>\n            <Text className=\"pf-v5-u-color-400 pf-v5-u-font-size-sm\">Please review the following information and verify that these are entered where required in your organization’s identity provider.</Text>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint/descriptor`)}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This is where your identity provider will redirect users to authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy isReadOnly clickTip=\"copied\">\n                    {getConfigURL(`broker/${orgId}/endpoint`)}\n                </ClipboardCopy>\n            </FormGroup>\n        </Form>\n    )\n}\n\nexport default ImportSamlFromURL;\n","import {AuditTypeFormatter} from '../../../Components/AuditInfo/audit-info';\n\nexport class SimpleText implements AuditTypeFormatter {\n    readonly BLANK_VALUE = '';\n\n    // eslint-disable-next-line class-methods-use-this\n    format(value: string): string {\n        if (value.trim().length > 0) {\n            return value;\n        }\n        return this.BLANK_VALUE;\n    }\n}\n","import React from 'react';\nimport {SimpleText} from \"../../Components/AuditInfo/formatters/simple-text\";\nimport './audit-info.scss'\n\nexport interface AuditTypeFormatter {\n    // eslint-disable-next-line no-unused-vars\n    format(value: string): string;\n}\n\ntype AuditInfoProps = {\n    preValue?: string;\n    value: string;\n    postValue?: string;\n    formatter?: AuditTypeFormatter;\n};\n\nconst AuditInfo: React.FC<AuditInfoProps> = ({ preValue, value, postValue, formatter = new SimpleText() }) => {\n    return <div className={'audit-info'}>{preValue} {formatter.format(value)} {postValue} </div>;\n};\n\nexport default AuditInfo;\n","import {AuditTypeFormatter} from \"../../../Components/AuditInfo/audit-info\";\n\nexport class AuditDate implements AuditTypeFormatter {\n    readonly BLANK_VALUE = '';\n\n    // eslint-disable-next-line class-methods-use-this\n    format(value: string): string {\n        try {\n            const date = new Date(value.replace('+0000', 'Z'));\n\n            if (isNaN(date.getTime())) { return this.BLANK_VALUE; }\n\n            return date.toLocaleString('en-US', {\n                year: 'numeric',\n                month: 'short',\n                day: 'numeric',\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n                timeZone: 'UTC',\n            });\n        } catch (error) {\n            return this.BLANK_VALUE;\n        }\n    }\n}\n","import React from 'react';\nimport './configured-oidc-idp.scss'\nimport { OidcResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Label,\n    Popover,\n    Text,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport styles from \"@patternfly/react-styles/css/components/Form/form\";\nimport AuditInfo from \"../../../Components/AuditInfo/audit-info\";\nimport {AuditDate} from \"../../../Components/AuditInfo/formatters/audit-date\";\n\ninterface Props {\n    oidcData: OidcResponseData\n}\n\nconst ConfiguredOidcIdp = ({ oidcData }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n    const date = new AuditDate();\n\n    return (\n        <Form>\n            <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                <p>Forthcoming enhancements will provide the ability to edit.</p>\n            </Alert>\n\n            <Title headingLevel={\"h1\"}>\n                {oidcData.displayName}\n                {oidcData.enabled\n                    ? <Label color=\"green\" icon={<CheckCircleIcon />} className=\"pf-v5-u-ml-md\">\n                        Enabled\n                    </Label>\n                    : <Label color=\"grey\" icon={<WrenchIcon />} className=\"pf-v5-u-ml-md\">\n                        Disabled\n                    </Label>\n                }\n            </Title>\n\n            { (oidcData.createdDate || oidcData.lastUpdatedDate) && (\n                <FormGroup fieldId=\"oidc-audit-data\">\n                    { oidcData.createdDate && (\n                        <AuditInfo preValue={'Created on'} value={oidcData.createdDate} formatter={date}/>\n                    )}\n                    { oidcData.lastUpdatedDate && (\n                        <AuditInfo preValue={'Last updated on'} value={oidcData.lastUpdatedDate} postValue={'by ' + oidcData.lastUpdatedBy} formatter={date}/>\n                    )}\n                </FormGroup>\n            )}\n\n            <FormGroup\n                label=\"Issuer\"\n                fieldId=\"oidc-issuer\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The issuer is used to validate tokens generated by the identity provider and allows\n                                additional security for your organization. This value is optional but recommended.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-issuer\" name=\"oidc-issuer\" value={oidcData.issuerUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client ID\"\n                fieldId=\"oidc-client-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client ID registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-id\" name=\"oidc-client-id\" value={oidcData.clientId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>Spaces and special characters are allowed here.</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Client Secret\"\n                fieldId=\"oidc-client-secret\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The client secret registered with the identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-client-secret\" name=\"oidc-client-secret\" value={oidcData.clientSecret} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Authorization URL\"\n                fieldId=\"oidc-authorization-url-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL that performs authentication of the end-user.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"oidc-token-url-id\" name=\"oidc-token-url-id\" value={oidcData.authorizationUrl} />\n            </FormGroup>\n\n            <FormGroup\n                label=\"Token URL\"\n                fieldId=\"authorization-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                URL where an authorization code can be exchanged for an access token and ID token.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled type=\"text\" id=\"authorization-url\" name=\"authorization-url\" value={oidcData.tokenUrl} />\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"metadata-url\"\n                    name=\"metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}.well-known/openid-configuration`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${oidcData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <ActionList>\n                <Popover\n                    triggerAction=\"hover\"\n                    aria-label=\"Hoverable popover\"\n                    headerContent={<div>Read-Only</div>}\n                    bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                        enhancements will provide the ability to edit.</div>}\n                    footerContent=\"\">\n                    <ActionListItem>\n                        {oidcData.enabled\n                            ? <Button variant=\"danger\" isDisabled>\n                                Disable\n                            </Button>\n                            : <Button variant=\"primary\" isDisabled>\n                                Test and enable\n                            </Button>\n                        }\n                    </ActionListItem>\n                </Popover>\n                <ActionListItem>\n                    <Button variant=\"link\" isDanger isDisabled>\n                        Delete identity provider\n                    </Button>\n                </ActionListItem>\n            </ActionList>\n        </Form>\n    )\n}\n\nexport default ConfiguredOidcIdp;\n","import { getSSOApiUrl } from \"../../../Utils/general-utils\";\nimport { SubmittableChoices } from \"../CommonInterfaces/user-choices\";\nimport { ChromeAPI } from \"@redhat-cloud-services/types\";\n\nfunction getSSOIdpApiUrl(chromeApi: ChromeAPI) {\n    return getSSOApiUrl(chromeApi, 'apis/organizations/v1/identity-providers');\n}\n\nexport async function apiGetIdp(chromeApi: ChromeAPI): Promise<Response> {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const response = await fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'GET',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Fetch failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiCreateIdp(chromeApi: ChromeAPI, createIdp: SubmittableChoices): Promise<Response> {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const response = await fetch(getSSOIdpApiUrl(chromeApi), {\n            method: 'POST',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(createIdp)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Create failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiToggleIdPStatus(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const apiStatusUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}/status`;\n        const response = await fetch(apiStatusUrl, {\n            method: 'PATCH',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Status update failed:\", error);\n        throw error;\n    }\n}\n\nexport async function apiDeleteIdp(chromeApi: ChromeAPI, idpAlias: String) {\n    try {\n        const token = await chromeApi.auth.getToken();\n        const deleteIdpUrl = getSSOIdpApiUrl(chromeApi) + `/${idpAlias}`;\n        const response = await fetch(deleteIdpUrl, {\n            method: 'DELETE',\n            referrerPolicy: 'no-referrer',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({})\n        })\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response;\n\n    } catch (error) {\n        console.error(\"IdP deletion failed:\", error);\n        throw error;\n    }\n}\n\n","import {Button, Modal, ModalVariant, Text, TextContent, Title} from \"@patternfly/react-core\";\nimport React, {useEffect, useState} from \"react\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {Link} from \"react-router-dom\";\nimport {apiToggleIdPStatus} from \"../ApiClient/idp-controller\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nconst IdpTestingModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n\n    const [primaryModalAction, setPrimaryModalAction] = useState(<Button />);\n    const [testBtnEnabled, setTestBtnEnabled] = useState(false);\n    const [idpTestingModalIcon, setIdpTestingModalIcon] = useState<\"info\"|\"danger\"|\"success\">(\"info\");\n    const [idpTestingModalTitle, setIdpTestingModalTitle] = useState(\"\");\n    const [idpTestingModalBody, setIdpTestingModalBody] = useState(<Text></Text>);\n    const [idpTestingModalErrorBody, setIdpTestingModalErrorBody] = useState(\"\");\n\n    const resetTestingModal = () => {\n        setPrimaryModalAction(<Button />);\n        setTestBtnEnabled(true);\n        setIdpTestingModalIcon(\"info\");\n        setIdpTestingModalTitle(\"Identity provider testing\");\n        setIdpTestingModalBody(<Text>Testing will open a pop-up window that will authenticate with your configured identity provider. If you are not currently signed into this identity provider, please do so in the pop-up window. Please be sure that pop-ups are allowed in your browser.</Text>);\n        setIdpTestingModalErrorBody(\"\");\n    }\n\n    useEffect(() => {\n        resetTestingModal();\n    }, []);\n\n    const dismissTestingModal = () => {\n        onClose();\n        resetTestingModal();\n    }\n\n    const getTestUrl = () => {\n        const idpAliasJson = { 'idp_alias': idpAlias }\n        const idpAliasJsonString = encodeURIComponent(JSON.stringify(idpAliasJson));\n        return `${ssoBaseUrl}protocol/openid-connect/auth?client_id=idp-connectivity-testing-login-client&redirect_uri=${ssoBaseUrl}&response_mode=query&response_type=code&scope=openid&state=${idpAliasJsonString}`;\n    }\n\n    const enableIdP = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        dismissTestingModal();\n    }\n\n    const handleTestBtn = () => {\n        setTestBtnEnabled(false);\n        setIdpTestingModalBody(<Text>Please complete identity provider testing in pop-up window</Text>);\n\n        window.open(getTestUrl(), \"RH IdP Integration Testing\", 'width=600,height=600,resizable,scrollbars');\n\n        window.addEventListener(\"message\", (event) => {\n            if (ssoBaseUrl.includes(event.origin)) {\n                if (event.data.success === true) {\n                    setPrimaryModalAction(<Button key=\"Enable\" variant=\"primary\" onClick={enableIdP}>Enable</Button>)\n                    setIdpTestingModalIcon(\"success\")\n                    setIdpTestingModalTitle(\"Test successful. Enable for your organization?\")\n                    setIdpTestingModalBody(<Text>Enabling will require users on your organization to authenticate through your newly-configured identity provider on their next authentication. If you do not enable this now, you will have to re-test again before being allowed to enable this identity provider.</Text>)\n                } else {\n                    setPrimaryModalAction(<Button key=\"Dismiss\" variant=\"primary\" onClick={dismissTestingModal}>Dismiss</Button>)\n                    setIdpTestingModalIcon(\"danger\")\n                    setIdpTestingModalTitle(\"Test failed\")\n                    setIdpTestingModalBody(<Text>Try looking over some <Link to=\"https://access.redhat.com/articles/7092870\">common mistakes</Link> and then re-testing. If that doesn’t help, <Link to={\"https://access.redhat.com/support/\"}>contact support</Link>.</Text>)\n                    setIdpTestingModalErrorBody(event.data.errorMsg);\n                }\n            }\n        });\n    }\n\n    return (\n        <Modal\n            titleIconVariant={idpTestingModalIcon}\n            title={idpTestingModalTitle}\n            isOpen={isOpen}\n            variant={ModalVariant.medium}\n            onClose={dismissTestingModal}\n            actions={[\n                primaryModalAction.key !== null ? primaryModalAction\n                : [\n                    <Button isDisabled={!testBtnEnabled} key=\"Test\" variant=\"primary\" onClick={handleTestBtn}>\n                        Test\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"link\" onClick={dismissTestingModal}>\n                        Cancel\n                    </Button>\n                ]\n            ]}\n        >\n            <TextContent>\n                <Text>{idpTestingModalBody}</Text>\n                <Title headingLevel={\"h3\"} hidden={!idpTestingModalErrorBody}>Error:</Title>\n                <Text hidden={!idpTestingModalErrorBody}>{idpTestingModalErrorBody}</Text>\n            </TextContent>\n        </Modal>\n    )\n}\n\nexport { IdpTestingModal };\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiToggleIdPStatus } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n    idpAlias: string,\n    isOpen: boolean,\n    onClose: () => void,\n    recomputeAppState: () => void\n}\n\nexport const DisableIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n\n    const disableIdp = async () => {\n        await apiToggleIdPStatus(chrome, idpAlias);\n        recomputeAppState();\n        onClose();\n    }\n\n    return (\n        <Modal\n            titleIconVariant={'warning'}\n            title=\"Disable identity provider?\"\n            isOpen={isOpen}\n            variant={ModalVariant.small}\n            onClose={onClose}\n        >\n            <ModalBody>\n                Disabling your identity provider will allow users on your organization to sign-in using their Red Hat credentials\n            </ModalBody>\n            <ModalFooter>\n                <Button variant=\"danger\" onClick={() => disableIdp()}>\n                    Disable\n                </Button>\n                <Button variant=\"link\" onClick={onClose}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n","import React from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { apiDeleteIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ModalBody, ModalFooter } from \"@patternfly/react-core/next\";\n\ninterface Props {\n  idpAlias: string,\n  isOpen: boolean,\n  onClose: () => void,\n  recomputeAppState: () => void\n}\n\nexport const DeleteIdpModal = ({ idpAlias, isOpen, onClose, recomputeAppState }: Props) => {\n  const chrome = useChrome();\n\n  const deleteIdp = async () => {\n    await apiDeleteIdp(chrome, idpAlias);\n    recomputeAppState();\n    onClose();\n  }\n\n  return (\n    <Modal\n      titleIconVariant={'warning'}\n      title=\"Delete identity provider?\"\n      isOpen={isOpen}\n      variant={ModalVariant.small}\n      onClose={onClose}\n    >\n      <ModalBody>\n        You will have to restart the wizard to configure an identity provider.\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"danger\" onClick={() => deleteIdp()}>\n          Delete\n        </Button>\n        <Button variant=\"link\" onClick={onClose}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport './configured-saml-idp.scss'\nimport { SamlResponseData } from \"../CommonInterfaces/idp-response-types\";\nimport {\n    ActionList,\n    ActionListItem, Alert,\n    Button,\n    ClipboardCopy,\n    Form,\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    Label,\n    Popover,\n    Text,\n    TextArea,\n    TextContent,\n    TextInput,\n    TextVariants,\n    Title\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { getSSOBaseUrl } from \"../../../Utils/general-utils\";\nimport { IdpTestingModal } from \"../IdpTesting/idp-testing-modal\";\nimport { DisableIdpModal } from \"../Configured/disable-idp-modal\";\nimport { DeleteIdpModal } from './delete-idp-modal';\nimport {SamlHelperTextMessages} from \"../../../Apps/IdpSelfService/Constants/saml-helper-text-messages\";\nimport AuditInfo from \"../../../Components/AuditInfo/audit-info\";\nimport {AuditDate} from \"../../../Components/AuditInfo/formatters/audit-date\";\n\ninterface Props {\n    samlData: SamlResponseData,\n    milestoneTwoEnabled: boolean,\n    recomputeAppState: () => void,\n    milestoneTwoPointFiveEnabled: boolean\n}\n\nconst ConfiguredSamlIdp = ({ samlData, milestoneTwoEnabled, milestoneTwoPointFiveEnabled, recomputeAppState }: Props) => {\n    const chrome = useChrome();\n    const ssoBaseUrl = getSSOBaseUrl(chrome);\n    const [isTestingModalVisible, toggleTestingModalVisibility] = useState(false);\n    const [isDisabledModalVisible, toggleIsDisabledModalVisible] = useState(false);\n    const [isDeleteModalVisible, toggleIsDeleteModalVisible] = useState(false);\n    const date = new AuditDate();\n\n    return (\n        <Form>\n            {samlData.enabled &&\n                <Alert variant=\"info\" isInline title=\"This page currently shows a read-only version of your configuration.\">\n                    <p>Forthcoming enhancements will provide the ability to edit.</p>\n                </Alert>\n            }\n\n            <Title headingLevel={\"h1\"} className=\"pf-v5-u-display-flex\">\n                {samlData.displayName}\n                {samlData.enabled\n                    ? <Label color=\"green\" icon={<CheckCircleIcon />} className=\"pf-v5-u-ml-md\">\n                        Enabled\n                    </Label>\n                    : <Label color=\"grey\" icon={<WrenchIcon />} className=\"pf-v5-u-ml-md\">\n                        Disabled\n                    </Label>\n                }\n            </Title>\n\n            { (samlData.createdDate || samlData.lastUpdatedDate) && (\n                <FormGroup fieldId=\"saml-audit-data\">\n                    { samlData.createdDate && (\n                        <AuditInfo preValue={'Created on'} value={samlData.createdDate} formatter={date}/>\n                    )}\n                    { samlData.lastUpdatedDate && (\n                        <AuditInfo preValue={'Last updated on'} value={samlData.lastUpdatedDate} postValue={'by ' + samlData.lastUpdatedBy} formatter={date}/>\n                    )}\n                </FormGroup>\n            )}\n\n            <FormGroup\n                label=\"Identity provider Entity ID\"\n                fieldId=\"saml-entity-id\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>{SamlHelperTextMessages.ENTITY_ID}</div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextInput isDisabled={!milestoneTwoPointFiveEnabled} type=\"text\" id=\"saml-entity-id\" name=\"saml-entity-id\" value={samlData.identityProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.ENTITY_ID}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Single sign-on authentication request URL\"\n                fieldId=\"saml-authn-request-url\">\n                <TextInput isDisabled={!milestoneTwoPointFiveEnabled} type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.authenticationRequestsUrl} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.AUTHENTICATION_REQUEST_URL}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Service provider issuer\"\n                fieldId=\"saml-provider-issuer\">\n                <TextInput isDisabled={!milestoneTwoPointFiveEnabled} type=\"text\" id=\"saml-provider-issuer\" name=\"saml-provider-issuer\" value={samlData.serviceProviderEntityId} />\n                <FormHelperText>\n                    <HelperText>\n                        <HelperTextItem>{SamlHelperTextMessages.SERVICE_PROVIDER_ISSUER}</HelperTextItem>\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <FormGroup\n                label=\"x509 certificate\"\n                fieldId=\"saml-x509-certificate\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>A PEM certificate that is used to check for signatures.</div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <TextArea resizeOrientation=\"vertical\" isDisabled={!milestoneTwoPointFiveEnabled} type=\"text\" id=\"saml-authn-request-url\" name=\"saml-authn-request-url\" value={samlData.x509Certificate} />\n                <FormHelperText>\n                    <HelperText>\n                        {SamlHelperTextMessages.X509_CERTIFICATE.map((message, index) => (\n                            <HelperTextItem key={index}>\n                                <p dangerouslySetInnerHTML={{__html: message}}/>\n                            </HelperTextItem>\n                        ))}\n                    </HelperText>\n                </FormHelperText>\n            </FormGroup>\n\n            <Title headingLevel={\"h3\"}>URLs required for identity provider configuration</Title>\n\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    Use these URLs to assist in completing setup within your identity provider.\n                </Text>\n            </TextContent>\n\n            <FormGroup\n                label=\"Service provider metadata URL\"\n                fieldId=\"service-provider-metadata-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                Service provider metadata used to integrate Red Hat with your identity provider.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"service-provider-metadata-url\"\n                    name=\"service-provider-metadata-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint/descriptor`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            <FormGroup\n                label=\"Redirect URL / Assertion Consumption Service (ACS) URL\"\n                fieldId=\"redirect-url\"\n                labelIcon={\n                    <Popover\n                        triggerAction=\"hover\"\n                        bodyContent={\n                            <div>\n                                The redirect URL to use when configuring your identity provider. This is where your identity provider will redirect users to authenticate to Red Hat.\n                            </div>\n                        }>\n                        <Button\n                            variant=\"plain\"\n                            type=\"button\"\n                            onClick={(e) => e.preventDefault()}\n                            className={`customPopover ${styles.formGroupLabelHelp}`}>\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                }>\n                <ClipboardCopy\n                    type=\"text\"\n                    id=\"redirect-url\"\n                    name=\"redirect-url\"\n                    isReadOnly>\n                    {`${ssoBaseUrl}broker/${samlData.idpAlias}/endpoint`}\n                </ClipboardCopy>\n            </FormGroup>\n\n            {!milestoneTwoEnabled &&\n                <ActionList>\n                    <Popover\n                        triggerAction=\"hover\"\n                        aria-label=\"Hoverable popover\"\n                        headerContent={<div>Read-Only</div>}\n                        bodyContent={<div>This page currently shows a read-only version of your configuration. Forthcoming\n                            enhancements will provide the ability to edit.</div>}\n                        footerContent=\"\">\n                        <ActionListItem>\n                            <Button isDisabled>\n                                Save\n                            </Button>\n                        </ActionListItem>\n                    </Popover>\n                    <ActionListItem>\n                        <Button isDisabled variant=\"link\">\n                            Cancel\n                        </Button>\n                    </ActionListItem>\n                </ActionList>\n            }\n\n            {milestoneTwoEnabled &&\n                <ActionList hidden={!milestoneTwoEnabled}>\n                    <ActionListItem>\n                        {!samlData.enabled\n                            ? <Button onClick={() => toggleTestingModalVisibility(true)}>\n                                Test and enable\n                            </Button>\n                            : <Button variant={\"danger\"} onClick={() => toggleIsDisabledModalVisible(true)}>\n                                Disable\n                            </Button>\n                        }\n                    </ActionListItem>\n                    <ActionListItem>\n                        <Button variant=\"link\" onClick={() => toggleIsDeleteModalVisible(true)} isDanger>\n                            Delete identity provider\n                        </Button>\n                    </ActionListItem>\n                    {isDisabledModalVisible && <DisableIdpModal idpAlias={samlData.idpAlias} isOpen={isDisabledModalVisible} onClose={() => toggleIsDisabledModalVisible(false)} recomputeAppState={recomputeAppState} />}\n                    {isTestingModalVisible && <IdpTestingModal idpAlias={samlData.idpAlias} isOpen={isTestingModalVisible} onClose={() => toggleTestingModalVisibility(false)} recomputeAppState={recomputeAppState} />}\n                    {isDeleteModalVisible && <DeleteIdpModal idpAlias={samlData.idpAlias} isOpen={isDeleteModalVisible} onClose={() => toggleIsDeleteModalVisible(false)} recomputeAppState={recomputeAppState} />}\n                </ActionList>\n            }\n        </Form>\n    )\n}\n\nexport default ConfiguredSamlIdp;\n","import './configured-idp.scss';\nimport ConfiguredOidcIdp from './configured-oidc-idp';\nimport ConfiguredSamlIdp from './configured-saml-idp';\nimport React, {useState, useEffect, ReactElement} from 'react';\nimport {\n    Card,\n    CardBody,\n    Spinner\n} from '@patternfly/react-core';\n\nimport {IdpResponseData, OidcResponseData, SamlResponseData} from \"../CommonInterfaces/idp-response-types\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\n\ninterface Props {\n    responseData: IdpResponseData,\n    milestoneTwoFeaturesEnabled: boolean\n    recomputeAppState: () => void\n}\n\nconst ConfiguredIdp = ({responseData, milestoneTwoFeaturesEnabled, recomputeAppState}: Props) => {\n\n    const isMTwoandAHalfEnabled = useFlag('iamconsole.IDPIntegration.m2.5.edit')\n    // flag to control which values get displayed\n\n    const [providerType, setProviderType] = useState<ReactElement>(\n       <Spinner/>\n    )\n\n    useEffect(() => {\n        if (responseData.providerId === 'saml-improved') {\n            setProviderType(<ConfiguredSamlIdp samlData={responseData as SamlResponseData} milestoneTwoEnabled={milestoneTwoFeaturesEnabled} milestoneTwoPointFiveEnabled={isMTwoandAHalfEnabled} recomputeAppState={recomputeAppState}/>);\n        }\n        else if (responseData.providerId === 'oidc-improved') {\n            setProviderType(<ConfiguredOidcIdp oidcData={responseData as OidcResponseData}/>);\n        }\n    }, [responseData]);\n\n    return (\n        <React.Fragment>\n            <Card isCompact={false} isLarge={true}>\n                <CardBody>\n                    {providerType}\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default ConfiguredIdp;\n","import './idp-not-setup.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from \"prop-types\";\n\ninterface Props{\n    setupIDP: any,\n    wizardEnabled: boolean\n}\n\nconst IdpNotSetup = ({setupIDP, wizardEnabled}: Props) => {\n\n    return <div className=\"notSetupDiv\">\n                <CubesIcon className=\"cubesIcon\"/>\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">No Identity Providers are currently configured</Title>\n                <Text className=\"pf-v5-u-mt-md\">Your organization has not integrated an identity provider. More information is available <Button variant=\"link\" target=\"_blank\" href=\"https://access.redhat.com/articles/7093475\" component=\"a\" isInline>here</Button>.</Text>\n                <Button className={wizardEnabled ? \"pf-v5-u-mt-lg\" : \"hideFeature\"} variant=\"primary\" onClick={setupIDP}>Integrate an identity provider</Button>\n            </div>\n}\n\nIdpNotSetup.propTypes = {\n    setupIDP: PropTypes.func\n}\n\nexport default IdpNotSetup;\n","import React from 'react';\nimport { WizardFooterWrapper, useWizardContext} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport {UserChoices} from \"../CommonInterfaces/user-choices\";\nimport {useValidationContext} from \"../CommonInterfaces/validation-context\";\n\n\ninterface Props {\n    userChoices: UserChoices;\n    setPreviousTriggered: Function;\n    currentState: string;\n}\n\nconst GenericFooter = ({userChoices, setPreviousTriggered, currentState}: Props) => {\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (!isFailureTriggered(userChoices, currentState, validations, setValidations)) {\n            goToNextStep();\n        }\n    }\n\n    /**\n     * on back click we need to be able to trigger the wizard context's default back functionality but we also need to\n     * handle the current state stored in the flowTemplate.\n     */\n    const handleBackClick = () => {\n        // handles wizard default functionality\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        setPreviousTriggered();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n            <Button onClick={handleNextClick}>\n                Next\n            </Button>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default GenericFooter;\n","import React, { MutableRefObject } from 'react';\nimport {\n    WizardFooterWrapper /* data-codemods */, useWizardContext /* data-codemods */\n} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button, Alert, AlertGroup } from '@patternfly/react-core';\nimport { isFailureTriggered } from \"../../../Utils/general-utils\";\nimport { SubmittableChoices, UserChoices } from \"../CommonInterfaces/user-choices\";\nimport {\n    AUTH_REQUEST_URL,\n    IDENTITY_PROVIDER_ENTITY_ID,\n    X509_CERTIFICATE,\n    SERVICE_PROVIDER_ISSUER\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/idp-request-types\";\n\nimport PropTypes from \"prop-types\";\nimport { useValidationContext } from \"../CommonInterfaces/validation-context\";\nimport { apiCreateIdp } from \"../ApiClient/idp-controller\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\n\ninterface Props {\n    userChoiceData: MutableRefObject<UserChoices>;\n    previous: Function;\n    currentState: string;\n}\n\nconst SubmitFooter = ({ userChoiceData, previous, currentState }: Props) => {\n    const chrome = useChrome();\n    const { goToNextStep, goToPrevStep } = useWizardContext();\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [alerts, setAlerts] = React.useState<React.ReactNode>();\n    const { validations, setValidations } = useValidationContext();\n\n    /**\n     * convert the choice data to use the key's required by the api.\n     */\n    const filterChoiceData = (): SubmittableChoices => {\n        const provider = userChoiceData.current.selections.protocol === \"OIDC_CONFIG\" ? \"oidc-improved\" : \"saml-improved\"\n        const idpEID = userChoiceData.current.selections[IDENTITY_PROVIDER_ENTITY_ID];\n        const reqURL = userChoiceData.current.selections[AUTH_REQUEST_URL];\n        const serviceEID = userChoiceData.current.selections[SERVICE_PROVIDER_ISSUER];\n        const sanitizedCertChain = userChoiceData.current.selections[X509_CERTIFICATE].replace(/[\\s\\n\\r]/gu, '');\n\n        return {\n            providerId: provider,\n            identityProviderEntityId: idpEID,\n            authenticationRequestsUrl: reqURL,\n            serviceProviderEntityId: serviceEID,\n            x509Certificate: sanitizedCertChain,\n        }\n    }\n\n    /**\n     * function that allows us to trigger the error alert on unsuccessful api call.\n     */\n    const throwError = (message: string) => {\n        const timeout = 8000;\n        // eslint-disable-next-line react/jsx-key\n        setAlerts(<Alert variant=\"danger\" isInline isPlain title={message} timeout={timeout} onTimeout={() => { setAlerts([]) }} />)\n    }\n\n    const createIDPCall = () => {\n        apiCreateIdp(chrome, filterChoiceData())\n            .then(response => response.json())\n            .then((responseData) => {\n                // errors that come through post authentication typically end up here\n                if (responseData.error || responseData.error_description) {\n                    console.error(\"Error Type: \" + responseData.error);\n                    console.error(\"Error Message: \" + responseData.error_description);\n                    throwError(\"Failed to upload config: \" + responseData.error_description);\n\n                    setIsLoading(false);\n                }\n                else {\n                    setIsLoading(false)\n                    goToNextStep();\n                }\n\n            })\n            .catch(error => {\n                // this handles any of the extraneous errors.\n                throwError(error.toString());\n                console.error('Error: ', error);\n                setIsLoading(false);\n            })\n    }\n\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        if (!isFailureTriggered(userChoiceData.current, currentState, validations, setValidations)) {\n            // trigger the spinner.\n            setIsLoading(true);\n            // fire the call to SSO.\n            createIDPCall();\n        } else {\n            setIsLoading(false);\n        }\n    }\n\n    const handleBackClick = () => {\n        goToPrevStep();\n        // custom logic to update the current flow state.\n        previous();\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Button variant=\"secondary\" onClick={handleBackClick}>\n                Back\n            </Button>\n            <Button onClick={handleNextClick} isLoading={isLoading}>Next</Button>\n            <AlertGroup isLiveRegion className=\"pf-v5-u-mt-sm\">\n                {alerts}\n            </AlertGroup>\n        </WizardFooterWrapper>\n    );\n}\n\nSubmitFooter.propTypes = {\n    userChoiceData: PropTypes.object,\n}\n\nexport default SubmitFooter;\n","import React from 'react';\nimport { WizardFooterWrapper} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport { Button, Checkbox, Stack, StackItem } from '@patternfly/react-core';\n\nconst FinalizeFooter = () => {\n\n    const [checkState, setCheckState] = React.useState(false);\n    /**\n     * Governs what happens when the next button gets clicked. Important for allowing the back and forth communication\n     * between the footer element and the actual component being displayed when needing to perform steps such as validation.\n     */\n    const handleNextClick = () => {\n        window.location.reload();\n    }\n\n    /**\n     * handled\n     */\n    const handleCheckClick = () => {\n        setCheckState(!checkState);\n    }\n\n    return (\n        <WizardFooterWrapper>\n            <Stack hasGutter>\n                <StackItem>\n                    <Checkbox onChange={handleCheckClick} label=\"I have verified that this information is properly set in my identity provider.\" id=\"confirmation\" isChecked={checkState} isRequired></Checkbox>\n                </StackItem>\n                <StackItem>\n                    <Button onClick={handleNextClick} isDisabled={!checkState}>Submit</Button>\n                </StackItem>\n            </Stack>\n        </WizardFooterWrapper>\n    );\n}\n\nexport default FinalizeFooter;\n","import './flow-template.scss'\nimport React, {useState, useRef, useEffect} from 'react';\nimport {Wizard, WizardStep} from '@patternfly/react-core/dist/esm/components/Wizard';\nimport {IdpResponseData, IdpResponseDataInitialState} from \"../CommonInterfaces/idp-response-types\";\nimport {UserChoices} from '../CommonInterfaces/user-choices'\nimport {InputValidation} from '../CommonInterfaces/input-validation'\nimport {PageHeader, PageHeaderTitle} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport CustomerInformation from '../FirstStep/customer-information';\nimport OIDCConfig from '../SecondStep/oidc-configuration';\nimport SAMLConfig from '../SecondStep/saml-configuration';\nimport ImportFromFile from '../ThirdStep/import-from-file';\nimport ImportFromUrl from '../ThirdStep/import-from-url';\nimport ImportSamlFromFile from '../ThirdStep/import-saml-from-file';\nimport ImportSamlFromUrl from '../ThirdStep/import-saml-from-url';\nimport ImportSamlManual from '../ThirdStep/import-saml-manual';\nimport URLsForUser from '../FinalStep/urls-for-user';\nimport ConfiguredIdp from '../Configured/configured-idp';\nimport IdpNotSetup from \"../IdpNotSetup/idp-not-setup\";\nimport GenericFooter from './generic-footer';\nimport SubmitFooter from './submit-footer';\nimport FinalizeFooter from './finalize-footer';\nimport PropTypes from \"prop-types\";\nimport {useChrome} from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {PageSection, Text, TextContent, TextVariants, Spinner, Button} from \"@patternfly/react-core\";\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {FlowStep} from \"../../../Apps/IdpSelfService/Constants/flow-step\";\nimport ValidationContext, {\n    ValidationContextType\n} from \"../../../Apps/IdpSelfService/CommonInterfaces/validation-context\";\nimport {apiGetIdp} from \"../ApiClient/idp-controller\";\nimport ExternalLinkSquareAltIcon from \"@patternfly/react-icons/dist/dynamic/icons/external-link-alt-icon\";\n\ninterface Props {\n    accessToken: string\n}\n\nconst FlowTemplate = ({accessToken}: Props) => {\n    const chrome = useChrome();\n    // intended to serve as the main aggregate of data that gets sent to the server\n    const userChoices = useRef<UserChoices>({selections: {}});\n\n    // has the admin's account been configured with an idp. If so display the management screen.\n    const [isConfigured, setIsConfigured] = useState(false);\n    const [isAllowedToConfigure, setIsAllowedToConfigure] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInit, setIsInit] = useState(true);\n    const [idpData, setIdpData] = useState(IdpResponseDataInitialState);\n    const isWizardFlowEnabled = useFlag('iamconsole.IDPIntegration.wizardFlowEnabled')\n\n    const docsLink = \"https://docs.redhat.com/en/documentation/red_hat_customer_portal/1/html/configuring_identity_provider_integration/index\";\n\n    const recomputeAppState = () => {\n        apiGetIdp(chrome)\n        .then(response => {\n            if (response.status === 204) {\n                return {status: ''};\n            }\n            return response.json()\n        })\n        .then((data: IdpResponseData) => {\n            if (data.providerId === 'oidc-improved' || data.providerId === 'saml-improved') {\n                setIdpData(data);\n                setIsLoading(false);\n                setIsConfigured(true);\n            } else if (data.error) {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(false);\n            } else {\n                setIsLoading(false);\n                setIsConfigured(false);\n                setIsAllowedToConfigure(true);\n            }\n        })\n        .catch(error => {\n            console.error('Error: ', error);\n            setIsLoading(false);\n        })\n    }\n\n    useEffect(() => {\n        recomputeAppState();\n    }, [])\n\n    const defaultValue: ValidationContextType = {\n        validations: {\n            CUSTOMER_INFORMATION: {},\n            OIDC_CONFIG: {},\n            SAML_CONFIG: {},\n            IMPORT_FROM_FILE: {},\n            IMPORT_FROM_URL: {},\n            IMPORT_SAML_FROM_FILE: {},\n            IMPORT_SAML_FROM_URL: {},\n            IMPORT_SAML_MANUALLY: {}\n        },\n        // eslint-disable-next-line no-empty-function\n        setValidations: () => {\n        }\n    };\n\n    // handle the present validation state of the various steps.\n    const [validations, setValidations] = useState<InputValidation>(defaultValue.validations)\n\n    /**\n     * This object is intended to keep a map of the current flow state including next state and\n     * previous state when available.\n     */\n    const [flowState, setFlowState] = useState({\n        currentState: FlowStep.CUSTOMER_INFORMATION,\n        previousState: \"\"\n    })\n\n    /**\n     * seems to be a function required by default for wizard. test at later date to verify. If not then remove. Gets executed\n     * when the wizard isn't otherwise specified what to do.\n     */\n        // eslint-disable-next-line no-empty-function\n    const closeWizard = () => {\n        }\n\n    // manages what flow states are to be displayed from within the wizard\n    const [displayed, setDisplayed] = useState({\n        hideOIDC: true,\n        hideSAML: true,\n        hideImportFromURL: true,\n        hideImportFromFile: true,\n        hideImportManually: true,\n        hideFinish: true,\n    })\n\n    const triggerNextStep = (nextStep: string) => {\n        // Need to pull the current state, run checks, and\n        let newDisplay;\n\n        switch (nextStep) {\n            case FlowStep.OIDC_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideOIDC = false;\n                newDisplay.hideSAML = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.SAML_CONFIG:\n                newDisplay = {...displayed};\n                newDisplay.hideSAML = false;\n                newDisplay.hideOIDC = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION\n                });\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = false;\n                newDisplay.hideImportFromURL = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromFile = true;\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.OIDC_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                newDisplay = {...displayed};\n                newDisplay.hideImportManually = true;\n                newDisplay.hideImportFromFile = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                newDisplay = {...displayed};\n                newDisplay.hideImportManually = false;\n                newDisplay.hideImportFromFile = true;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                newDisplay = {...displayed};\n                newDisplay.hideImportFromURL = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: FlowStep.SAML_CONFIG\n                });\n                break;\n            case FlowStep.FINAL_STEP:\n                newDisplay = {...displayed};\n                newDisplay.hideFinish = false;\n                setDisplayed(newDisplay);\n                setFlowState({\n                    currentState: nextStep,\n                    previousState: flowState.currentState,\n                });\n                break;\n            default:\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                });\n\n        }\n\n    }\n\n    /**\n     *\n     * @param validChoices an array of strings representing the values that will remain in the selection list.\n     */\n    const pruneChoices = (validChoices: string[]) => {\n        const choicesKeys = Object.keys(userChoices.current.selections);\n        for (let i = 0; i < choicesKeys.length; i++) {\n            if (!validChoices.includes(choicesKeys[i])) {\n                // @ts-ignore\n                delete userChoices.current.selections[choicesKeys[i]];\n            }\n        }\n    }\n\n    const triggerBackStep = (prevStep: string) => {\n        switch (prevStep) {\n            case FlowStep.OIDC_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.SAML_CONFIG:\n                pruneChoices([\"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.CUSTOMER_INFORMATION,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.OIDC_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: false,\n                    hideSAML: true,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_URL:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: false,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_MANUALLY:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: false,\n                    hideFinish: true,\n                })\n                break;\n            case FlowStep.IMPORT_SAML_FROM_FILE:\n                pruneChoices([\"clientId\", \"clientSecret\", \"inputMethod\", \"protocol\"]);\n                setFlowState({\n                    currentState: prevStep,\n                    previousState: FlowStep.SAML_CONFIG,\n                });\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: false,\n                    hideImportFromURL: true,\n                    hideImportFromFile: false,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n                break;\n            default:\n                pruneChoices([\"\"]);\n                setDisplayed({\n                    hideOIDC: true,\n                    hideSAML: true,\n                    hideImportFromURL: true,\n                    hideImportFromFile: true,\n                    hideImportManually: true,\n                    hideFinish: true,\n                })\n        }\n    }\n\n    const setBackTriggered = () => {\n        triggerBackStep(flowState.previousState)\n    }\n\n    return (\n        <div className=\"flowPage\">\n            <PageHeader className=\"wizardHeader\">\n                <PageHeaderTitle title=\"Identity Provider Integration\" className=\"pf-v5-u-mb-lg\"/>\n                <TextContent>\n                    Manage identity provider integration for your organization.{' '}\n                    <Text component={TextVariants.a} className={isWizardFlowEnabled && (isAllowedToConfigure || isConfigured) ? '' : \"hiddenPage\"}>\n                         <Button variant=\"link\" href={docsLink} target=\"_blank\" component=\"a\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\"right\" className=\"pf-v5-u-ml-xs\">\n                            Learn more about identity provider integration\n                         </Button>\n                    </Text>\n                </TextContent>\n            </PageHeader>\n            <PageSection>\n                <div className={isLoading ? 'loadingIcon' : 'hiddenPage'}>\n                    <Spinner/>\n                </div>\n                <div className={!isLoading && isConfigured ? '' : 'hiddenPage'}>\n                    <ConfiguredIdp responseData={idpData} milestoneTwoFeaturesEnabled={isWizardFlowEnabled} recomputeAppState={recomputeAppState}/>\n                </div>\n                <div className={(!isLoading && !isConfigured && isInit) ? 'initPage' : 'hiddenPage'}>\n                    <IdpNotSetup setupIDP={() => {\n                        setIsInit(false)\n                    }} wizardEnabled={isWizardFlowEnabled && isAllowedToConfigure}/>\n                </div>\n                <div className={(!isConfigured && !isInit) ? '' : 'hiddenPage'}>\n                    <ValidationContext.Provider value={{validations, setValidations}}>\n                        <Wizard\n                            onClose={closeWizard}\n                            isProgressive>\n\n                            {/* Standard customer config. Every flow requires this */}\n                            <WizardStep\n                                id={'CUSTOMERINFORMATION'}\n                                name={'Customer information'}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={FlowStep.CUSTOMER_INFORMATION}\n                                    />\n                                }>\n                                <CustomerInformation\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            {/* OIDC Config. Only run through if a customer chooses OIDC configuration */}\n                            <WizardStep\n                                id={'OIDCCONFIG'}\n                                name={'OIDC Configuration'}\n                                isHidden={displayed.hideOIDC}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'OIDC_CONFIG'}\n                                    />\n                                }>\n                                <OIDCConfig\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMFILE'}\n                                name={'Import config from file'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_FILE}\n                                    />\n                                }>\n                                <ImportFromFile\n                                    updateStatus={triggerNextStep}\n                                    rootUserChoices={userChoices.current}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                id={'IMPORTFROMURL'}\n                                name={'Import config from URL'}\n                                isHidden={!(!displayed.hideOIDC && !displayed.hideImportFromURL)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_FROM_URL}\n                                    />\n                                }>\n                                <ImportFromUrl\n                                    rootUserChoices={userChoices}\n                                />\n                            </WizardStep>\n\n                            {/* SAML Config. Only run through if the customer chooses a SAML configuration */}\n                            <WizardStep\n                                id={'SAMLCONFIG'}\n                                name={'SAML configuration'}\n                                isHidden={displayed.hideSAML}\n                                footer={\n                                    <GenericFooter\n                                        userChoices={userChoices.current}\n                                        setPreviousTriggered={setBackTriggered}\n                                        currentState={'SAML_CONFIG'}\n                                    />\n                                }>\n                                <SAMLConfig\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n                            </WizardStep>\n\n                            <WizardStep\n                                name={'Import SAML from file'}\n                                id={'IMPORTSAMLFROMFILE'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportFromFile)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_FROM_FILE}\n                                    />\n                                }>\n                                <ImportSamlFromFile\n                                    rootUserChoices={userChoices.current}\n                                    updateStatus={triggerNextStep}\n                                />\n\n                            </WizardStep>\n                            <WizardStep\n                                name={'Configure SAML manually'}\n                                id={'IMPORTSAMLMANUALLY'}\n                                isHidden={!(!displayed.hideSAML && !displayed.hideImportManually)}\n                                footer={\n                                    <SubmitFooter\n                                        userChoiceData={userChoices}\n                                        previous={setBackTriggered}\n                                        currentState={FlowStep.IMPORT_SAML_MANUALLY}\n                                    />\n                                }>\n\n                                <ImportSamlManual\n                                    primeNextStep={triggerNextStep}\n                                    rootUserChoices={userChoices.current}\n                                />\n\n                            </WizardStep>\n\n                            {/* Final steps of the process. again any selection will show the following two steps.*/}\n                            <WizardStep\n                                id={'FINALSTEP'}\n                                name={'Configure URLs in your IDP'}\n                                isHidden={displayed.hideFinish}\n                                footer={\n                                    <FinalizeFooter/>\n                                }>\n                                {/* should support both SAML and OIDC params */}\n                                <URLsForUser accessToken={accessToken}/>\n                            </WizardStep>\n                        </Wizard>\n                    </ValidationContext.Provider>\n                </div>\n            </PageSection>\n        </div>\n);\n}\n\n\nFlowTemplate.propTypes = {\n    accessToken: PropTypes.string\n}\n\nexport default FlowTemplate;\n","import './non-admin-user.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text,\n    Button\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst NonAdminIDP = () => {\n\n    const triggerRedirect = () => {\n        window.location.href = \"/iam/my-user-access\";\n    }\n    const myUserAccessLink = \"/iam/my-user-access\";\n\n    return <div className=\"nonAdminDiv\">\n                <LockIcon className=\"lockIcon\" />\n                <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-lg\">Access permissions needed</Title>\n                <Text className=\"pf-v5-u-mt-lg\">\n                    To access Identity Provider Integration, ask your organization administrator(s) to adjust your permissions,\n                    or visit <Button variant=\"link\" href={myUserAccessLink} target={\"_blank\"} component=\"a\" isInline>My User Access</Button> to learn more about your permissions\n                </Text>\n                <Button onClick={triggerRedirect} className=\"pf-v5-u-mt-lg\">Return to home page</Button>\n            </div>\n}\n\nexport default NonAdminIDP;\n","import './identity-provider-integration.scss';\nimport React, { useState, useEffect } from 'react';\nimport FlowTemplate from '../../Apps/IdpSelfService/IdpFlowTemplate/flow-template'\nimport DisabledPage from \"../../Components/DisabledPage/disabled-page\";\nimport {isAdminUser} from '../../Utils/general-utils';\nimport {useFlag} from \"@unleash/proxy-client-react\";\nimport {useChrome} from '@redhat-cloud-services/frontend-components/useChrome';\nimport NonAdminIDP from \"../../Components/NonAdminUser/non-admin-idp\";\n\n\nconst IdentityProviderIntegration = () => {\n    const chrome = useChrome();\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: false,\n        selfServiceIDP: <DisabledPage/>\n    })\n    const isSelfServiceIDPEnabled = useFlag('iamconsole.IDPIntegration.enabled');\n\n    useEffect(() => {\n        // eslint-disable-next-line no-undef\n        chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        chrome.auth.getToken().then(token => {\n            userToken = token;\n            if (!isAdminUser(userToken!)) {\n                updateUser({\n                    adminUser: false,\n                    selfServiceIDP: <NonAdminIDP/>\n                })\n                return;\n            }\n            // if the user is in fact and admin user then render TwoFactorCheckOld\n            if (isAdminUser(userToken!) && isSelfServiceIDPEnabled) {\n                updateUser({\n                    adminUser: true,\n                    selfServiceIDP: <FlowTemplate accessToken={userToken!} />\n                })\n            }\n        })\n    }, []);\n\n    return (\n        <React.Fragment>\n            {currentUser.selfServiceIDP}\n        </React.Fragment>\n    )\n\n}\n\nexport default IdentityProviderIntegration\n","import {ValidationTemplate} from \"../Apps/IdpSelfService/CommonInterfaces/oidc-validation\";\nimport {UserChoices} from \"../Apps/IdpSelfService/CommonInterfaces/user-choices\";\nimport forge from 'node-forge';\n\nfunction parseToken (token :string) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload;\n}\n\nexport function isAdminUser (token :string) {\n    return parseToken(token).is_org_admin;\n}\n\n\nexport function getOrgId (token :string) {\n    return parseToken(token).org_id;\n}\n\ninterface Updatable{\n    [key:string]: string\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value :string, key :string, stateObject:Object|undefined, updateFunction :Function) {\n\n    const updatedValue :Updatable = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\ninterface VerificationResult {\n    status: string;\n    message: string;\n}\n\nconst isBase64 = (str: string): boolean => {\n    if (!(/^[A-Za-z0-9+/]*={0,2}$/u).test(str) || str.length % 4 !== 0) {\n        return false;\n    }\n\n    try {\n        const decoded = forge.util.decode64(str);\n        const reEncoded = forge.util.encode64(decoded);\n        return reEncoded === str;\n    } catch {\n        return false;\n    }\n};\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @param {boolean} required is this a required field\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input:string, type:string, required:boolean) :VerificationResult | undefined {\n    const INVALID_CERT_MESSAGE = 'This is invalid, please check for uncommonly used characters. Be sure to exclude the start and end block';\n    const INVALID_ENTITYID_MESSAGE = 'This is invalid. This field is intended to consist of only alphanumeric characters and valid URL\\'s'\n    const EXPIRED_CERT_MESSAGE = 'Certificate is expired';\n    const INVALID_TEXT_MESSAGE = 'This text is invalid please check for uncommonly used characters or spaces';\n    const INVALID_URL_MESSAGE = 'This field needs to be a valid URL';\n\n    if (required && !input) {\n        return {\n            status: 'error',\n            message: type === 'RADIO' ? 'A selection must be made' : 'This field can not be left empty'\n        }\n    }\n\n    let verified: VerificationResult | undefined;\n    let results: boolean;\n\n    switch (type) {\n        case 'GENERAL':\n            results = !(/[^A-Za-z0-9]/u).test(input);\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_TEXT_MESSAGE\n            }\n            break;\n        case 'ENTITYID':\n            results = (/^[a-z0-9._:/?#@!&()*+,;=-]+$/iu).test(input);\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_ENTITYID_MESSAGE\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line\n            results = (/^https:\\/\\/([a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+)(:\\d{1,5})?(\\/\\S*)?$|^http:\\/\\/localhost(:\\d{1,5})?(\\/\\S*)?$/gu).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : INVALID_URL_MESSAGE\n            }\n            break;\n        case 'x509':\n            try {\n                // strip out white spaces and line breaks\n                const sanitizedCertChainArray = input.replace(/[\\s\\n\\r]/gu, '').split(',');\n\n                // check if all cert chain is properly encoded in base64\n                for (const cert of sanitizedCertChainArray) {\n                    if (!isBase64(cert.trim())) {\n                        return {\n                            status: 'error',\n                            message: INVALID_CERT_MESSAGE\n                        };\n                    }\n                }\n\n                // check cert expiration (verify only the first cert in the chain)\n                const now = new Date();\n                const firstCertInTheChain = sanitizedCertChainArray[0].trim();\n                const certWithHeaders = `-----BEGIN CERTIFICATE-----\\n${firstCertInTheChain.match(/.{1,64}/gu)?.join('\\n')}\\n-----END CERTIFICATE-----`\n                const cert = forge.pki.certificateFromPem(certWithHeaders);\n\n                if (now < cert.validity.notBefore || now > cert.validity.notAfter) {\n                    return {\n                        status: 'error',\n                        message: EXPIRED_CERT_MESSAGE\n                    }\n                }\n\n                verified = {\n                    status: 'default',\n                    message: '',\n                }\n            } catch (e) {\n                return {\n                    status: 'error',\n                    message: INVALID_CERT_MESSAGE\n                }\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n\n    return verified;\n}\n\n/**\n * \n * @param {Object} choices state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @param {String} currentState variable being changed\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\n// eslint-disable-next-line\nexport function isFailureTriggered (choices :UserChoices, currentState :string, validations: ValidationTemplate, setValidations: Function) {\n    let failureTriggered = false;\n    const update: ValidationTemplate = {};\n    Object.keys(validations).forEach(validationKey => {\n        update[validationKey] = {};\n        if (validationKey === currentState) {\n            Object.keys(validations[currentState]).forEach(field => {\n\n                const submittedValue = choices && choices.selections[field];\n                // @ts-ignorer\n                const submittedType = validations[validationKey][field].inputType;\n\n                // @ts-ignore\n                const verificationObject: VerificationResult = verifyInput(submittedValue, submittedType, true);\n\n                if (verificationObject.status !== 'default') {\n                    failureTriggered = true;\n                }\n\n                // @ts-ignore\n                update[validationKey][field] = {\n                    inputType: submittedType,\n                    variant: verificationObject.status,\n                    message: verificationObject.message\n                }\n            });\n        }\n    });\n\n    setValidations(update);\n    return failureTriggered;\n}\n\nexport const getSSOBaseUrl = (chromeApi: any) => {\n    if (chromeApi.getEnvironment() === 'prod') {\n        return \"https://sso.redhat.com/auth/realms/redhat-external/\";\n    }\n    return \"https://sso.stage.redhat.com/auth/realms/redhat-external/\";\n}\n\nexport const getSSOApiUrl = (chromeApi: any, apiPath: string) => {\n    return getSSOBaseUrl(chromeApi) + apiPath;\n}\n\nexport const setupBackTriggerNotification = () => {\n    window.addEventListener(\"popstate\", () => {\n        // eslint-disable-next-line no-alert\n        alert(\"Please note that use of the back arrow on this page will cause you to lose your currently configured data\");\n    })\n}\n"],"names":["className","headingLevel","size","IdpResponseDataInitialState","idpAlias","displayName","enabled","providerId","createdDate","lastUpdatedDate","lastUpdatedBy","ValidationContext","createContext","validations","CUSTOMER_INFORMATION","OIDC_CONFIG","SAML_CONFIG","IMPORT_FROM_FILE","IMPORT_FROM_URL","IMPORT_SAML_FROM_FILE","IMPORT_SAML_FROM_URL","IMPORT_SAML_MANUALLY","setValidations","useValidationContext","context","useContext","Error","CustomerInformation","rootUserChoices","updateStatus","useEffect","updated","inputType","variant","message","Form","Title","Text","FormGroup","onChange","value","selections","target","name","protocol","handleInputSelection","handleChange","role","fieldId","label","id","Tooltip","content","position","Radio","isDisabled","propTypes","resetNextClicked","OidcConfiguration","setSelections","useState","handleSelection","inputMethod","parseVariantValue","TextInput","_event","type","HelperText","HelperTextItem","clientId","clientSecret","SamlConfiguration","ImportFromFile","fileData","setFileData","isRequired","FileUpload","toString","onDataChange","data","err","result","console","error","configFileData","update","browseButtonText","rootValidation","ImportFromUrl","status","current","currentTarget","formatMessage","args","formattedMessage","replace","match","arg","shift","String","index","parseInt","undefined","FlowStep","static","SamlMetadataConstants","IDENTITY_PROVIDER_ENTITY_ID","AUTH_REQUEST_URL","X509_CERTIFICATE","SERVICE_PROVIDER_ISSUER","SamlMetadataMessages","SUCCESS_MSG","SamlMetadataFile","forwardRef","maxKBSize","ref","allowedFileTypes","file","setFile","setValue","filename","setFilename","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isFileSizeRejected","setIsFileSizeRejected","isExpanded","setIsExpanded","isSafe","setIsSafe","clear","useImperativeHandle","getFile","filenamePlaceholder","onFileInputChange","_","reader","FileReader","onerror","FILE_READ_ERROR","onload","event","xmlString","includes","length","test","containsPotentialThreats","INVALID_FILE_TYPE","isFileSizeInvalid","xml","parsedXml","XMLParser","ignoreAttributes","allowBooleanAttributes","attributeNamePrefix","parseAttributeValue","ignorePiTags","parse","keyDescriptors","EntityDescriptor","IDPSSODescriptor","KeyDescriptor","services","SingleSignOnService","idpEntityID","entityDescriptor","extractIdpEntityID","location","Array","isArray","httpPostService","find","service","BINDING","HTTP_POST_BINDING","httpRedirectService","HTTP_REDIRECT_BINDING","LOCATION","extractLocation","certificates","Set","keyDescriptor","x509Data","KEY_INFO","X509_DATA","dsX509Data","DS_KEY_INFO","DS_X509_DATA","certificatesArray","DS_X509_CERTIFICATE","certificate","add","extractX509Certificate","validationMessaging","INVALID_OR_MISSING_IDPENTITYID","INVALID_OR_MISSING_AUTH_REQUEST_URL","INVALID_OR_MISSING_CERTIFICATE","now","Date","certWithHeaders","values","next","join","cert","certificateFromPem","validity","notBefore","notAfter","CERTIFICATE_EXPIRED","e","isValid","from","xmlFileWithRestrictions","FINAL_STEP","FILE_SUCCESSFULLY_LOADED","toFixed","parseError","FILE_PARSING_ERROR","MALICIOUS_FILE_DETECTED","readAsText","onReadStarted","_fileHandle","onReadFinished","onClearClick","dropzoneProps","accept","maxSize","onDropRejected","validated","hideDefaultPreview","FormHelperText","FILE_TOO_LARGE","SAML_XML_REQUIREMENTS","ExpandableSection","toggleText","onToggle","SamlHelperTextMessages","ImportSamlFromFile","samlMetadataFile","setSamlMetadataFile","updateValidations","labelIcon","Popover","triggerAction","bodyContent","Button","onClick","preventDefault","formGroupLabelHelp","serviceProviderIssuer","primeNextStep","AUTHENTICATION_REQUEST_URL","identityProviderEntityId","authenticationRequestsUrl","NO_SPECIAL_CHARS","TextArea","resizeOrientation","x509Certificate","trim","split","map","msg","dangerouslySetInnerHTML","__html","accessToken","orgId","setOrgId","chrome","useChrome","getConfigURL","path","ClipboardCopy","isReadOnly","clickTip","SimpleText","BLANK_VALUE","format","this","preValue","postValue","formatter","AuditDate","date","isNaN","getTime","toLocaleString","year","month","day","hour","minute","hour12","timeZone","oidcData","ssoBaseUrl","Alert","isInline","title","Label","color","icon","issuerUrl","authorizationUrl","tokenUrl","TextContent","component","p","ActionList","headerContent","footerContent","ActionListItem","isDanger","getSSOIdpApiUrl","chromeApi","async","apiToggleIdPStatus","token","auth","getToken","apiStatusUrl","response","fetch","method","referrerPolicy","headers","body","JSON","stringify","ok","statusText","IdpTestingModal","isOpen","onClose","recomputeAppState","primaryModalAction","setPrimaryModalAction","testBtnEnabled","setTestBtnEnabled","idpTestingModalIcon","setIdpTestingModalIcon","idpTestingModalTitle","setIdpTestingModalTitle","idpTestingModalBody","setIdpTestingModalBody","idpTestingModalErrorBody","setIdpTestingModalErrorBody","resetTestingModal","dismissTestingModal","enableIdP","Modal","titleIconVariant","medium","actions","key","window","open","idpAliasJson","idpAliasJsonString","encodeURIComponent","getTestUrl","addEventListener","origin","success","Link","to","errorMsg","hidden","DisableIdpModal","small","ModalBody","ModalFooter","disableIdp","DeleteIdpModal","deleteIdpUrl","apiDeleteIdp","deleteIdp","samlData","milestoneTwoEnabled","milestoneTwoPointFiveEnabled","isTestingModalVisible","toggleTestingModalVisibility","isDisabledModalVisible","toggleIsDisabledModalVisible","isDeleteModalVisible","toggleIsDeleteModalVisible","ENTITY_ID","serviceProviderEntityId","responseData","milestoneTwoFeaturesEnabled","isMTwoandAHalfEnabled","useFlag","providerType","setProviderType","Spinner","Card","isCompact","isLarge","CardBody","IdpNotSetup","setupIDP","wizardEnabled","href","userChoices","setPreviousTriggered","currentState","goToNextStep","goToPrevStep","WizardFooter","W","SubmitFooter","userChoiceData","previous","isLoading","setIsLoading","alerts","setAlerts","throwError","isPlain","timeout","onTimeout","createIdp","apiCreateIdp","then","json","error_description","catch","AlertGroup","isLiveRegion","checkState","setCheckState","Stack","hasGutter","StackItem","Checkbox","isChecked","reload","FlowTemplate","useRef","isConfigured","setIsConfigured","isAllowedToConfigure","setIsAllowedToConfigure","isInit","setIsInit","idpData","setIdpData","isWizardFlowEnabled","apiGetIdp","flowState","setFlowState","previousState","displayed","setDisplayed","hideOIDC","hideSAML","hideImportFromURL","hideImportFromFile","hideImportManually","hideFinish","triggerNextStep","nextStep","newDisplay","pruneChoices","validChoices","choicesKeys","Object","keys","i","setBackTriggered","prevStep","triggerBackStep","PageHeader","PageHeaderTitle","a","iconPosition","PageSection","Provider","Wizard","isProgressive","WizardStep","footer","isHidden","userToken","currentUser","updateUser","adminUser","selfServiceIDP","isSelfServiceIDPEnabled","appAction","parseToken","base64","decodeURIComponent","atob","c","charCodeAt","slice","isAdminUser","is_org_admin","getOrgId","org_id","setStateValue","stateObject","updateFunction","updatedValue","isBase64","str","decoded","decode64","encode64","isFailureTriggered","choices","failureTriggered","forEach","validationKey","field","submittedValue","submittedType","verificationObject","input","required","INVALID_CERT_MESSAGE","verified","results","sanitizedCertChainArray","firstCertInTheChain","verifyInput","getSSOBaseUrl","getEnvironment","getSSOApiUrl","apiPath"],"sourceRoot":""}