{"version":3,"file":"js/User-Management.39cd64454f15ec806109.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/lock-icon.js","webpack:///./src/Components/disabledPage/disabled-page.js","webpack:///./src/Components/utils/general-utils.js","webpack:///./src/Components/userManagement/UserList.js","webpack:///./src/Components/userManagement/modifyUser/DropdownHandler.js","webpack:///./src/Components/userManagement/modifyUser/AddUser.js","webpack:///./src/Components/userManagement/UserManagementController.js","webpack:///./src/Routes/Authentication-Policy/User-Management.js","webpack:///./node_modules/prop-types/factoryWithThrowingShims.js","webpack:///./node_modules/prop-types/index.js","webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const LockIconConfig = {\n  name: 'LockIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const LockIcon = createIcon(LockIconConfig);\n\nexport default LockIcon;","import './disabled-page.scss'\nimport React from 'react';\nimport {\n    Title,\n    Text\n} from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\n\nconst DisabledPage = () => {\n\n    return <div className=\"disabledDiv\">\n        <LockIcon className=\"lockIcon\"/>\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-lg\">This page is temporarily disabled or unavailable at this time</Title>\n        <Text className=\"pf-u-mt-lg\">Please check again at a another time or reach out to Red Hat customer service for additional support</Text>\n    </div>\n}\n\nexport default DisabledPage;\n","export function isAdminUser (token) {\n    // eslint-disable-next-line no-magic-numbers\n    const base64Url = token.split('.')[1];\n    // eslint-disable-next-line require-unicode-regexp\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = JSON.parse(decodeURIComponent(window.atob(base64).split('')\n        .map(\n            (c) => {\n                // eslint-disable-next-line no-magic-numbers\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }\n        )\n        .join('')));\n    return jsonPayload && jsonPayload.is_org_admin;\n}\n\n/**\n *\n * @param {*} value\n * @param {*} key\n * @param {*} stateObject\n * @param {*} updateFunction\n */\n// eslint-disable-next-line max-params\nexport function setStateValue (value, key, stateObject, updateFunction) {\n\n    const updatedValue = {};\n    updatedValue[key] = value;\n    const updated = {\n        ...stateObject,\n        ...updatedValue\n    }\n\n    updateFunction(updated);\n}\n\n/**\n *\n * @param {String} input value to be checked based on the provided type\n * @param {String} type effectively and enum used to specify the type of check we need to run\n * @returns String message to be relayed to the user pertaining to the invalid input\n * // success, warning, error, or default\n */\nexport function verifyInput (input, type, required) {\n    if (required && !input) {\n        return {\n            status: \"error\",\n            message: 'This field can not be left empty'\n        };\n    }\n\n    let verified = {};\n    let results = '';\n\n    switch (type) {\n        case 'GENERAL':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/).test(input);\n\n\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This text is invalid please check for uncommonly used characters'\n            }\n            break;\n        case 'DOMAIN':\n            // eslint-disable-next-line require-unicode-regexp\n            results = (/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g).test(input)\n            verified = {\n                status: results ? 'default' : 'error',\n                message: results ? '' : 'This field needs to be a valid URL'\n            }\n            break;\n        default:\n            verified = {\n                status: 'default',\n                message: ''\n            }\n    }\n    return verified;\n}\n\n/**\n * \n * @param {Object} selections state object containing all of the users input data\n * @param {Object} validations validations object pre-set to govern what the inputs are intended to be\n * @param {function} setValidations function used to update active validations.\n * @return {boolean} represents the current pass fail state for the provided validation set\n */\nexport function processAllInputs (selections, validations, setValidations) {\n    let failureTriggered = false;\n    const update = {};\n    Object.keys(validations).forEach(validationKey => {\n        const submittedValue = selections && selections[validationKey]\n        const submittedType = validations[validationKey].inputType\n\n        const verificationObject = verifyInput(submittedValue, submittedType, true);\n\n        if (verificationObject.status === 'error') {\n            failureTriggered = true;\n        }\n\n        update[validationKey] = {\n            inputType: submittedType,\n            status: verificationObject.status,\n            message: verificationObject.message\n        }\n\n    });\n\n    setValidations(update);\n\n    return failureTriggered;\n}\n","import './UserList.scss';\nimport React, {useEffect, useState, useContext} from 'react';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport {Toolbar, ToolbarItem, ToolbarContent, SearchInput, Button, Pagination, PaginationVariant, Checkbox} from '@patternfly/react-core';\nimport {QueryContext} from './UserManagementController';\nimport PropTypes from 'prop-types';\n\nconst UserList = (props) => {\n    const queryDetails = useContext(QueryContext);\n    const [listData, setListData] = useState([]);\n    const [checkedUsers, setCheckedUsers] = useState({});\n    // eslint-disable-next-line no-magic-numbers\n    const [perPageValue, setPerPageValue] = useState(10);\n    // eslint-disable-next-line no-magic-numbers\n    const [currentPage, setCurrentPage] = useState(0);\n    // eslint-disable-next-line\n    const [resultsCount, setResultsCount] = useState(20)\n\n    const pullUserList = () => {\n        let targetUrl = queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users?\"\n        targetUrl += new URLSearchParams({\n            firstResultIndex: currentPage,\n            maxResults: perPageValue\n        })\n        fetch(targetUrl, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + queryDetails.userToken\n            }\n        })\n            .then(response => response.json())\n            .then(userList => {\n                setListData(userList.body);\n\n                const checkReference = {}\n                // iterate through the result list to populate checked status\n                for (let i = 0; i < userList.body.length; i++) {\n                    const userObj = {\n                        status: userList.body[i].user.status,\n                        username: userList.body[i].user.username,\n                        checked: false\n                    }\n                    const userId = userList.body[i].user.id\n\n                    checkReference[userId] = userObj;\n                }\n                setCheckedUsers(checkReference);\n            })\n    }\n\n    /**\n     * On load pull the user list\n     */\n    useEffect(() => {\n        pullUserList();\n    }, [currentPage]);\n\n    const doNothing = () => {\n        console.log(\"doing nothing\");\n    }\n\n    /**\n     *\n     */\n    const disableUser = () => {\n        let targetForDisable;\n        const checkedList = Object.keys(checkedUsers);\n        for (let i = 0; i < checkedList.length; i++) {\n            if (checkedUsers[checkedList[i]].checked) {\n                targetForDisable = checkedList[i];\n                break;\n            }\n        }\n\n        if (targetForDisable) {\n            // eslint-disable-next-line no-useless-concat\n            fetch(queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users\" + \"/\" + targetForDisable + \"/status\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + queryDetails.userToken\n                },\n                body: JSON.stringify({\n                    \"status\": \"disabled\"\n                })\n\n            })\n                .then(response => response.json())\n                .then(() => {\n                    // fire the queries required to disable all selected users\n                    window.location.reload(false);\n                })\n        }\n    }\n\n    /**\n     * triggered by the edit user button, this function calls the prop passed in that will swap the view to\n     * use edit.\n     */\n    const editUser = () => {\n        let targetForEdit;\n        const checkedList = Object.keys(checkedUsers);\n        for (let i = 0; i < checkedList.length; i++) {\n            if (checkedUsers[checkedList[i]].checked) {\n                targetForEdit = checkedList[i];\n                break;\n            }\n        }\n\n        if (targetForEdit) {\n            // eslint-disable-next-line no-useless-concat\n            fetch(queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users\" + \"/\" + targetForEdit, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + queryDetails.userToken\n                },\n\n            })\n                .then(response => response.json())\n                .then(resp => {\n                    // fire the queries required to disable all selected users\n                    props.triggerEditUser(resp.body);\n                })\n        }\n    }\n\n    /**\n     * Governs what happens when a user clicks a checkbox. Manages the checkbox useState status\n     */\n    const handleCheckbox = (id, checked) => {\n\n        // get the existing state\n        const existing = checkedUsers[id];\n\n        // if we know something has been checked then display the 'disable user', and 'edit user' buttons\n        if (checked) {\n            // reset with checked\n            existing.checked = true;\n        }\n        else {\n            existing.checked = false;\n        }\n\n        setCheckedUsers({...checkedUsers, [id]: existing});\n\n\n    }\n\n    /**\n     *\n     */\n    const handleNextPageClick = () => {\n        setCurrentPage(currentPage + perPageValue);\n    }\n\n    /**\n     *\n     */\n    const handlePrevPageClick = () => {\n        setCurrentPage(currentPage - perPageValue);\n    }\n\n    const ConditionRender = () => {\n        // eslint-disable-next-line no-magic-numbers\n        if (listData.length > 0) {\n            return <div>\n                        <Toolbar id=\"userListToolbar\">\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <SearchInput aria-label=\"Search user list\"/>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={props.triggerAddUser} variant=\"primary\">Add User</Button>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={editUser} variant=\"primary\">Edit User</Button>\n                                </ToolbarItem>\n                                <ToolbarItem>\n                                    <Button onClick={disableUser} variant=\"link\">Disable User</Button>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <TableComposable aria-label=\"Sortable table\">\n                            <Thead>\n                                <Tr>\n                                    <Th\n                                        select={{\n                                            onSelect: () => doNothing(),\n                                            isSelected: doNothing()\n                                        }}\n                                    />\n                                    <Th>Name</Th>\n                                    <Th modifier=\"wrap\">Email</Th>\n                                    <Th modifier=\"wrap\" info={{ tooltip: 'More information ' }}>\n                                        LastName\n                                    </Th>\n                                    <Th modifier=\"wrap\">First Name</Th>\n                                    <Th modifier=\"wrap\">Status</Th>\n                                </Tr>\n                            </Thead>\n                            <Tbody>\n                                {listData.map((userRecord) => (\n                                    <Tr key={userRecord.user.username}>\n                                        <Td>\n                                            <Checkbox\n                                                onChange={(val) => handleCheckbox(userRecord.user.id, val)}\n                                                isChecked={checkedUsers[userRecord.user.id].checked}\n                                                id={userRecord.user.id + '-check'}\n                                            />\n                                        </Td>\n                                        <Td>{userRecord.user.username}</Td>\n                                        <Td>{userRecord.user.email}</Td>\n                                        <Td>{userRecord.user.lastName}</Td>\n                                        <Td>{userRecord.user.firstName}</Td>\n                                        <Td>{userRecord.user.status}</Td>\n                                    </Tr>\n                                ))}\n                            </Tbody>\n                        </TableComposable>\n                        <Pagination\n                            perPageComponent=\"button\"\n                            widgetId=\"bottom-pagination\"\n                            itemCount={resultsCount}\n                            perPage={perPageValue}\n                            variant={PaginationVariant.bottom}\n                            onPerPageSelect={(selection) => { setPerPageValue(selection) }}\n                            onNextClick={handleNextPageClick}\n                            onPreviousClick={handlePrevPageClick}\n                            page={currentPage}\n                        />\n                    </div>\n\n        }\n\n        return <div>spinner ....</div>\n\n    }\n\n    return (\n        <div>\n            <ConditionRender/>\n        </div>\n    )\n}\n\nUserList.propTypes = {\n    triggerEditUser: PropTypes.func,\n    triggerAddUser: PropTypes.func\n\n}\n\nexport default UserList;\n","import React from 'react';\nimport {Dropdown, DropdownItem, DropdownToggle} from \"@patternfly/react-core\";\nimport PropTypes from 'prop-types';\n\n\n/**\n * A subclass to handle all of the bloat that comes with this under patternfly design\n * @param props primarily intended to  pass the array of items provided to it\n * @constructor\n */\nconst DropdownHandler = (props) => {\n    const [isDDOpen, setIsDDOpen] = React.useState(false);\n    const [selection, setSelection] = React.useState(props.defaultText);\n\n    const onDDToggle = (isOpen) => {\n        setIsDDOpen(isOpen);\n    };\n\n    const onDDFocus = () => {\n        const element = document.getElementById(props.idValue);\n        element.focus();\n    };\n    const onDDSelect = () => {\n        setIsDDOpen(false);\n        onDDFocus();\n    };\n\n    return (\n        <Dropdown\n            onSelect={onDDSelect}\n            toggle={\n                <DropdownToggle id={props.idValue} onToggle={onDDToggle}>\n                    {selection}\n                </DropdownToggle>\n            }\n            isOpen={isDDOpen}\n            dropdownItems={props.items.map((val) => {\n                return <DropdownItem key={val} onClick={ () => { props.onSelect(val); setSelection(val); }}>{val}</DropdownItem> })}\n        />\n    )\n}\n\nDropdownHandler.propTypes = {\n    defaultText: PropTypes.string,\n    idValue: PropTypes.string,\n    items: PropTypes.array,\n    onSelect: PropTypes.func\n}\nexport default DropdownHandler;\n","import './AddUser.scss';\nimport DropdownHandler from './DropdownHandler'\nimport React, {useEffect, useState, useContext} from 'react';\nimport {Button, Card, Form, FormGroup, TextInput, CardHeader, CardBody, Checkbox, ActionGroup, Divider, Alert, AlertGroup} from \"@patternfly/react-core\";\nimport {QueryContext} from '../UserManagementController';\nimport PropTypes from 'prop-types';\n\n/**\n * The form page allowing for the creation of new users.\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nconst AddUser = (props) => {\n    const queryDetails = useContext(QueryContext);\n\n    /*\n     * role: organization_administrator\n     * permissions portal_download, portal_system_management, portal_manage_subscriptions, portal_manage_cases\n     */\n\n    const [alerts, setAlerts] = useState([]);\n    const [isEditMode, setIsEditMode] = useState(false);\n\n    // base form data that needs to be sent to account api.\n    const [formData, setFormData] = useState({\n        salutation: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        address: {\n            city: '',\n            country: '',\n            county: '',\n            state: '',\n            streets: [],\n            zipCode: ''\n        },\n        permissions: [''],\n        phone: '',\n        roles: [],\n        username: ''\n    });\n\n    useEffect(() => {\n        // if this prop is set, we know that we are in edit mode\n        if (props.editingUser) {\n            setIsEditMode(true);\n            setFormData(props.editingUser);\n        }\n    }, [])\n\n    const [permsChecks, setPermsChecks] = useState({\n        // eslint-disable-next-line camelcase\n        portal_manage_subscriptions: false,\n        // eslint-disable-next-line camelcase\n        portal_download: false,\n        // eslint-disable-next-line camelcase\n        portal_system_management: false,\n        // eslint-disable-next-line camelcase\n        portal_manage_cases: false,\n        admin: false\n    })\n\n    // base list of provided greetings. this will definitely need reviewing.\n    const greetings = [\n        \"Mr.\",\n        \"Mrs.\",\n        \"Other\"\n    ]\n\n    /**\n     * order matters in the streets selection but we also need to be able to alter the streets array nested in the\n     * parent address object. This simplifies the process.\n     * @param value the input value provided by the user.\n     * @param position the street array position the provided value belongs in.\n     */\n    const handleStreets = (value, position) => {\n        const streetArray = [...formData.address.streets]\n        streetArray[position] = value;\n        const addressObject = {...formData.address}\n        addressObject.streets = streetArray;\n        // eslint-disable-next-line\n        setFormData({...formData, address: addressObject});\n    }\n\n    /**\n     * helper function to shorten jsx logic. allow you to set the address properties in the root state.\n     * @param key The address key recieving an update.\n     * @param value The value provided by the user.\n     */\n    const handleAddress = (key, value) => {\n        const addressData = {...formData.address};\n        addressData[key] = value;\n        // eslint-disable-next-line\n        setFormData({...formData, address: addressData})\n    }\n\n    /**\n     * helper function to take care of dropdown selection.\n     */\n    const handleDropDown = (selection, identifier) => {\n        // eslint-disable-next-line\n        setFormData({...formData, [identifier]: selection})\n    }\n\n    /**\n     * handles the checkbox selection and properly populates the root form data accordingling.\n     */\n    const handlePermsCheckBox = (boxId) => {\n        const existingPerms = {...permsChecks};\n        existingPerms[boxId] = !permsChecks[boxId];\n        setPermsChecks(existingPerms);\n\n        // need to create an array with the currently most active permission set for the user.\n        const permsKeys = Object.keys(existingPerms);\n        const saveablePermsList = [];\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < permsKeys.length; i++) {\n            if (existingPerms[permsKeys[i]] === true) {\n                if (permsKeys[i] === \"admin\") {\n                    const rolesArray = ['organization_administrator'];\n                    // eslint-disable-next-line object-property-newline\n                    setFormData({...formData, roles: rolesArray});\n                }\n                else {\n                    saveablePermsList.push(permsKeys[i])\n                    // eslint-disable-next-line object-property-newline\n                    setFormData({...formData, permissions: saveablePermsList});\n                }\n\n            }\n        }\n\n    }\n\n    /**\n     * handles the submition of the addUser form\n     */\n    const submitForm = () => {\n        // submit query to account api\n        console.log(\"submitting formData object: \")\n        console.log(formData);\n        const updatedForm = {...formData};\n        if (isEditMode) {\n            delete updatedForm.id;\n            delete updatedForm.username;\n            delete updatedForm.status;\n        }\n\n        // alter url to handle add vs edit endpoints\n        let targetUrl;\n        if (isEditMode) {\n            targetUrl = queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users/\" + formData.id;\n        }\n        else {\n            targetUrl = queryDetails.accountAPI + \"/\" + queryDetails.accountID + \"/users\"\n        }\n\n        fetch(targetUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + queryDetails.userToken\n            },\n            body: JSON.stringify(updatedForm)\n        })\n            .then(response => response.json())\n            .then(resp => {\n                if (resp.status) {\n                    // eslint-disable-next-line no-magic-numbers\n                    if (resp.status === 400) {\n                        setAlerts([<Alert title={resp.title} key={resp.title} variant=\"danger\" timeout=\"8000\">{JSON.stringify(resp.errors)}</Alert>])\n                        // eslint-disable-next-line no-magic-numbers\n                        document.getElementsByClassName('pf-c-page__main')[0].scrollTop = 0;\n                    }\n                    // eslint-disable-next-line no-magic-numbers\n                    else if (resp.status === 200) {\n                        props.triggerReturn();\n                    }\n                    else {\n                        setAlerts([<Alert key=\"mainAlert\" title={resp.title} variant=\"danger\" timeout=\"8000\">Unexpected Result</Alert>])\n                        // eslint-disable-next-line no-magic-numbers\n                        document.getElementsByClassName('pf-c-page__main')[0].scrollTop = 0;\n                    }\n                }\n                else if (resp.body) {\n                    props.triggerReturn();\n                }\n\n            })\n\n        // return to previous page on success\n\n        // on error (likely validation) update existing page with toast.\n    }\n\n    return (\n        <div>\n            <Form>\n\n                <div>\n                    <AlertGroup isLiveRegion>\n                        {alerts}\n                    </AlertGroup>\n                </div>\n\n                <Card>\n                    <CardHeader>\n                        Name\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <DropdownHandler\n                                items={greetings}\n                                idValue=\"greetingDropdown\"\n                                defaultText=\"Greeting\"\n                                onSelect={ (val) => { handleDropDown(val, \"salutation\") }}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"First Name\">\n                            <TextInput\n                                id=\"firstName\"\n                                onChange={(value) => { setFormData({...formData, firstName: value}) }}\n                                value={formData.firstName}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Last Name\">\n                            <TextInput\n                                id=\"lastName\"\n                                onChange={(value) => { setFormData({...formData, lastName: value}) }}\n                                value={formData.lastName}\n                            />\n                        </FormGroup>\n                    </CardBody>\n\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Address\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup label=\"Email\">\n                            <TextInput\n                                id=\"email\"\n                                onChange={(value) => { setFormData({...formData, email: value}) }}\n                                value={formData.email}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 1\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address1\" onChange={(value) => { handleStreets(value, 0) }} value={formData.address.streets[0]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 2\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address2\" onChange={(value) => { handleStreets(value, 1) }} value={formData.address.streets[1]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Address Line 3\">\n                            {/* eslint-disable-next-line no-magic-numbers */}\n                            <TextInput id=\"address3\" onChange={(value) => { handleStreets(value, 2) }} value={formData.address.streets[2]}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Postal Code\">\n                            <TextInput\n                                id=\"postalcode\"\n                                onChange = {(value) => { handleAddress('zipCode', value) }}\n                                value={formData.address.zipCode}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"City\">\n                            <TextInput\n                                id=\"city\"\n                                onChange = {(value) => { handleAddress('city', value) }}\n                                value={formData.address.city}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"State\">\n                            <TextInput\n                                id=\"state\"\n                                onChange = {(value) => { handleAddress('state', value) }}\n                                value={formData.address.state}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"County\">\n                            <TextInput\n                                id=\"county\"\n                                onChange = {(value) => { handleAddress('county', value) }}\n                                value={formData.address.county}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Country\">\n                            <TextInput\n                                id=\"country\"\n                                onChange = {(value) => { handleAddress('country', value) }}\n                                value={formData.address.country}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Phone Number\">\n                            <TextInput\n                                id=\"phoneNumber\"\n                                onChange = {(value) => { setFormData({...formData, phone: value}) }}\n                                value={formData.phone}\n                            />\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Red Hat Login\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <TextInput\n                                id=\"login\"\n                                onChange={(value) => { setFormData({...formData, username: value}) }}\n                                value={formData.username}\n                            />\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardHeader>\n                        Permissions\n                    </CardHeader>\n                    <CardBody>\n                        <FormGroup>\n                            <Checkbox\n                                label=\"Manage Support Cases\"\n                                isChecked={permsChecks.portal_manage_cases}\n                                onChange={() => { handlePermsCheckBox(\"portal_manage_cases\") }}\n                                id=\"controlled-check-1\"\n                                name=\"check1\"\n                            />\n                            <Checkbox\n                                label=\"Download Software and Updates\"\n                                isChecked={permsChecks.portal_download}\n                                onChange={() => { handlePermsCheckBox(\"portal_download\") }}\n                                id=\"controlled-check-2\"\n                                name=\"check2\"\n                            />\n                            <Checkbox\n                                label=\"View/Renew Subscription Information\"\n                                isChecked={permsChecks.portal_system_management}\n                                onChange={() => { handlePermsCheckBox(\"portal_system_management\") }}\n                                id=\"controlled-check-3\"\n                                name=\"check3\"\n                            />\n                            <Checkbox\n                                label=\"Manage Your Subscriptions\"\n                                isChecked={permsChecks.portal_manage_subscriptions}\n                                onChange={() => { handlePermsCheckBox(\"portal_manage_subscriptions\") }}\n                                id=\"controlled-check-4\"\n                                name=\"check4\"\n                            />\n\n                            <Divider id=\"adminDivider\" component=\"div\"/>\n\n                            <Checkbox\n                                label=\"Account Administrator\"\n                                isChecked={permsChecks.admin}\n                                onChange={() => { handlePermsCheckBox(\"admin\") }}\n                                id=\"admin\"\n                                name=\"check5\"\n                            />\n\n                        </FormGroup>\n\n                    </CardBody>\n                </Card>\n\n                <ActionGroup>\n                    <Button onClick={submitForm} variant=\"primary\">\n                        Submit\n                    </Button>\n                    <Button onClick={props.triggerReturn} variant=\"link\">\n                        Cancel\n                    </Button>\n                </ActionGroup>\n            </Form>\n\n        </div>\n    )\n}\n\nAddUser.propTypes = {\n    editingUser: PropTypes.bool,\n    triggerReturn: PropTypes.func\n}\n\n/**\n * Saving this in case deemed neccessary. This was on UGC but account api doesnt accept it.\n * <Card>\n *                     <CardHeader>\n *                         Preferred Language\n *                     </CardHeader>\n *                     <CardBody>\n *                         <FormGroup>\n *                             <DropdownHandler\n *                                 items={[\"English\", \"Spanish\", \"Mandorin\"]}\n *                                 idValue=\"defaultLanguageDropdown\"\n *                                 defaultText=\"Language\"\n *                                 onSelect={handleDropDown}\n *                             />\n *                         </FormGroup>\n *                         <FormGroup>\n *                             <DropdownHandler\n *                                 items={[\"EST\", \"PST\", \"Central\"]}\n *                                 idValue=\"timezoneDropdown\"\n *                                 defaultText=\"Time Zone\"\n *                                 onSelect={handleDropDown}\n *                             />\n *                         </FormGroup>\n *                     </CardBody>\n *                 </Card>\n */\n\nexport default AddUser;\n","import './UserManagementController.scss';\nimport React, {useEffect, useState, createContext} from 'react';\nimport {PageHeader, PageHeaderTitle} from \"@redhat-cloud-services/frontend-components/PageHeader\";\nimport {Divider, PageSection} from \"@patternfly/react-core\";\nimport UserList from \"./UserList\";\nimport AddUser from './modifyUser/AddUser'\n\nexport const QueryContext = createContext(null);\n\nconst UserManagementController = () => {\n\n    let targetSSO;\n\n    if (window.location.host === \"stage.foo.redhat.com:1337\" || window.location.host === \"console.stage.redhat.com\") {\n        targetSSO = \"https://api.access.stage.redhat.com/account/v1/accounts\";\n    }\n    else {\n        targetSSO = \"https://api.access.redhat.com/account/v1/accounts\";\n    }\n\n    // stores the required information produce queries. Gets stuffed into the context for use in other modules.\n    const [queryDetails, setQueryDetails] = useState({\n        accountAPI: targetSSO,\n        accountID: \"\",\n        userToken: \"\"\n    });\n    const queryBase = {\n        accountAPI: targetSSO,\n        accountID: \"\",\n        userToken: \"\",\n    }\n\n    const [displayedPage, setDisplayedPage] = useState({\n        userList: true,\n        addUser: false,\n        editUser: false\n    })\n\n    // needed to pass edit target from the userList to the addPage. editTarget will be a string with the user's id\n    const [editTarget, setEditTarget] = useState()\n\n    /**\n     * pulls the user's account list for this user from the account api service\n     */\n    const getAccountId = () => {\n        // eslint-disable-next-line no-undef\n        insights.chrome.auth.getToken().then(token => {\n            queryBase.userToken = token;\n            // trigger fetch with the existing user's token\n            fetch(queryDetails.accountAPI, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    const bodyPosition = 0;\n                    const accountData = data.body[bodyPosition];\n                    queryBase.accountID = accountData.id;\n                    setQueryDetails(queryBase);\n                })\n        });\n    }\n\n    /**\n     * Passed via props to the userlist to govern the displaying of the addUser page.\n     */\n    const showAddUserPage = () => {\n        setDisplayedPage({\n            userList: false,\n            addUser: true,\n            editUser: false\n        })\n    }\n\n\n    /**\n     * Passed via props to the userlist to govern the displaying of the addUser page.\n     */\n    const showEditUserPage = () => {\n        setDisplayedPage({\n            userList: false,\n            addUser: false,\n            editUser: true\n        })\n    }\n\n    /**\n     * helpful for back/cancel buttons\n     */\n    const showUserListPage = () => {\n        setDisplayedPage({\n            userList: true,\n            addUser: false,\n            editUser: false\n        })\n    }\n\n    /**\n     * used to run the split functionality of what happens when an edit is triggered.\n     * @param userObject\n     */\n    const handleEditSelection = (userObject) => {\n        setEditTarget(userObject)\n        showEditUserPage();\n    }\n\n\n    /**\n     * conditional statement to handle the async nature of the initial js queries\n     */\n        // eslint-disable-next-line consistent-return\n    const BaseRender = () => {\n        if (queryDetails.accountID && queryDetails.accountID.length > 0) {\n            if (displayedPage.userList) {\n                return <UserList\n                            triggerAddUser={showAddUserPage}\n                            triggerEditUser={handleEditSelection}\n                            triggerCancel={showUserListPage}\n                        />;\n            }\n            else if (displayedPage.addUser) {\n                return <AddUser triggerReturn={showUserListPage}/>;\n            }\n            else if (displayedPage.editUser) {\n                return <AddUser triggerReturn={showUserListPage} editingUser={editTarget} />\n            }\n        }\n        else {\n            return <div>Loading Spinner...</div>\n        }\n    }\n\n    useEffect(() => {\n        getAccountId();\n    }, []);\n\n    return (\n        <div>\n            <PageHeader>\n                <PageHeaderTitle title=\"User Management\" className=\"pf-u-mb-lg\" />\n                <p> Manage organization users and privelages</p>\n            </PageHeader>\n            <Divider/>\n            <PageSection>\n                <QueryContext.Provider value={queryDetails}>\n                    <BaseRender/>\n                </QueryContext.Provider>\n            </PageSection>\n\n        </div>\n\n    )\n}\n\nexport default UserManagementController;\n","import React, { useState, useEffect } from 'react';\nimport UserManagementController from \"../../Components/userManagement/UserManagementController\";\nimport {isAdminUser} from \"../../Components/utils/general-utils\";\nimport DisabledPage from \"../../Components/disabledPage/disabled-page\";\nimport {useFlag} from '@unleash/proxy-client-react';\n\n\nconst UserManagement = () => {\n    let userToken = null;\n    const [currentUser, updateUser] = useState({\n        adminUser: true,\n        renderedPage: <UserManagementController />\n    })\n    const isUserManagementEnabled = useFlag('iamconsole.usermanagement.enabled');\n\n    useEffect(() => {\n        // insights?.chrome?.appAction?.('identity-provider-integration');\n        // eslint-disable-next-line no-undef\n        insights.chrome.auth.getToken().then(token => {\n            userToken = token;\n            // if the user is in fact and admin user then render TwoFactorCheck\n            if (isAdminUser(userToken) && isUserManagementEnabled) {\n                updateUser({\n                    adminUser: true,\n                    renderedPage: <UserManagementController />\n                })\n            }\n\n            // check to see if 2fa feature flag is set. if not then render the proper error page\n            if (!isUserManagementEnabled) {\n                updateUser({\n                    adminUser: false,\n                    renderedPage: <DisabledPage/>\n                })\n            }\n\n        })\n    }, []);\n\n\n    return (\n        <React.Fragment>\n            {currentUser.renderedPage}\n        </React.Fragment>\n    )\n}\n\nexport default UserManagement;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _slicedToArray(r, e) {\n  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();\n}\nexport { _slicedToArray as default };","function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nexport { _arrayWithHoles as default };","function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nexport { _iterableToArrayLimit as default };","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableRest as default };"],"names":["LockIcon","name","height","width","svgPath","yOffset","xOffset","React","className","Title","headingLevel","size","Text","isAdminUser","token","base64","split","replace","jsonPayload","JSON","parse","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","is_org_admin","setStateValue","value","key","stateObject","updateFunction","updatedValue","_objectSpread","processAllInputs","selections","validations","setValidations","failureTriggered","update","Object","keys","forEach","validationKey","submittedValue","submittedType","inputType","verificationObject","input","type","status","message","verified","results","test","verifyInput","UserList","props","queryDetails","useContext","QueryContext","_useState","useState","_useState2","_slicedToArray","listData","setListData","_useState3","_useState4","checkedUsers","setCheckedUsers","_useState5","_useState6","perPageValue","setPerPageValue","_useState7","_useState8","currentPage","setCurrentPage","_useState9","_useState10","resultsCount","useEffect","targetUrl","accountAPI","accountID","URLSearchParams","firstResultIndex","maxResults","fetch","method","headers","userToken","then","response","json","userList","body","checkReference","i","length","userObj","user","username","checked","id","doNothing","console","log","disableUser","targetForDisable","checkedList","stringify","location","reload","editUser","targetForEdit","resp","triggerEditUser","handleNextPageClick","handlePrevPageClick","ConditionRender","Toolbar","ToolbarContent","ToolbarItem","SearchInput","Button","onClick","triggerAddUser","variant","TableComposable","Thead","Tr","Th","select","onSelect","isSelected","modifier","info","tooltip","Tbody","userRecord","Td","Checkbox","onChange","val","existing","_defineProperty","isChecked","email","lastName","firstName","Pagination","perPageComponent","widgetId","itemCount","perPage","PaginationVariant","bottom","onPerPageSelect","selection","onNextClick","onPreviousClick","page","propTypes","PropTypes","DropdownHandler","_React$useState","_React$useState2","isDDOpen","setIsDDOpen","_React$useState3","defaultText","_React$useState4","setSelection","Dropdown","document","getElementById","idValue","focus","toggle","DropdownToggle","onToggle","isOpen","dropdownItems","items","DropdownItem","AddUser","alerts","setAlerts","isEditMode","setIsEditMode","salutation","address","city","country","county","state","streets","zipCode","permissions","phone","roles","formData","setFormData","editingUser","portal_manage_subscriptions","portal_download","portal_system_management","portal_manage_cases","admin","permsChecks","setPermsChecks","handleStreets","position","streetArray","_toConsumableArray","addressObject","handleAddress","addressData","handlePermsCheckBox","boxId","existingPerms","permsKeys","saveablePermsList","push","Form","AlertGroup","isLiveRegion","Card","CardHeader","CardBody","FormGroup","label","TextInput","Divider","component","ActionGroup","updatedForm","Alert","title","timeout","errors","getElementsByClassName","scrollTop","triggerReturn","createContext","targetSSO","host","setQueryDetails","queryBase","addUser","displayedPage","setDisplayedPage","editTarget","setEditTarget","showAddUserPage","showUserListPage","handleEditSelection","userObject","BaseRender","triggerCancel","insights","chrome","auth","getToken","data","accountData","PageHeader","PageHeaderTitle","PageSection","Provider","adminUser","renderedPage","UserManagementController","currentUser","updateUser","isUserManagementEnabled","useFlag","DisabledPage","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","propName","componentName","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","r","e","Array","isArray","l","t","Symbol","iterator","n","u","a","f","o","call","next","done","unsupportedIterableToArray","TypeError"],"sourceRoot":""}