(self.webpackChunkiam=self.webpackChunkiam||[]).push([[600],{68994:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var r=n(21527),a=n.n(r),i=n(22021),o=n(22069),l=n(77334);const c=()=>a().createElement("div",{className:"disabledDiv"},a().createElement(l.Ay,{className:"lockIcon"}),a().createElement(i.h,{headingLevel:"h2",size:"xl",className:"pf-u-mt-lg"},"This page is temporarily disabled or unavailable at this time"),a().createElement(o.E,{className:"pf-u-mt-lg"},"Please check again at a another time or reach out to Red Hat customer service for additional support"))},11542:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>ye});var r=n(21527),a=n.n(r),i=n(88072),o=n(7851),l=n(24209),c=n(67546),s=n(22069),d=n(23285),u=n(73539),m=n(22021),p=n(73133),E=n(56780),h=n(59257),f=n(9937),v=n(94747),y=n(5556),g=n.n(y);const I=({resetNextClicked:e,rootUserChoices:t,rootValidation:n,updateStatus:i})=>{const[o,l]=(0,r.useState)({custName:{inputType:"GENERAL",status:"default",message:""},protocol:{inputType:"RADIO",status:"default",message:""}}),c=r=>{((e,t,n,r,a,i,o)=>{o(!1),t.current||(t.current={}),t.current.selections||(t.current.selections={}),t.current.selections[e.target.id]=e.target.value;const l=(0,v.SS)(t.current.selections,n,r);a.current||(a.current={}),a.current.CUST_INFO=!l,!l&&t.current.selections.protocol&&i(t.current.selections.protocol)})(r,t,o,l,n,i,e)};return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Customer Information"),a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"All fields are required"),a().createElement(E.g,{label:"Identity provider display name",onChange:e=>{c(e)},fieldId:"custName"},a().createElement(d.ks,{type:"text",id:"custName"}),a().createElement(h.E,null,a().createElement(f.j,null,"Enter a personalized display name for your Identity Provider (IdP). It is important to use unique names for your IdP display name, since multiple Red Hat accounts can be linked to one IdP."))),a().createElement(E.g,{onChange:e=>{c(e)},role:"radiogroup",fieldId:"authType",label:"Choose identity provider protocol",id:"protocol"},a().createElement(u.s,{name:"authType",id:"protocol",label:"OpenID Connect",value:"OIDC_CONFIG"}),a().createElement(u.s,{name:"authType",id:"protocol",label:"Saml 2.0",value:"SAML_CONFIG"})))};I.propTypes={resetNextClicked:g().func,rootUserChoices:g().object,rootValidation:g().object,nextClicked:g().func,updateStatus:g().func};const S=I,C=({updateStatus:e,resetNextClicked:t,rootValidation:n,rootUserChoices:i})=>{const[o,l]=(0,r.useState)(),[c,m]=(0,r.useState)({clientId:{inputType:"GENERAL",status:"default",message:""},clientSecret:{inputType:"GENERAL",status:"default",message:""},inputMethod:{inputType:"RADIO",status:"default",message:""}}),y=r=>{t(!1),i.current.selections[r.target.id]=r.target.value;const a=(0,v.SS)(i.current.selections,c,m);n.current.OIDC_CONFIG=!a,!a&&i.current.selections.inputMethod&&e(i.current.selections.inputMethod)};return a().createElement(p.l,null,a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"All fields are required"),a().createElement(E.g,{label:"Client ID/SP entity ID",onChange:e=>{y(e)}},a().createElement(d.ks,{onChange:(e,t)=>(0,v.Xr)(t,"clientId",o,l),type:"text",id:"clientId"}),a().createElement(h.E,null,a().createElement(f.j,null,"The Red Hat client identifier registered within the customer identity provider. Your indentity provider generates this client ID when a Red Hat client is added"))),a().createElement(E.g,{label:"Client Secret",onChange:e=>{y(e)}},a().createElement(d.ks,{onChange:(e,t)=>(0,v.Xr)(t,"clientSecret",o,l),type:"text",id:"clientSecret"}),a().createElement(h.E,null,a().createElement(f.j,null,"Enter the client secret associated with your client identifier  by your identity provider"))),a().createElement(E.g,{onChange:e=>{y(e)},label:"Load external IDP metadata from a config file or download it from a url"},a().createElement(u.s,{name:"inputChoice",id:"inputMethod",label:"Import from URL",value:"IMPORT_FROM_URL"}),a().createElement(u.s,{name:"inputChoice",id:"inputMethod",label:"Import from file",value:"IMPORT_FROM_FILE"})))};C.propTypes={resetNextClicked:g().func,rootUserChoices:g().object,rootValidation:g().object,nextClicked:g().func,updateStatus:g().func};const b=C,R=({updateStatus:e,resetNextClicked:t,rootValidation:n,rootUserChoices:i})=>{const[o,l]=(0,r.useState)({inputMethod:{inputType:"RADIO",status:"default",message:""}});return a().createElement(p.l,null,a().createElement(E.g,{onChange:r=>{(r=>{t(!1),i.current.selections[r.target.id]=r.target.value;const a=(0,v.SS)(i.current.selections,o,l);n.current.SAML_CONFIG=!a,!a&&i.current.selections.inputMethod&&e(i.current.selections.inputMethod)})(r)},label:"Load external IDP metadata from a config file or download it from a url",isRequired:!0},a().createElement(u.s,{name:"inputChoice",id:"inputMethod",label:"Import from URL",value:"IMPORT_SAML_FROM_URL"}),a().createElement(u.s,{name:"inputChoice",id:"inputMethod",label:"Import from file",value:"IMPORT_SAML_FROM_FILE"})))};R.propTypes={resetNextClicked:g().func,rootUserChoices:g().object,rootValidation:g().object,nextClicked:g().func,updateStatus:g().func};const L=R;var A=n(62382),T=n(38805),N=n.n(T);const O=({updateStatus:e,rootValidation:t,rootUserChoices:n})=>{const[i,o]=(0,r.useState)("");return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Import from file"),a().createElement(E.g,{label:"File Upload",isRequired:!0},a().createElement(A.e,{value:i.toString(),id:"text-file-with-edits-allowed",type:"text",onDataChange:(r,a)=>{o(a),N().parseString(a,((r,a)=>{r?console.error(r):a&&(e("FINAL_STEP"),n.current.current.configFileData=a,t.current.IMPORT_FROM_FILE=!0)}))},browseButtonText:"Upload"})),a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"An XML formatted file detailing the configuration of your IDP, minimally including the OpenID Connect Identity provider discovery URL"))};O.propTypes={rootUserChoices:g().object,rootValidation:g().object,updateStatus:g().func};const k=O,F=({updateStatus:e,resetNextClicked:t,rootValidation:n,rootUserChoices:i})=>{const[o,l]=(0,r.useState)({importURL:{inputType:"DOMAIN",status:"default",message:""}});return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Import from URL"),a().createElement(E.g,{label:"URL"},a().createElement(d.ks,{type:"text",id:"importURL",onChange:r=>{(r=>{t(!1),i.current.selections[r.currentTarget.id]=r.currentTarget.value;const a=(0,v.SS)(i.current.selections,o,l);n.current.IMPORT_FROM_URL=!a,a||e("FINAL_STEP")})(r)}}),a().createElement(h.E,null,a().createElement(f.j,null,"import metadata from a remote identity provider discovery descriptor"))))};F.propTypes={resetNextClicked:g().func,rootUserChoices:g().object,rootValidation:g().object,nextClicked:g().func,updateStatus:g().func};const U=F,M=({updateStatus:e,resetNextClicked:t,rootValidation:n,rootUserChoices:i})=>{const[o,l]=(0,r.useState)("");return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Import from file"),a().createElement(E.g,{label:"File Upload",isRequired:!0},a().createElement(A.e,{value:o.toString(),id:"text-file-with-edits-allowed",type:"text",filenamePlaceholder:"Drag and drop a file or upload one",onDataChange:(t,r)=>{l(r),N().parseString(r,((t,r)=>{t?console.error("failed to parse xml file: "+t):r&&(e("FINAL_STEP"),i.current.current.configFileData=r,n.current.IMPORT_SAML_FROM_FILE=!0)}))},browseButtonText:"Upload"})),a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"A XML formatted file detailing the configuration of your IDP"))};M.propTypes={rootUserChoices:g().object,rootValidation:g().object,updateStatus:g().func};const D=M,_=({updateStatus:e,resetNextClicked:t,rootValidation:n,rootUserChoices:i})=>{const[o,l]=(0,r.useState)({importURL:{inputType:"DOMAIN",status:"default",message:""}});return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Import from URL"),a().createElement(E.g,{label:"URL"},a().createElement(d.ks,{type:"text",id:"importURL",onChange:r=>{(r=>{t(!1),i.current.selections[r.currentTarget.id]=r.currentTarget.value;const a=(0,v.SS)(i.current.selections,o,l);n.current.IMPORT_SAML_FROM_URL=!a,a||e("FINAL_STEP")})(r)}}),a().createElement(h.E,null,a().createElement(f.j,null,"import metadata from a remote identity provider discovery descriptor"))))};_.propTypes={resetNextClicked:g().func,rootUserChoices:g().object,rootValidation:g().object,nextClicked:g().func,updateStatus:g().func};const x=_;var P=n(56165);const w=({updateStatus:e,redirectDomain:t})=>((0,r.useEffect)((()=>{e("VALIDATE_STEP")}),[]),a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Configure URLs"),a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"Some Identity Provider Services require additional configuration when enabling third party single sign on. Please review the following information and verify that these are filled in where required in your company IDP."),a().createElement(E.g,{label:"Identifier (Entity ID)"},a().createElement(P.Ck,{isReadOnly:!0,clickTip:"copied"},"https://sso.redhat.com/auth/realms/redhat-external")),a().createElement(E.g,{label:"Sign on URL"},a().createElement(P.Ck,{isReadOnly:!0,clickTip:"copied"},"https://sso.redhat.com/auth/realms/redhat-external/protocol/saml")),a().createElement(E.g,{label:"Redirect URL or ACS (Assertion Consumption Service) URL"},a().createElement(P.Ck,{isReadOnly:!0,clickTip:"copied"},"https://sso.redhat.com/auth/realms/redhat-external/broker/"+{redirectDomain:t}+"/endpoint"))));w.propTypes={updateStatus:g().func,redirectDomain:g().string};const G=w;var V=n(83579),z=n(58168),H=n(72583);const j=({updateStatus:e})=>((0,r.useEffect)((()=>{e("VALIDATESTEP")}),[]),a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h2"},"Test your identity provider"),a().createElement(s.E,{className:"pf-u-color-400 pf-u-font-size-sm"},"Test your identity provider integration before enabling it for your entire organization"),a().createElement(V.B8,null,a().createElement(z.c,null,"Click the button to initiate login redirect to your identity provider"),a().createElement(z.c,null,"Log in with your identity provider user your company Single Sign-on credentials"),a().createElement(z.c,null,"You will be redirected back to identity provider integration configuration where you can then enable it for your entire organization")),a().createElement(s.E,null,"If you encounter any errors or are having trouble, contact",a().createElement(H.$n,{variant:"link",href:"www.google.com",target:"_blank",component:"a",isInline:!0,className:"pf-u-ml-xs"},"CustomerService"))));j.propTypes={updateStatus:g().func};const $=j;var q=n(34091),W=n(80168),B=n(61864),Y=n(30782),X=n(51976),J=n(31358),Z=n(70358),K=n(20881);const Q=({oidcData:e})=>{const t=(0,K.A)(),n=e=>{const n=(0,v.Gw)(t)+e;window.open(n,"_blank")};return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h1"},e.displayName),a().createElement(E.g,{label:"Issuer",fieldId:"oidc-issuer",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"The issuer is used to validate tokens generated by the identity provider and allows additional security for your organization. This value is optional but recommended.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"text",id:"oidc-issuer-clipboard",name:"oidc-issuer-clipboard",isReadOnly:!0},e.issuerUrl)),a().createElement(E.g,{label:"Client ID",fieldId:"oidc-client-id",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"The client ID registered with the identity provider.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"text",id:"oidc-client-id-clipboard",name:"oidc-client-id-clipboard",isReadOnly:!0},e.clientId),a().createElement(B.e,null,a().createElement(h.E,null,a().createElement(f.j,null,"Spaces and special characters are allowed here.")))),a().createElement(E.g,{label:"Client Secret",fieldId:"oidc-client-secret",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"The client secret registered with the identity provider.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"password",id:"oidc-client-id-clipboard",name:"oidc-client-id-clipboard",isReadOnly:!0},e.clientSecret)),a().createElement(E.g,{label:"Authorization URL",fieldId:"oidc-authorization-url-id",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"URL that performs authentication of the end-user.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"text",id:"oidc-authorization-url-clipboard",name:"oidc-authorization-url-clipboard",isReadOnly:!0},e.authorizationUrl)),a().createElement(E.g,{label:"Token URL",fieldId:"oidc-token-url-id",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"URL where an authorization code can be exchanged for an access token and ID token.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"text",id:"oidc-token-url-clipboard",name:"oidc-token-url-clipboard",isReadOnly:!0},e.tokenUrl)),a().createElement(m.h,{headingLevel:"h3"},"URLs required for identity provider configuration"),a().createElement(X.n,null,a().createElement(s.E,{component:s.Y.p},"Use these URLs to assist in completing setup within your identity provider."),a().createElement(s.E,{className:"pf-v5-u-active-color-100 customUrl",component:s.Y.p,onClick:()=>n(".well-known/openid-configuration")},"Service provider metadata URL",a().createElement(Y.A,{triggerAction:"hover",bodyContent:a().createElement("div",null,"Service provider metadata used to integrate sso.redhat.com with your identity provider.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))),a().createElement(s.E,{className:"pf-v5-u-active-color-100 customUrl",component:s.Y.p,onClick:()=>n(`broker/${e.idpAlias}/endpoint`)},"Redirect URL / Assertion Consumption Service (ACS) URL",a().createElement(Y.A,{triggerAction:"hover",bodyContent:a().createElement("div",null,"The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null))))),a().createElement(q.l,null,a().createElement(Y.A,{triggerAction:"hover","aria-label":"Hoverable popover",headerContent:a().createElement("div",null,"Read-Only"),bodyContent:a().createElement("div",null,"This page currently shows a read-only version of your configuration. Forthcoming enhancements will provide the ability to edit."),footerContent:""},a().createElement(W.a,null,a().createElement(H.$n,{isDisabled:!0},"Save"))),a().createElement(W.a,null,a().createElement(H.$n,{isDisabled:!0,variant:"link"},"Cancel"))))},ee=({samlData:e})=>{const t=(0,K.A)(),n=e=>{const n=(0,v.Gw)(t)+e;window.open(n,"_blank")};return a().createElement(p.l,null,a().createElement(m.h,{headingLevel:"h1"},e.displayName),a().createElement(E.g,{label:"Identity provider entityID",fieldId:"saml-entity-id",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"The entityID attribute can be found in your SAML metadata configuration")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{type:"text",id:"saml-entity-id-clipboard",name:"saml-entity-id-clipboard",isReadOnly:!0},e.identityProviderEntityId),a().createElement(B.e,null,a().createElement(h.E,null,a().createElement(f.j,null,"The entityID used to validate the Issuer for received SAML assertions.")))),a().createElement(E.g,{label:"Single Sign-on authentication request URL",fieldId:"saml-authn-request-url"},a().createElement(P.Ck,{type:"text",id:"saml-authn-request-url-clipboard",name:"saml-authn-request-url-clipboard",isReadOnly:!0},e.authenticationRequestsUrl),a().createElement(B.e,null,a().createElement(h.E,null,a().createElement(f.j,null,"The URL that will be used to send SAML AuthN Requests.")))),a().createElement(E.g,{label:"x509 certificate",fieldId:"saml-x509-certificate",labelIcon:a().createElement(Y.A,{bodyContent:a().createElement("div",null,"A PEM certificate that is used to check for signatures.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))},a().createElement(P.Ck,{id:"saml-x509-certificate-clipboard",name:"saml-x509-certificate-clipboard",variant:P.$X.expansion,isReadOnly:!0,isExpanded:!0},e.x509Certificate),a().createElement(B.e,null,a().createElement(h.E,null,a().createElement(f.j,null,"A Base64 encoded certificate must not include the certificate preamble/ending",a().createElement("br",null),"(-----BEGIN/END CERTIFICATE-----)")))),a().createElement(m.h,{headingLevel:"h3"},"URLs required for identity provider configuration"),a().createElement(X.n,null,a().createElement(s.E,{component:s.Y.p},"Use these URLs to assist in completing setup within your identity provider."),a().createElement(s.E,{className:"pf-v5-u-active-color-100 customUrl",component:s.Y.p,onClick:()=>n(`broker/${e.idpAlias}/endpoint/descriptor`)},"Service provider metadata URL",a().createElement(Y.A,{triggerAction:"hover",bodyContent:a().createElement("div",null,"Service provider metadata used to integrate sso.redhat.com with your identity provider.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null)))),a().createElement(s.E,{className:"pf-v5-u-active-color-100 customUrl",component:s.Y.p,onClick:()=>n(`broker/${e.idpAlias}/endpoint`)},"Redirect URL / Assertion Consumption Service (ACS) URL",a().createElement(Y.A,{triggerAction:"hover",bodyContent:a().createElement("div",null,"The redirect URL to use when configuring your identity provider. This represents your company’s SSO Portal where users authenticate to Red Hat.")},a().createElement(H.$n,{variant:"plain",type:"button",onClick:e=>e.preventDefault(),className:Z.A.formGroupLabelHelp},a().createElement(J.Ay,null))))),a().createElement(q.l,null,a().createElement(Y.A,{triggerAction:"hover","aria-label":"Hoverable popover",headerContent:a().createElement("div",null,"Read-Only"),bodyContent:a().createElement("div",null,"This page currently shows a read-only version of your configuration. Forthcoming enhancements will provide the ability to edit."),footerContent:""},a().createElement(W.a,null,a().createElement(H.$n,{isDisabled:!0},"Save"))),a().createElement(W.a,null,a().createElement(H.$n,{isDisabled:!0,variant:"link"},"Cancel"))))};var te=n(60915),ne=n(983),re=n(5081);const ae=({responseData:e})=>{const[t,n]=(0,r.useState)(a().createElement(re.y,null));return(0,r.useEffect)((()=>{"saml-improved"===e.providerId?n(a().createElement(ee,{samlData:e})):"oidc-improved"===e.providerId&&n(a().createElement(Q,{oidcData:e}))}),[e]),a().createElement(a().Fragment,null,a().createElement(te.Z,{isCompact:!1,isLarge:!0},a().createElement(ne.b,null,t)))};var ie=n(3913);const oe=({setupIDP:e})=>a().createElement("div",{className:"notSetupDiv"},a().createElement(ie.Ay,{className:"cubesIcon"}),a().createElement(m.h,{headingLevel:"h2",size:"xl",className:"pf-u-mt-lg"},"Identity provider not setup"),a().createElement(s.E,{className:"pf-u-mt-md"},"You haven't set up an identity provider for your organization"),a().createElement(H.$n,{className:"pf-u-mt-lg",variant:"primary",onClick:e},"Set up an identity provider"));oe.propTypes={setupIDP:g().func};const le=oe;var ce=n(94698),se=n(76882);const de=({valid:e,next:t})=>{const{goToNextStep:n,goToPrevStep:r}=(0,ce.CV)();return a().createElement(se.W,null,a().createElement(H.$n,{onClick:()=>{e?n():t(!0)},disabled:e},"Next"),a().createElement(H.$n,{variant:"secondary",onClick:r},"Back"))},ue=({userChoiceData:e})=>{const{goToNextStep:t,goToPrevStep:n}=(0,ce.CV)(),[r,i]=a().useState(!1);return a().createElement(se.W,null,a().createElement(H.$n,{onClick:async()=>{console.log("Submitting with this data: "+JSON.stringify(e,null,2)),i(!0),await new Promise((e=>setTimeout(e,2e3))),i(!1),t()},isLoading:r},"Next"),a().createElement(H.$n,{variant:"secondary",onClick:n},"Back"))};ue.propTypes={userChoiceData:g().object};const me=ue;var pe=n(27565);const Ee=({accessToken:e})=>{const t=(0,r.useRef)({current:{},selections:{}}),[n,d]=(0,r.useState)(!0),[u,m]=(0,r.useState)(!0),p=(0,v.J1)((0,K.A)(),"apis/organizations/v1/identity-providers"),[E,h]=(0,r.useState)({idpAlias:"",providerId:"",displayName:"",enabled:""});(0,r.useEffect)((()=>{fetch(p,{method:"GET",referrerPolicy:"no-referrer",headers:{"Content-Type":"application/json",Authorization:"Bearer "+e}}).then((e=>e.json())).then((e=>{"oidc-improved"!==e.providerId&&"saml-improved"!==e.providerId||(h(e),d(!0))})).catch((e=>{console.error("Error: ",e)}))}),[]);const f=(0,r.useRef)({CUST_INFO:!1,OIDC_CONFIG:!1,SAML_CONFIG:!1,IMPORT_FROM_FILE:!1,IMPORT_FROM_URL:!1,IMPORT_SAML_FROM_FILE:!1,IMPORT_SAML_FROM_URL:!1}),[y,g]=(0,r.useState)({currentState:"CUSTOMERINFORMATION",previousState:"",nextState:""}),[I,C]=(0,r.useState)({hideCustomerInformation:!1,hideOIDC:!0,hideSAML:!0,hideImportFromURL:!0,hideImportFromFile:!0,hideFinish:!0,hideValidate:!0}),[R,A]=(0,r.useState)(!1),T=e=>{let t;switch(e){case"OIDC_CONFIG":t={...I},t.hideOIDC=!1,C(t),g({currentState:e,previousState:"CUSTOMER_INFORMATION",nextState:""});break;case"SAML_CONFIG":t={...I},t.hideSAML=!1,C(t),g({currentState:e,previousState:"CUSTOMER_INFORMATION",nextState:""});break;case"IMPORT_FROM_FILE":t={...I},t.hideImportFromFile=!1,C(t),g({currentState:e,previousState:" OIDC_CONFIG",nextState:"FINAL_STEP"});break;case"IMPORT_FROM_URL":t={...I},t.hideImportFromURL=!1,C(t),g({currentState:e,previousState:"OIDC_CONFIG",nextState:"FINAL_STEP"});break;case"IMPORT_SAML_FROM_FILE":t={...I},t.hideImportFromFile=!1,C(t),g({currentState:e,previousState:"SAML_CONFIG",nextState:"FINAL_STEP"});break;case"IMPORT_SAML_FROM_URL":t={...I},t.hideImportFromURL=!1,C(t),g({currentState:e,previousState:"SAML_CONFIG",nextState:"FINAL_STEP"});break;case"FINAL_STEP":t={...I},t.hideFinish=!1,C(t),g({currentState:e,previousState:y.currentState,nextState:"VALIDATE_STEP"});break;case"VALIDATE_STEP":t={...I},t.hideValidate=!1,C(t),g({currentState:e,previousState:y.currentState,nextState:""});break;default:C({hideCustomerInformation:!1,hideOIDC:!0,hideSAML:!0,hideImportFromURL:!0,hideImportFromFile:!0,hideFinish:!0,hideValidate:!0})}};return a().createElement("div",{className:"flowPage"},a().createElement(l.A,{className:"wizardHeader"},a().createElement(c.A,{title:"Identity Provider Integration",className:"pf-u-mb-lg"}),a().createElement(X.n,null,"Manage identity provider integration for your organization."," ",a().createElement(s.E,{component:s.Y.a}))),a().createElement(pe.d8,null,a().createElement("div",{className:n?"":"hiddenPage"},a().createElement(ae,{responseData:E})),a().createElement("div",{className:!n&&u?"initPage":"hiddenPage"},a().createElement(le,{setupIDP:()=>{m(!1)}})),a().createElement("div",{className:n||u?"hiddenPage":""},a().createElement(i.s,{onClose:()=>{console.log("close fancy window")},isProgressive:!0},a().createElement(o.W,{id:"CUSTOMERINFORMATION",name:"Customer Information",isHidden:I.hideCustomerInformation,footer:a().createElement(de,{valid:f.current.CUST_INFO,next:A})},a().createElement(S,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"OIDCCONFIG",name:"OIDC Configuration",isHidden:I.hideOIDC,footer:a().createElement(de,{valid:f.current.OIDC_CONFIG,next:A})},a().createElement(b,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"IMPORTFROMFILE",name:"Import config from file",isHidden:!(!I.hideOIDC&&!I.hideImportFromFile)},a().createElement(k,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"IMPORTFROMURL",name:"Import config from URL",isHidden:!(!I.hideOIDC&&!I.hideImportFromURL),footer:a().createElement(de,{valid:f.current.IMPORT_FROM_URL,next:A})},a().createElement(U,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"SAMLCONFIG",name:"Saml Configuration",isHidden:I.hideSAML,footer:a().createElement(de,{valid:f.current.SAML_CONFIG,next:A})},a().createElement(L,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{name:"Import SAML from file",id:"IMPORTSAMLFROMFILE",isHidden:!(!I.hideSAML&&!I.hideImportFromFile)},a().createElement(D,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"IMPORTSAMLFROMURL",name:"Import SAML from URL",isHidden:!(!I.hideSAML&&!I.hideImportFromURL),footer:a().createElement(de,{valid:f.current.IMPORT_SAML_FROM_URL,next:A})},a().createElement(x,{updateStatus:T,resetNextClicked:A,rootValidation:f,rootUserChoices:t})),a().createElement(o.W,{id:"FINALSTEP",name:"Final Steps",isHidden:I.hideFinish,footer:a().createElement(me,{userChoiceData:t.current.selections})},a().createElement(G,{updateStatus:T,redirectDomain:t.current.orgDomain})),a().createElement(o.W,{id:"VALIDATESTEP",name:"Test your identity provider",isHidden:I.hideValidate,footer:{nextButtonText:"Test identity provider integration",onNext:()=>{const e="http://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/logout?redirect_uri="+encodeURIComponent("https://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/auth?response_type=code&client_id=account&redirect_uri=https%3A%2F%2Fsso.stage.redhat.com%2Fauth%2Frealms%2Fredhat-external%2Faccount%2Flogin-redirect&state=fd315d76-0154-4eac-bfff-d23dedf3a9cf&login=true&scope=openid&kc_idp_hint=customer-idp-b");window.open(e,"IDPTest","height="+window.outerHeight+",width="+window.outerWidth)},isNextDisabled:!1,isBackDisabled:!1}},a().createElement($,{updateStatus:T}))))))};Ee.propTypes={accessToken:g().string};const he=Ee;var fe=n(68994),ve=n(88095);const ye=()=>{const e=(0,K.A)();let t=null;const[n,i]=(0,r.useState)({adminUser:!1,selfServiceIDP:a().createElement(fe.A,null)}),o=(0,ve.useFlag)("iamconsole.IDPIntegration.enabled");return(0,r.useEffect)((()=>{e?.appAction?.("identity-provider-integration"),e.auth.getToken().then((e=>{t=e,(0,v.X2)(t)&&o&&i({adminUser:!0,selfServiceIDP:a().createElement(he,{accessToken:t})})}))}),[]),a().createElement(a().Fragment,null,n.selfServiceIDP)}},94747:(e,t,n)=>{"use strict";function r(e){const t=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),n=JSON.parse(decodeURIComponent(window.atob(t).split("").map((e=>"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2))).join("")));return n&&n.is_org_admin}function a(e,t,n,r){const a={};a[t]=e,r({...n,...a})}function i(e,t,n){let r=!1;const a={};return Object.keys(t).forEach((n=>{const i=e&&e[n],o=t[n].inputType,l=function(e,t,n){if(!e)return{status:"error",message:"This field can not be left empty"};let r,a;switch(t){case"GENERAL":a=/^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/.test(e),r={status:a?"default":"error",message:a?"":"This text is invalid please check for uncommonly used characters"};break;case"DOMAIN":a=/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/g.test(e),r={status:a?"default":"error",message:a?"":"This field needs to be a valid URL"};break;default:r={status:"default",message:""}}return r}(i,o);"error"===l.status&&(r=!0),a[n]={inputType:o,status:l.status,message:l.message}})),n(a),r}n.d(t,{Gw:()=>o,J1:()=>l,SS:()=>i,X2:()=>r,Xr:()=>a});const o=e=>"prod"===e.getEnvironment()?"https://sso.redhat.com/auth/realms/redhat-external/":"https://sso.stage.redhat.com/auth/realms/redhat-external/",l=(e,t)=>o(e)+t},36882:()=>{},11902:()=>{},51662:()=>{},74895:()=>{},7302:()=>{},71036:()=>{},40819:()=>{},50545:()=>{},5937:()=>{},5637:()=>{},21289:()=>{},36752:()=>{},15340:()=>{},79838:()=>{}}]);
//# sourceMappingURL=../sourcemaps/Identity-Provider-Integration.6a1f60dc933d2ed582e80971569c9f68.js.map